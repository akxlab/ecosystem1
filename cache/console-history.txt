await t.wait()
t = await W.sendTransaction(tx)
await W.sendTransaction(tx)
W.sendTransaction(tx)
wallet.sendTransaction(tx)
wallet
w.sendTransaction(tx)
tx
bur2.ownerOf(0)
bur2.ownerOf(1)
bur2
erc721 = await ethers.getContractAt("ERC721", "0xC839A33784b4F7D739Db9598FF6dbee2fdb4801D")
let erc721 = await ethers.getContractAt("ERC721", "0xC839A33784b4F7D739Db9598FF6dbee2fdb4801D")
let erc721 = ethers.getContractAt("ERC721", 0xC839A33784b4F7D739Db9598FF6dbee2fdb4801D)
await provider.waitForTransaction(T.hash)
provider.waitForTransaction(T.hash)
t
let t = await provider.getTransaction(T.hash)
T
t
await T.wait()
T
T.data()
T.data
await T.wait()
T
let T = await W.sendTransaction()
await W.wait()
tx
await tx.wait()
await W.sendTransaction(tx)
await W.signTransaction(tx)
tx = {to: bur2.address, data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005966756e6374696f6e207265676973746572282730783237443930364635636641643832653463313261426239383136343044343535434641343437434427292065787465726e616c2072657475726e732875696e743235362900000000000000', gasLimit: 50000}
await W.sendTransaction(tx)
await W.signTransaction(tx)
tx = {to: bur2.address, data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005966756e6374696f6e207265676973746572282730783237443930364635636641643832653463313261426239383136343044343535434641343437434427292065787465726e616c2072657475726e732875696e743235362900000000000000', gasLimit: 100000000}
await W.signTransaction(tx)
tx
tx = {to: bur2.address, data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005966756e6374696f6e207265676973746572282730783237443930364635636641643832653463313261426239383136343044343535434641343437434427292065787465726e616c2072657475726e732875696e743235362900000000000000', gas: 100000000}
let tx = {to: bur2.address, data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005966756e6374696f6e207265676973746572282730783237443930364635636641643832653463313261426239383136343044343535434641343437434427292065787465726e616c2072657475726e732875696e743235362900000000000000', gas: 100000000}
await W.sendTransaction(tx)
await W.signTransaction(tx)
await W.getBalance()
await wallet.getBalance()
wallet.getBalance()
let tx = {to: bur2.address, data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005966756e6374696f6e207265676973746572282730783237443930364635636641643832653463313261426239383136343044343535434641343437434427292065787465726e616c2072657475726e732875696e743235362900000000000000'}
await W.call()
W.call()
W.call
W.address
W
const W = new ethers.Wallet("2f543e855436853e23466758fbb752a85fde2ba181b4f070916601f2e44c1972", provider)
wallet.address
wallet
const wallet = new ethers.Wallet("2420ebb3044ca119b78b0ce7e608b4fb7a525a2a08b00f31715b8e27b84264ff", provider)
const wallet
provider.call({to: bur2.address, data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005966756e6374696f6e207265676973746572282730783237443930364635636641643832653463313261426239383136343044343535434641343437434427292065787465726e616c2072657475726e732875696e743235362900000000000000'})
const provider = ethers.provider
provider.call({to: bur2.address, data: '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005966756e6374696f6e207265676973746572282730783237443930364635636641643832653463313261426239383136343044343535434641343437434427292065787465726e616c2072657475726e732875696e743235362900000000000000'})
w
bur2
bur
bur2
abic.encode(['string'], ["function register('0x27D906F5cfAd82e4c12aBb981640D455CFA447CD') external returns(uint256)"])
abic
let abic = ethers.utils.defaultAbiCoder
coder.encode()
coder
coder = new utils.AbiCoder()
let coder = new utils.AbiCoder()
let code = new coder()
coder.encode("aaa")
coder.encode("")
coder.encode()
coder = new coder()
coder
let coder = utils.AbiCoder
let abi = utils.AbiCoder
abi = utils.AbiCoder
abi = new utils.AbiCoder
abi = new utils.AbiCoder()
utils
utils.abiCoder.encode("")
utils.abiCoder
abi2.encode
abi2
abi2 = ethers.abiCoder
abi2 = new ethers.abiCoder()
abi2 = new ethers.ABICoder()
abi2
let abi2 = ethers.defaultAbiCoder
abi
let abi = ethers.defaultAbiCoder
let abi = new ethers.ABIEncode()
const ABI = new ethers.ABIEncode()
const ABI = new ethers.ABIEncoder()
ethers.utils.keccak256("function register('0x27D906F5cfAd82e4c12aBb981640D455CFA447CD') external returns(uint256)")
ethers.utils.keccak256(`function register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD") external returns(uint256)`)
ethers.provider.call({to: bur2.address, data: ethers.utils.keccak256(`function register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD") external returns(uint256)`)})
ethers.provider.call({to: bur2.address, data: ethers.utils.keccak256('function register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD") external returns(uint256)')})
ethers.provider.call({to: bur2.address, data: ethers.keccak256('function register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD") external returns(uint256)')})
w
w.provider = hre.ethers.provider
w.provider = hre.ethers.getJsonRPCProvider()
w.provider = hre.ethers.getProvider()
w.provider = ethers.getProvider()
w
w.sendTransaction('register(address)')
bur2.sendTransaction('register(address)')
bur2.'register(address)'
bur2
let user2 = await bur2.register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD")
let user = await bur2.register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD")
const user = await bur2.register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD")
await bur2.deployTransaction.wait(1)
const user = await bur2.register("0x27D906F5cfAd82e4c12aBb981640D455CFA447CD")
bur2
let bur2 = await BUR2.deploy(nodeId,U.address)
let bur = await BUR2.deploy(nodeId,U.address)
let BUR2 = await ethers.getContractFactory("BaseUserRegistry")
const BUR = await ethers.getContractFactory("BaseUserRegistry")
await bur.name()
await bur.uds()
await bur.owner()
bur
await bur.rootNodeAddress()
await bur.rootNodeAddress
bur.rootNodeAddress()
bur.rootNodeAddress
await bur.deployTransaction.wait(2)
await bur.deployTransaction.wait()
bur.deployTransaction.wait()
bur.deployTransaction
bur
await bur.wait
await bur.wait()
bur
let bur = await BUR.deploy(nodeId, U.address)
BUR
const BUR = await ethers.getContractFactory("BaseUserRegistry")
bur
nodeId
const nodeId = utils.keccak256(udc.address)
utils.keccak256(udc.address)
let utils = ethers.utils
udc
let udc = await ethers.getContractAt("UserDataServiceResolver", '0xf3E5404299C5A166dDa532C82A74112446c18b1C')
await ud.deploy(U.address)
await ud.deploy({U})
uds
await U.deploy(ud)
ud
const ud = U()
const uds = U()
const uds = U
U.Contract
uds
u
await U.deploy()
await ud.deploy(U.interface)
await ud.deploy(U)
const ud = await ethers.getContractFactory("UserDataServiceResolver")
U
const U = await ethers.getContractAt("UDS", "0xdcc59D6237f37eD01ef7d8c360EAd7bd590F099d")
await UDS.deploy()
UDS
uds
d.address
await did.deployed()
did.address()
did.address
did
await did.wait()
d
const d = await did.deploy()
did
let did = await ethers.getContractFactory("contracts/modules/DidRegistry.sol:DidRegistry")
const DID = await ethers.getContractFactory("contracts/modules/DidRegistry.sol:DidRegistry")
const DID = await ethers.getContractFactory("DidRegistry")
C
const C = await ethers.getContractAt("UDS", '0x6BddBCBc0190d51892a4345077cd7e82f8a3Dc62')
c
const c = ethers.getContractAt("UDS", '0x6BddBCBc0190d51892a4345077cd7e82f8a3Dc62')
await UDS.deploy()
await ethers.getBalance("0xade28db20ae797a77caf5e75d8f56acd70771325")
w.getBalance()
w
const w = new ethers.Wallet("2f543e855436853e23466758fbb752a85fde2ba181b4f070916601f2e44c1972")
const w = ethers.Wallet(")
S
const S = await ethers.getSigners()
await ethers.getBalance("0xade28db20ae797a77caf5e75d8f56acd70771325")
await ethers.getBalance()
await UDS.deploy()
const UDS = await ethers.getContractFactory("UDS")
await UDS.deploy()
const UDS = await ethers.getContractFactory("UDS")
const uds = await UDS.deploy()
S[0]
exit
S[0].unlock()
S[0]
await s.methods
await s.method
await s.functions
await s.unlock("adv62062")
s
const s = await ethers.getSigner()
S2
const S2 = await ethers.getSigners()
S[1].address
S[2].address
S[3].address
S[0].address
S
const S = await hre.ethers.getSigners()
const uds2 = await UDS.deploy()
const uds = await UDS.deploy()
const UDS = await ethers.getContractFactory("UDS")
await bu.deploy()
bu
const bu = await hre.ethers.getContractFactory("BaseUserRegistry")
await bur.deploy()
bur
bur2
const bur2 = await hre.ethers.getContractFactory("BaseUserRegistry")
const bur = await hre.ethers.getContractFactory("BaseUserRegistry")
const bur = await ethers.getContractFactory("BaseUserRegistry")
.help