{
  "version": "3.3",
  "log": [
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "cf9a13f148d468b3b5222218122da8b482db575826290205855f0202364d1ffe",
          "withoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6",
          "linkedWithoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "7457d37c72fcc028d397160a34c54cb7d26db371a32a25879409214798694a30",
          "withoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964",
          "linkedWithoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)1077_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)1077_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)1077_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "ff773d8079d29b09e4645042b0f11122c50f51e2cc68865c05c2cd1cdf7b8674",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "LabzERC20": {
        "src": "contracts/tokens/LabzERC20.sol:10",
        "version": {
          "withMetadata": "58842746f012f913c7581d5ca2cc9fb66e4ce1971e2849d892e3006df8ddbf9f",
          "withoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d",
          "linkedWithoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "enableTransfer()",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LabzERC20",
            "src": "contracts/tokens/LabzERC20.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)1077_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "canTransfer",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:12"
            },
            {
              "label": "_balanceOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)1077_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)1077_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3908_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3607_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3607_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "3f50bbc29f443e90a8d7e4cda85a6a2814b43c872fdd11694557390accf569ce",
          "withoutMetadata": "a47b95c4627ea6f8bddc061ff2f485afa1a14c7612d96008f9c0c31165f73521",
          "linkedWithoutMetadata": "a47b95c4627ea6f8bddc061ff2f485afa1a14c7612d96008f9c0c31165f73521"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC721BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:14",
        "inherit": [
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC721BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721EnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:15",
        "inherit": [
          "IERC721EnumerableUpgradeable",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721URIStorageUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:12",
        "inherit": [
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC721EnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "28082c83ac969673dcdd468f2e443e9167228b22d8081056c39265048823659c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "60200fb0057ceb32750ca62f72b02e11b6bd23b5069a4600a5615996c27102c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "8c9f783a26a5eb1fd7eb54b8122bbf8258c591dcf41ea65a8d73318d2717739a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "612c5fb4a6f1e047d9ce3325277bd7571ee017c8fb228d7b700ae807647a1b33",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:38",
        "version": {
          "withMetadata": "781b471ead77f94b1bc456ce941761e998fbab357e0d8e5d2b86f9eba078d322",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "7457d37c72fcc028d397160a34c54cb7d26db371a32a25879409214798694a30",
          "withoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964",
          "linkedWithoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)5849_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)5849_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5849_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "93e93edecb1fb2781620003dfed701e1eb079a44c55e70db46e15825f1c0a137",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "ff773d8079d29b09e4645042b0f11122c50f51e2cc68865c05c2cd1cdf7b8674",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ConditionalEscrow": {
        "src": "@openzeppelin/contracts/utils/escrow/ConditionalEscrow.sol:13",
        "inherit": [
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Escrow": {
        "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:22",
        "version": {
          "withMetadata": "e29cf2374cd2ee06518dcc725e4a450742e4314edd5013568e048804d6e92173",
          "withoutMetadata": "73141c25244ef9757e39f45a7e1cee23eeefba3035f8950ef36b013cf70ff650",
          "linkedWithoutMetadata": "73141c25244ef9757e39f45a7e1cee23eeefba3035f8950ef36b013cf70ff650"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RefundEscrow": {
        "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:18",
        "version": {
          "withMetadata": "0a12a62e7e4eef2995f93a61fb4a92e7ac745b5a4a21b6b92d5253083f74db7b",
          "withoutMetadata": "8bfe4de9943a5fc1b20a55968bef22963fde77ca0c920a121030aef9a7541602",
          "linkedWithoutMetadata": "8bfe4de9943a5fc1b20a55968bef22963fde77ca0c920a121030aef9a7541602"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_beneficiary",
            "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            },
            {
              "label": "_state",
              "offset": 0,
              "slot": "2",
              "type": "t_enum(State)6829",
              "contract": "RefundEscrow",
              "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)6829": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LockLogic": {
        "src": "contracts/Logic/LockLogic.sol:10",
        "version": {
          "withMetadata": "f99ea974018d85a7e8374ce31e12bb9d5d32c3f32fec1863c975e3f4ff350716",
          "withoutMetadata": "15fd173c85f0456c5c6382436c1deeff3c131609eda3a57f81bd6983b7dc56a0",
          "linkedWithoutMetadata": "15fd173c85f0456c5c6382436c1deeff3c131609eda3a57f81bd6983b7dc56a0"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "availableBalance(address)",
          "isHavingAvailableBalance(address)",
          "lockTokens(address,uint256)",
          "unlockTokensFor(address,uint256)",
          "withdrawUnlockedTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockLogic",
            "src": "contracts/Logic/LockLogic.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ERC20)4934",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:15"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:21"
            },
            {
              "label": "_lastBuyTime",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:22"
            },
            {
              "label": "_vipHolders",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:23"
            },
            {
              "label": "_isUnlocked",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:24"
            },
            {
              "label": "lockedBalance",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:25"
            },
            {
              "label": "unlockedBalance",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:26"
            },
            {
              "label": "canSell",
              "offset": 0,
              "slot": "9",
              "type": "t_bool",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20)4934": {
              "label": "contract ERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "PrivateBuyingLogic": {
        "src": "contracts/Logic/PrivateBuyingLogic.sol:17",
        "inherit": [
          "ReentrancyGuard",
          "LibMath",
          "Pricing"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "PrivateSaleLogic": {
        "src": "contracts/Logic/PrivateSaleLogic.sol:10",
        "version": {
          "withMetadata": "3873910d1a2abfb826a34f1c75c4918239ea59d8f9f8f6d46a504a0309280886",
          "withoutMetadata": "ec6414a0733146d4cacfba3f89643d36490205209febe0684a6c1e9d6d38d0dd",
          "linkedWithoutMetadata": "ec6414a0733146d4cacfba3f89643d36490205209febe0684a6c1e9d6d38d0dd"
        },
        "inherit": [
          "Ownable",
          "Context",
          "PrivateBuyingLogic",
          "ReentrancyGuard",
          "LibMath",
          "Pricing"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "buy()",
          "closeSale()",
          "forceClose()",
          "restart()",
          "setPublicLaunchContract(address)",
          "emergencyBreakAndEnableRefunds()",
          "emergencyBreak()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleLogic",
            "src": "contracts/Logic/PrivateSaleLogic.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_saleToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:12"
            },
            {
              "label": "_labz",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(LabzERC20)8105",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:13"
            },
            {
              "label": "startTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:17"
            },
            {
              "label": "maxTokensForPrivateSale",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:18"
            },
            {
              "label": "maxTokensPerAccount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:19"
            },
            {
              "label": "maxSaleDuration",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:20"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:21"
            },
            {
              "label": "privateSaleIsStarted",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:22"
            },
            {
              "label": "escrowBeneficiary",
              "offset": 1,
              "slot": "10",
              "type": "t_address_payable",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:23"
            },
            {
              "label": "breakIsOn",
              "offset": 21,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:24"
            },
            {
              "label": "isClosed",
              "offset": 22,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:25"
            },
            {
              "label": "_saleRefundEscrow",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RefundEscrow)6995",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:27"
            },
            {
              "label": "lockLogic",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(LabzERC20)8105": {
              "label": "contract LabzERC20",
              "numberOfBytes": "20"
            },
            "t_contract(RefundEscrow)6995": {
              "label": "contract RefundEscrow",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXAccounts": {
        "src": "contracts/tokens/AKXAccounts.sol:20",
        "version": {
          "withMetadata": "9c632ffaa4fee037a800890dd974e4fd481410ed70a5933ff162ba1721a89357",
          "withoutMetadata": "325424fe88a5c7327e312549481206ff1782da770e018320525f1a593f35aedd",
          "linkedWithoutMetadata": "325424fe88a5c7327e312549481206ff1782da770e018320525f1a593f35aedd"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC721BurnableUpgradeable",
          "ERC721URIStorageUpgradeable",
          "ERC721EnumerableUpgradeable",
          "IERC721EnumerableUpgradeable",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable"
        ],
        "methods": [
          "()",
          "initialize(address)",
          "tokenURI(uint256)",
          "newAccount()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC721BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "302",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "351",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "352",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "401",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "451",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_tokenIdCounter",
              "offset": 0,
              "slot": "501",
              "type": "t_struct(Counter)3186_storage",
              "contract": "AKXAccounts",
              "src": "contracts/tokens/AKXAccounts.sol:24"
            },
            {
              "label": "_accountStorage",
              "offset": 0,
              "slot": "502",
              "type": "t_address",
              "contract": "AKXAccounts",
              "src": "contracts/tokens/AKXAccounts.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3908_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3607_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3607_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LabzERC20": {
        "src": "contracts/tokens/LabzERC20.sol:10",
        "version": {
          "withMetadata": "58842746f012f913c7581d5ca2cc9fb66e4ce1971e2849d892e3006df8ddbf9f",
          "withoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d",
          "linkedWithoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "enableTransfer()",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LabzERC20",
            "src": "contracts/tokens/LabzERC20.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)5849_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "canTransfer",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:12"
            },
            {
              "label": "_balanceOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)5849_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5849_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccountStorage": {
        "src": "contracts/tokens/Storage/AccountStorage.sol:9",
        "version": {
          "withMetadata": "d461b57f29f1e78042de9f7c81871ea4bb4431482e513459f02ae39e86cb74e7",
          "withoutMetadata": "14d8167e0741b7b8d7e33a35f241c77a5a75e2e7745eda98e028748e38b7b081",
          "linkedWithoutMetadata": "14d8167e0741b7b8d7e33a35f241c77a5a75e2e7745eda98e028748e38b7b081"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable"
        ],
        "methods": [
          "()",
          "initialize()",
          "create(address,uint256)",
          "updateOperator(address)",
          "data(address,uint256)",
          "data(address)",
          "data(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_accountIndex",
              "offset": 0,
              "slot": "301",
              "type": "t_struct(Counter)3186_storage",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:12"
            },
            {
              "label": "_index",
              "offset": 0,
              "slot": "302",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:22"
            },
            {
              "label": "_tokenIdToIndex",
              "offset": 0,
              "slot": "303",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:23"
            },
            {
              "label": "_data",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_uint256,t_struct(Account)8143_storage)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:24"
            },
            {
              "label": "_sha",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:25"
            },
            {
              "label": "_hasAccount",
              "offset": 0,
              "slot": "306",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:26"
            },
            {
              "label": "_tokenIdAssociated",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Account)8143_storage)": {
              "label": "mapping(uint256 => struct AccountStorage.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)8143_storage": {
              "label": "struct AccountStorage.Account",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creationDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(AddressSet)3908_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3607_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3607_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LibMath": {
        "src": "contracts/utils/LibMath.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "calculateTokenQty(uint256)",
          "calculateFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Pricing": {
        "src": "contracts/utils/Pricing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3908_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3607_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3607_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "3f50bbc29f443e90a8d7e4cda85a6a2814b43c872fdd11694557390accf569ce",
          "withoutMetadata": "a47b95c4627ea6f8bddc061ff2f485afa1a14c7612d96008f9c0c31165f73521",
          "linkedWithoutMetadata": "a47b95c4627ea6f8bddc061ff2f485afa1a14c7612d96008f9c0c31165f73521"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC721BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:14",
        "inherit": [
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC721BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721EnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:15",
        "inherit": [
          "IERC721EnumerableUpgradeable",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721URIStorageUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:12",
        "inherit": [
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC721EnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "28082c83ac969673dcdd468f2e443e9167228b22d8081056c39265048823659c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "60200fb0057ceb32750ca62f72b02e11b6bd23b5069a4600a5615996c27102c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "8c9f783a26a5eb1fd7eb54b8122bbf8258c591dcf41ea65a8d73318d2717739a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "612c5fb4a6f1e047d9ce3325277bd7571ee017c8fb228d7b700ae807647a1b33",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:38",
        "version": {
          "withMetadata": "781b471ead77f94b1bc456ce941761e998fbab357e0d8e5d2b86f9eba078d322",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "7457d37c72fcc028d397160a34c54cb7d26db371a32a25879409214798694a30",
          "withoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964",
          "linkedWithoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)5849_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)5849_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5849_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "93e93edecb1fb2781620003dfed701e1eb079a44c55e70db46e15825f1c0a137",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "ff773d8079d29b09e4645042b0f11122c50f51e2cc68865c05c2cd1cdf7b8674",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ConditionalEscrow": {
        "src": "@openzeppelin/contracts/utils/escrow/ConditionalEscrow.sol:13",
        "inherit": [
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Escrow": {
        "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:22",
        "version": {
          "withMetadata": "e29cf2374cd2ee06518dcc725e4a450742e4314edd5013568e048804d6e92173",
          "withoutMetadata": "73141c25244ef9757e39f45a7e1cee23eeefba3035f8950ef36b013cf70ff650",
          "linkedWithoutMetadata": "73141c25244ef9757e39f45a7e1cee23eeefba3035f8950ef36b013cf70ff650"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RefundEscrow": {
        "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:18",
        "version": {
          "withMetadata": "0a12a62e7e4eef2995f93a61fb4a92e7ac745b5a4a21b6b92d5253083f74db7b",
          "withoutMetadata": "8bfe4de9943a5fc1b20a55968bef22963fde77ca0c920a121030aef9a7541602",
          "linkedWithoutMetadata": "8bfe4de9943a5fc1b20a55968bef22963fde77ca0c920a121030aef9a7541602"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_beneficiary",
            "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            },
            {
              "label": "_state",
              "offset": 0,
              "slot": "2",
              "type": "t_enum(State)6829",
              "contract": "RefundEscrow",
              "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)6829": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LockLogic": {
        "src": "contracts/Logic/LockLogic.sol:10",
        "version": {
          "withMetadata": "f99ea974018d85a7e8374ce31e12bb9d5d32c3f32fec1863c975e3f4ff350716",
          "withoutMetadata": "15fd173c85f0456c5c6382436c1deeff3c131609eda3a57f81bd6983b7dc56a0",
          "linkedWithoutMetadata": "15fd173c85f0456c5c6382436c1deeff3c131609eda3a57f81bd6983b7dc56a0"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "availableBalance(address)",
          "isHavingAvailableBalance(address)",
          "lockTokens(address,uint256)",
          "unlockTokensFor(address,uint256)",
          "withdrawUnlockedTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockLogic",
            "src": "contracts/Logic/LockLogic.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ERC20)4934",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:15"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:21"
            },
            {
              "label": "_lastBuyTime",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:22"
            },
            {
              "label": "_vipHolders",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:23"
            },
            {
              "label": "_isUnlocked",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:24"
            },
            {
              "label": "lockedBalance",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:25"
            },
            {
              "label": "unlockedBalance",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:26"
            },
            {
              "label": "canSell",
              "offset": 0,
              "slot": "9",
              "type": "t_bool",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20)4934": {
              "label": "contract ERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "PrivateBuyingLogic": {
        "src": "contracts/Logic/PrivateBuyingLogic.sol:17",
        "inherit": [
          "ReentrancyGuard",
          "LibMath",
          "Pricing"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "PrivateSaleLogic": {
        "src": "contracts/Logic/PrivateSaleLogic.sol:10",
        "version": {
          "withMetadata": "db7ab0377fed1c4165c96773b25c8dc1d200d126c0be3548d1caf765d5f1d50e",
          "withoutMetadata": "c15bdad3c4bc8be8e92910db0248d83de88efd8ae026eaf70a6d47197e954dbb",
          "linkedWithoutMetadata": "c15bdad3c4bc8be8e92910db0248d83de88efd8ae026eaf70a6d47197e954dbb"
        },
        "inherit": [
          "Ownable",
          "Context",
          "PrivateBuyingLogic",
          "ReentrancyGuard",
          "LibMath",
          "Pricing"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "buy()",
          "closeSale()",
          "forceClose()",
          "restart()",
          "setPublicLaunchContract(address)",
          "emergencyBreakAndEnableRefunds()",
          "emergencyBreak()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleLogic",
            "src": "contracts/Logic/PrivateSaleLogic.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_saleToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:12"
            },
            {
              "label": "_labz",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(LabzERC20)8093",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:13"
            },
            {
              "label": "startTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:17"
            },
            {
              "label": "maxTokensForPrivateSale",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:18"
            },
            {
              "label": "maxTokensPerAccount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:19"
            },
            {
              "label": "maxSaleDuration",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:20"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:21"
            },
            {
              "label": "privateSaleIsStarted",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:22"
            },
            {
              "label": "escrowBeneficiary",
              "offset": 1,
              "slot": "10",
              "type": "t_address_payable",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:23"
            },
            {
              "label": "breakIsOn",
              "offset": 21,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:24"
            },
            {
              "label": "isClosed",
              "offset": 22,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:25"
            },
            {
              "label": "_saleRefundEscrow",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RefundEscrow)6995",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:27"
            },
            {
              "label": "lockLogic",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(LabzERC20)8093": {
              "label": "contract LabzERC20",
              "numberOfBytes": "20"
            },
            "t_contract(RefundEscrow)6995": {
              "label": "contract RefundEscrow",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXAccounts": {
        "src": "contracts/tokens/AKXAccounts.sol:20",
        "version": {
          "withMetadata": "9c632ffaa4fee037a800890dd974e4fd481410ed70a5933ff162ba1721a89357",
          "withoutMetadata": "325424fe88a5c7327e312549481206ff1782da770e018320525f1a593f35aedd",
          "linkedWithoutMetadata": "325424fe88a5c7327e312549481206ff1782da770e018320525f1a593f35aedd"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC721BurnableUpgradeable",
          "ERC721URIStorageUpgradeable",
          "ERC721EnumerableUpgradeable",
          "IERC721EnumerableUpgradeable",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable"
        ],
        "methods": [
          "()",
          "initialize(address)",
          "tokenURI(uint256)",
          "newAccount()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC721BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "302",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "351",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "352",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "401",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "451",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_tokenIdCounter",
              "offset": 0,
              "slot": "501",
              "type": "t_struct(Counter)3186_storage",
              "contract": "AKXAccounts",
              "src": "contracts/tokens/AKXAccounts.sol:24"
            },
            {
              "label": "_accountStorage",
              "offset": 0,
              "slot": "502",
              "type": "t_address",
              "contract": "AKXAccounts",
              "src": "contracts/tokens/AKXAccounts.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)3908_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3607_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3607_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LabzERC20": {
        "src": "contracts/tokens/LabzERC20.sol:10",
        "version": {
          "withMetadata": "58842746f012f913c7581d5ca2cc9fb66e4ce1971e2849d892e3006df8ddbf9f",
          "withoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d",
          "linkedWithoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "enableTransfer()",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LabzERC20",
            "src": "contracts/tokens/LabzERC20.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)5849_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "canTransfer",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:12"
            },
            {
              "label": "_balanceOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)5849_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)5849_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccountStorage": {
        "src": "contracts/tokens/Storage/AccountStorage.sol:9",
        "version": {
          "withMetadata": "d461b57f29f1e78042de9f7c81871ea4bb4431482e513459f02ae39e86cb74e7",
          "withoutMetadata": "14d8167e0741b7b8d7e33a35f241c77a5a75e2e7745eda98e028748e38b7b081",
          "linkedWithoutMetadata": "14d8167e0741b7b8d7e33a35f241c77a5a75e2e7745eda98e028748e38b7b081"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable"
        ],
        "methods": [
          "()",
          "initialize()",
          "create(address,uint256)",
          "updateOperator(address)",
          "data(address,uint256)",
          "data(address)",
          "data(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_accountIndex",
              "offset": 0,
              "slot": "301",
              "type": "t_struct(Counter)3186_storage",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:12"
            },
            {
              "label": "_index",
              "offset": 0,
              "slot": "302",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:22"
            },
            {
              "label": "_tokenIdToIndex",
              "offset": 0,
              "slot": "303",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:23"
            },
            {
              "label": "_data",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_uint256,t_struct(Account)8131_storage)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:24"
            },
            {
              "label": "_sha",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:25"
            },
            {
              "label": "_hasAccount",
              "offset": 0,
              "slot": "306",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:26"
            },
            {
              "label": "_tokenIdAssociated",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)3908_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Account)8131_storage)": {
              "label": "mapping(uint256 => struct AccountStorage.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)8131_storage": {
              "label": "struct AccountStorage.Account",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creationDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(AddressSet)3908_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3607_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3607_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LibMath": {
        "src": "contracts/utils/LibMath.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "calculateTokenQty(uint256)",
          "calculateFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Pricing": {
        "src": "contracts/utils/Pricing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "cf9a13f148d468b3b5222218122da8b482db575826290205855f0202364d1ffe",
          "withoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6",
          "linkedWithoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "9d5b1c31f079d616fb4749385c0049580b58e2a6796a265c7799169aaece09c0",
          "withoutMetadata": "1e857c9e7e79723ddf91833ce13db900c5067d806ebe9ff2073cc2a2d0330ffa",
          "linkedWithoutMetadata": "1e857c9e7e79723ddf91833ce13db900c5067d806ebe9ff2073cc2a2d0330ffa"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "createIdentity(address,string)",
          "registerOwnedAsset(address,address)",
          "assetBelongsToIdent(address,address)",
          "getIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:17"
            },
            {
              "label": "_identities",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:18"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:19"
            },
            {
              "label": "_exists",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "cf9a13f148d468b3b5222218122da8b482db575826290205855f0202364d1ffe",
          "withoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6",
          "linkedWithoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "c1165b0ab21057d2b9f7783ba58a8e519430917019b60667d448d76c7d0e1238",
          "withoutMetadata": "f8a9eb135f459c8847fe90477d7a376455e326330151d4574f4ac5dad772297a",
          "linkedWithoutMetadata": "f8a9eb135f459c8847fe90477d7a376455e326330151d4574f4ac5dad772297a"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "createIdentity(address,string)",
          "registerOwnedAsset(address,address)",
          "assetBelongsToIdent(address,address)",
          "getIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:17"
            },
            {
              "label": "_identities",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:18"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:19"
            },
            {
              "label": "_exists",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)2197_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1896_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)1896_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "28082c83ac969673dcdd468f2e443e9167228b22d8081056c39265048823659c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "8c9f783a26a5eb1fd7eb54b8122bbf8258c591dcf41ea65a8d73318d2717739a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "612c5fb4a6f1e047d9ce3325277bd7571ee017c8fb228d7b700ae807647a1b33",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:38",
        "version": {
          "withMetadata": "781b471ead77f94b1bc456ce941761e998fbab357e0d8e5d2b86f9eba078d322",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "93e93edecb1fb2781620003dfed701e1eb079a44c55e70db46e15825f1c0a137",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AKXSetup": {
        "src": "contracts/AKXSetup.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "labzToken",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:6"
            },
            {
              "label": "identityRegistry",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:7"
            },
            {
              "label": "dexService",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:8"
            },
            {
              "label": "daoGovernor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:9"
            },
            {
              "label": "akxToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:10"
            },
            {
              "label": "refContract",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:11"
            },
            {
              "label": "psl",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:12"
            },
            {
              "label": "rootController",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXSystem": {
        "src": "contracts/AKXSystem.sol:11",
        "version": {
          "withMetadata": "17def632e1715c01811fa6232b9dba635fb2cd052541c7de221378e12f5ffaf2",
          "withoutMetadata": "3b13efc3a048b6b3af49e0245510c6b353d48d567410044db1732dd03b9d68b3",
          "linkedWithoutMetadata": "3b13efc3a048b6b3af49e0245510c6b353d48d567410044db1732dd03b9d68b3"
        },
        "inherit": [
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "AKXRoles",
          "AKXSetup",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(string,string,address)",
          "updateVersion(string)",
          "version()",
          "holdersCount()",
          "isPrivateSale()",
          "sysStartDate()",
          "startPrivateSale()",
          "stopPrivateSale()",
          "systemSetup(address,address,address,address,address,address,address,address)",
          "Labz()",
          "Idr()",
          "Akx()",
          "Referrals()",
          "PrivateSale()",
          "RootController()",
          "Governor()",
          "DEX()",
          "addFounder(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "labzToken",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:6"
            },
            {
              "label": "identityRegistry",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:7"
            },
            {
              "label": "dexService",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:8"
            },
            {
              "label": "daoGovernor",
              "offset": 0,
              "slot": "104",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:9"
            },
            {
              "label": "akxToken",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:10"
            },
            {
              "label": "refContract",
              "offset": 0,
              "slot": "106",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:11"
            },
            {
              "label": "psl",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:12"
            },
            {
              "label": "rootController",
              "offset": 0,
              "slot": "108",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:13"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "109",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "159",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "210",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "260",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "309",
              "type": "t_string_storage",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:13"
            },
            {
              "label": "_setup",
              "offset": 0,
              "slot": "310",
              "type": "t_bool",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:14"
            },
            {
              "label": "safe",
              "offset": 1,
              "slot": "310",
              "type": "t_address",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:16"
            },
            {
              "label": "checkFounder",
              "offset": 0,
              "slot": "311",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:20"
            },
            {
              "label": "founderAllocations",
              "offset": 0,
              "slot": "312",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)2197_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1896_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)1896_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXRoles": {
        "src": "contracts/Roles.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "93e93edecb1fb2781620003dfed701e1eb079a44c55e70db46e15825f1c0a137",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Base64": {
        "src": "@openzeppelin/contracts/utils/Base64.sol:11",
        "version": {
          "withMetadata": "0863189e6f5bdf23b61ec304c6dc30646a0abe0113bdc35be7e5c594a80a44f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ILogic": {
        "src": "contracts/interfaces/ILogic.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setLogicData(bytes)",
          "execute(address,bytes)",
          "coreLogic(bytes)",
          "getResults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Rewards": {
        "src": "contracts/interfaces/Rewards.sol:7",
        "inherit": [
          "InitModifiers"
        ],
        "libraries": [],
        "methods": [
          "canClaim()",
          "canEarn()",
          "claim()",
          "earned()",
          "claimed()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Rewards",
            "src": "contracts/interfaces/Rewards.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            },
            {
              "label": "beneficiaries",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(RewardBeneficiary)943_storage)",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:36"
            },
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(RewardTypes)914": {
              "label": "enum Rewards.RewardTypes",
              "members": [
                "REFERRAL",
                "STAKING",
                "OTHER"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(RewardBeneficiary)943_storage)": {
              "label": "mapping(address => struct Rewards.RewardBeneficiary)",
              "numberOfBytes": "32"
            },
            "t_struct(RewardBeneficiary)943_storage": {
              "label": "struct Rewards.RewardBeneficiary",
              "members": [
                {
                  "label": "consolidatedEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "beneficiary",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_info",
                  "type": "t_struct(RewardInfo)935_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(RewardInfo)935_storage": {
              "label": "struct Rewards.RewardInfo",
              "members": [
                {
                  "label": "_type",
                  "type": "t_enum(RewardTypes)914",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "consolidatedPerUnit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "earned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "claimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Referrals": {
        "src": "contracts/tokens/Referrals.sol:9",
        "version": {
          "withMetadata": "96a550a60cca0c5e9f7cb80cb102f03e7143b4863deee39ded4248a3c8b32689",
          "withoutMetadata": "4285a57dd52bd25b7a7270cc9939c182f8363f4a5a9d58cb7de630d4690efbc8",
          "linkedWithoutMetadata": "4285a57dd52bd25b7a7270cc9939c182f8363f4a5a9d58cb7de630d4690efbc8"
        },
        "inherit": [
          "Ownable",
          "Context",
          "Rewards",
          "InitModifiers"
        ],
        "libraries": [
          "SafeERC20",
          "Base64"
        ],
        "methods": [
          "(address,address)",
          "canClaim()",
          "canEarn()",
          "setLogic(address)",
          "claim()",
          "refer(string,address,address,uint256)",
          "registerReferrer(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Referrals",
            "src": "contracts/tokens/Referrals.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            },
            {
              "label": "beneficiaries",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(RewardBeneficiary)943_storage)",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:36"
            },
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:38"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "registeredReferrers",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:13"
            },
            {
              "label": "referralCodes",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:14"
            },
            {
              "label": "codesToReferrer",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:15"
            },
            {
              "label": "_codeExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:16"
            },
            {
              "label": "_referralLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:18"
            },
            {
              "label": "__logic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(ILogic)904",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:19"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ILogic)904": {
              "label": "contract ILogic",
              "numberOfBytes": "20"
            },
            "t_enum(RewardTypes)914": {
              "label": "enum Rewards.RewardTypes",
              "members": [
                "REFERRAL",
                "STAKING",
                "OTHER"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RewardBeneficiary)943_storage)": {
              "label": "mapping(address => struct Rewards.RewardBeneficiary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RewardBeneficiary)943_storage": {
              "label": "struct Rewards.RewardBeneficiary",
              "members": [
                {
                  "label": "consolidatedEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "beneficiary",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_info",
                  "type": "t_struct(RewardInfo)935_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(RewardInfo)935_storage": {
              "label": "struct Rewards.RewardInfo",
              "members": [
                {
                  "label": "_type",
                  "type": "t_enum(RewardTypes)914",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "consolidatedPerUnit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "earned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "claimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "InitModifiers": {
        "src": "contracts/utils/InitModifiers.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ReferralLogic": {
        "src": "contracts/Logic/ReferralLogic.sol:8",
        "version": {
          "withMetadata": "2a4adaf23a11b304cb4ec69505e7130c2f825fa0c3849aad4480cfad8d936819",
          "withoutMetadata": "b44f57054354f80163f9ce1d58b3d33a7afe956bf12314a800c8e26b76c5a287",
          "linkedWithoutMetadata": "b44f57054354f80163f9ce1d58b3d33a7afe956bf12314a800c8e26b76c5a287"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ILogic"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setLogicData(bytes)",
          "execute(address,bytes)",
          "coreLogic(bytes)",
          "getResults(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReferralLogic",
            "src": "contracts/Logic/ReferralLogic.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mantissa",
            "src": "contracts/Logic/ReferralLogic.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_index",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:17"
            },
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:18"
            },
            {
              "label": "_reqById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(DataRequest)151_storage)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:20"
            },
            {
              "label": "_currentReqIdByAddress",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:21"
            },
            {
              "label": "_pending",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:22"
            },
            {
              "label": "_failed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:23"
            },
            {
              "label": "_done",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:24"
            },
            {
              "label": "_results",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:25"
            },
            {
              "label": "_percent",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:26"
            },
            {
              "label": "_multiplier",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DataRequest)151_storage)": {
              "label": "mapping(uint256 => struct ReferralLogic.DataRequest)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(DataRequest)151_storage": {
              "label": "struct ReferralLogic.DataRequest",
              "members": [
                {
                  "label": "_sender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "code",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_referree",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ILogic": {
        "src": "contracts/interfaces/ILogic.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setLogicData(bytes)",
          "execute(address,bytes)",
          "coreLogic(bytes)",
          "getResults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)2197_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1896_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)1896_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "28082c83ac969673dcdd468f2e443e9167228b22d8081056c39265048823659c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "8c9f783a26a5eb1fd7eb54b8122bbf8258c591dcf41ea65a8d73318d2717739a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "612c5fb4a6f1e047d9ce3325277bd7571ee017c8fb228d7b700ae807647a1b33",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:38",
        "version": {
          "withMetadata": "781b471ead77f94b1bc456ce941761e998fbab357e0d8e5d2b86f9eba078d322",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "93e93edecb1fb2781620003dfed701e1eb079a44c55e70db46e15825f1c0a137",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AKXSetup": {
        "src": "contracts/AKXSetup.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "labzToken",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:6"
            },
            {
              "label": "identityRegistry",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:7"
            },
            {
              "label": "dexService",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:8"
            },
            {
              "label": "daoGovernor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:9"
            },
            {
              "label": "akxToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:10"
            },
            {
              "label": "refContract",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:11"
            },
            {
              "label": "psl",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:12"
            },
            {
              "label": "rootController",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXSystem": {
        "src": "contracts/AKXSystem.sol:11",
        "version": {
          "withMetadata": "17def632e1715c01811fa6232b9dba635fb2cd052541c7de221378e12f5ffaf2",
          "withoutMetadata": "3b13efc3a048b6b3af49e0245510c6b353d48d567410044db1732dd03b9d68b3",
          "linkedWithoutMetadata": "3b13efc3a048b6b3af49e0245510c6b353d48d567410044db1732dd03b9d68b3"
        },
        "inherit": [
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "AKXRoles",
          "AKXSetup",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(string,string,address)",
          "updateVersion(string)",
          "version()",
          "holdersCount()",
          "isPrivateSale()",
          "sysStartDate()",
          "startPrivateSale()",
          "stopPrivateSale()",
          "systemSetup(address,address,address,address,address,address,address,address)",
          "Labz()",
          "Idr()",
          "Akx()",
          "Referrals()",
          "PrivateSale()",
          "RootController()",
          "Governor()",
          "DEX()",
          "addFounder(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "labzToken",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:6"
            },
            {
              "label": "identityRegistry",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:7"
            },
            {
              "label": "dexService",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:8"
            },
            {
              "label": "daoGovernor",
              "offset": 0,
              "slot": "104",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:9"
            },
            {
              "label": "akxToken",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:10"
            },
            {
              "label": "refContract",
              "offset": 0,
              "slot": "106",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:11"
            },
            {
              "label": "psl",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:12"
            },
            {
              "label": "rootController",
              "offset": 0,
              "slot": "108",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:13"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "109",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "159",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "210",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "260",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "309",
              "type": "t_string_storage",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:13"
            },
            {
              "label": "_setup",
              "offset": 0,
              "slot": "310",
              "type": "t_bool",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:14"
            },
            {
              "label": "safe",
              "offset": 1,
              "slot": "310",
              "type": "t_address",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:16"
            },
            {
              "label": "checkFounder",
              "offset": 0,
              "slot": "311",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:20"
            },
            {
              "label": "founderAllocations",
              "offset": 0,
              "slot": "312",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)2197_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)2197_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1896_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)1896_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXRoles": {
        "src": "contracts/Roles.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "cf9a13f148d468b3b5222218122da8b482db575826290205855f0202364d1ffe",
          "withoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6",
          "linkedWithoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "6127744d6d3eed23d725b50c328b888fa51cf7bd1231be37ef37f178d362a9f8",
          "withoutMetadata": "4ec48a3d8d0ac0e14c919b60743a3de60100bec1c40ec4f4ebf4b9e79c531eba",
          "linkedWithoutMetadata": "4ec48a3d8d0ac0e14c919b60743a3de60100bec1c40ec4f4ebf4b9e79c531eba"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "createIdentity(address,string)",
          "registerIdentity(address)",
          "registerOwnedAsset(address,address)",
          "assetBelongsToIdent(address,address)",
          "getIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:17"
            },
            {
              "label": "_identities",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:18"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "e09b24c941ee1f32a06e7fbf49b9785b8bddf6946be90a97e55a837777f43c8c",
          "withoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6",
          "linkedWithoutMetadata": "223b7744ea318bb8740e6422329f3e7b7620ff775952c37d5bc6357f16fe93b6"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "9a7fe925d977edd104374eaa04d22cce45b4e952a705009fd913f7452fbc0612",
          "withoutMetadata": "6124588b2a8739b36d8c73415f322eba306035a9fa9a1b62f8e8c3f04173b2cf",
          "linkedWithoutMetadata": "6124588b2a8739b36d8c73415f322eba306035a9fa9a1b62f8e8c3f04173b2cf"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "createIdentity(address,string)",
          "registerIdentity(address)",
          "registerOwnedAsset(address,address)",
          "assetBelongsToIdent(address,address)",
          "getIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:17"
            },
            {
              "label": "_identities",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:18"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "868efdde5b32d5f37f365ff90e66ff38edf30f56ae774e6014442070c62e35b3",
          "withoutMetadata": "34b80d79466dadbb85125cbb7b091b160520cf16466b8b4edb9829b6b9b66036",
          "linkedWithoutMetadata": "34b80d79466dadbb85125cbb7b091b160520cf16466b8b4edb9829b6b9b66036"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "593e09f6ae289d5a8d6103702c6aec01742cc32a0e2062c361f8d655aae88bd1",
          "withoutMetadata": "40d4accf7d6d1b73a3c7cabcc4fe23939f2d4673ae866f2876a26876ad05228c",
          "linkedWithoutMetadata": "40d4accf7d6d1b73a3c7cabcc4fe23939f2d4673ae866f2876a26876ad05228c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "createIdentity(address,string)",
          "registerIdentity(address)",
          "registerOwnedAsset(address,address)",
          "assetBelongsToIdent(address,address)",
          "getIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:17"
            },
            {
              "label": "_identities",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:18"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "868efdde5b32d5f37f365ff90e66ff38edf30f56ae774e6014442070c62e35b3",
          "withoutMetadata": "34b80d79466dadbb85125cbb7b091b160520cf16466b8b4edb9829b6b9b66036",
          "linkedWithoutMetadata": "34b80d79466dadbb85125cbb7b091b160520cf16466b8b4edb9829b6b9b66036"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "535b954cf03ccead74ef9a16f650cad2cffa0431d99920fd69a62ee8dd00b3fa",
          "withoutMetadata": "1a536b63aa4a722cdc7740a5b6145d457f5f237cf52b5c44832935add68873fa",
          "linkedWithoutMetadata": "1a536b63aa4a722cdc7740a5b6145d457f5f237cf52b5c44832935add68873fa"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "registerIdentity(address)",
          "registerOwnedAsset(address,address)",
          "assetBelongsToIdent(address,address)",
          "getIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:17"
            },
            {
              "label": "_identities",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:18"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "d0d45c1b07a95b3206121141a0922d797fe394cd4d01c0f97f6677e55b01d563",
          "withoutMetadata": "9c2d49284062a59121bb835c8a720ae78ebf774546e76c896a48fb0e2bfa56c9",
          "linkedWithoutMetadata": "9c2d49284062a59121bb835c8a720ae78ebf774546e76c896a48fb0e2bfa56c9"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "60952c2494dbe5fb16fb55b0755aeb5ff0d697d5c02fc8f9e3c4eb8e9cf95b25",
          "withoutMetadata": "9353a4131c4a51de0ae04663b71cc416730738b340bc3d149fe89287728caf3f",
          "linkedWithoutMetadata": "9353a4131c4a51de0ae04663b71cc416730738b340bc3d149fe89287728caf3f"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "registerIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "a36d3c20b66d6b8f016935627f5d505f41eef30906db97e8f62deb2a64be397d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "d0d45c1b07a95b3206121141a0922d797fe394cd4d01c0f97f6677e55b01d563",
          "withoutMetadata": "9c2d49284062a59121bb835c8a720ae78ebf774546e76c896a48fb0e2bfa56c9",
          "linkedWithoutMetadata": "9c2d49284062a59121bb835c8a720ae78ebf774546e76c896a48fb0e2bfa56c9"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "8d7f8618f0e8fe69096c77b4905e72d8259c2e7ae159519b5cdfcb9d082752b7",
          "withoutMetadata": "f3014618f9ee5e98818d61e87ba32c240e2f4ef2fb7cc89990362fb8a16d0a90",
          "linkedWithoutMetadata": "f3014618f9ee5e98818d61e87ba32c240e2f4ef2fb7cc89990362fb8a16d0a90"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "registerIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "f77478974c38553bd283cb13e818c2acf815b84d2476986759568a3ada162675",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "bdfac1d81888da3d0a570a9d6b02bb8490c713d2d9bbfbef46ac1af753e37ef9",
          "withoutMetadata": "4f43a74136975184b89a71026e942335b6456fbd4706acfccc4139dd6935d1fd",
          "linkedWithoutMetadata": "4f43a74136975184b89a71026e942335b6456fbd4706acfccc4139dd6935d1fd"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "c64817f08b90ad545b11a30c6adb5d1bc5d1f9de92a63bc0d547de6d01c3edaf",
          "withoutMetadata": "f3014618f9ee5e98818d61e87ba32c240e2f4ef2fb7cc89990362fb8a16d0a90",
          "linkedWithoutMetadata": "f3014618f9ee5e98818d61e87ba32c240e2f4ef2fb7cc89990362fb8a16d0a90"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "registerIdentity(address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "ERC725YCore": {
        "src": "@erc725/smart-contracts/contracts/ERC725YCore.sol:22",
        "inherit": [
          "IERC725Y",
          "ERC165",
          "IERC165",
          "OwnableUnset"
        ],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "getData(bytes32[])",
          "setData(bytes32,bytes)",
          "setData(bytes32[],bytes[])",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableUnset",
              "src": "@erc725/smart-contracts/contracts/custom/OwnableUnset.sol:12"
            },
            {
              "label": "store",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bytes_storage)",
              "contract": "ERC725YCore",
              "src": "@erc725/smart-contracts/contracts/ERC725YCore.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes_storage)": {
              "label": "mapping(bytes32 => bytes)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "OwnableUnset": {
        "src": "@erc725/smart-contracts/contracts/custom/OwnableUnset.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableUnset",
              "src": "@erc725/smart-contracts/contracts/custom/OwnableUnset.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC725Y": {
        "src": "@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "getData(bytes32[])",
          "setData(bytes32,bytes)",
          "setData(bytes32[],bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC1271": {
        "src": "@openzeppelin/contracts/interfaces/IERC1271.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f4ccb1891869c5f86f7a641aff5d868bb0249628d61772b38586ac7a74a60738",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/Logic/SignMessage.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/Logic/SignMessage.sol:4",
        "version": {
          "withMetadata": "3434ac5a0a669417ff2fc725a981d3ac89bca3f48a22749a64d63d9239b49a75",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SignMessageLogic": {
        "src": "contracts/Logic/SignMessage.sol:22",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignMessageLogic",
            "src": "contracts/Logic/SignMessage.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "BaseController": {
        "src": "contracts/controller/BaseController.sol:4",
        "inherit": [],
        "libraries": [
          "StorageSlot"
        ],
        "methods": [
          "execute(address,string,(address,address,bytes4,bytes))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseController",
            "src": "contracts/controller/BaseController.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_allowedController",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseController",
              "src": "contracts/controller/BaseController.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RootController": {
        "src": "contracts/controller/RootController.sol:7",
        "version": {
          "withMetadata": "a9a2cfe4af69885b596c0270782331d6fba01cc314e1c697a67e64ad50a6a74c",
          "withoutMetadata": "6d7ff6dbb069696cc35a4ae24323367846cf3ec5c4d29263ad1c1fc5a42ae646",
          "linkedWithoutMetadata": "6d7ff6dbb069696cc35a4ae24323367846cf3ec5c4d29263ad1c1fc5a42ae646"
        },
        "inherit": [
          "BaseController"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "execute(address,string,(address,address,bytes4,bytes))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RootController",
            "src": "contracts/controller/RootController.sol:11"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/controller/RootController.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_allowedController",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseController",
              "src": "contracts/controller/BaseController.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IIdentity": {
        "src": "contracts/registry/Identity.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getData(bytes32)",
          "setData(bytes32,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Identity": {
        "src": "contracts/registry/Identity.sol:20",
        "version": {
          "withMetadata": "6640d1e0955e72661e8bc1e406f39bb202ad594d2f6a290fab010e27f6dabf53",
          "withoutMetadata": "d52fdde894040767a4d5243841886c21d441a02794a0ff4ec225b92786f3c816",
          "linkedWithoutMetadata": "d52fdde894040767a4d5243841886c21d441a02794a0ff4ec225b92786f3c816"
        },
        "inherit": [
          "EIP712",
          "IdentitySigner",
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "getData(bytes32)",
          "setData(bytes32,string)",
          "getDomainSeparator()",
          "getMessageHash(bytes)",
          "checkSignatures(bytes32,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Identity",
            "src": "contracts/registry/Identity.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:24"
            },
            {
              "label": "_kvStore",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_string_storage)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:27"
            },
            {
              "label": "_strToKey",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:28"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:29"
            },
            {
              "label": "ownedAssets",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "Identity",
              "src": "contracts/registry/Identity.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_string_storage)": {
              "label": "mapping(bytes32 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentitySigner": {
        "src": "contracts/registry/Identity.sol:16",
        "inherit": [
          "SignMessageLogic",
          "ISignatureValidatorConstants",
          "IIdentity"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:28"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:30"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "SignMessageLogic",
              "src": "contracts/Logic/SignMessage.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IdentityRegistry": {
        "src": "contracts/registry/IdentityRegistry.sol:8",
        "version": {
          "withMetadata": "a037c80395904f1add334e38eb91a8d74438ad18789051d652b1bde380767101",
          "withoutMetadata": "2ede83fa1bdb7346a9a3c397080c7d802ee5ec330cdcad2f3ab973eaf725c306",
          "linkedWithoutMetadata": "2ede83fa1bdb7346a9a3c397080c7d802ee5ec330cdcad2f3ab973eaf725c306"
        },
        "inherit": [
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "()",
          "identityOwner(address)",
          "identityProvider(address)",
          "isValidIdentity(address,address)",
          "isValidSignature(bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owners",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "IdentityRegistry",
              "src": "contracts/registry/IdentityRegistry.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f4ccb1891869c5f86f7a641aff5d868bb0249628d61772b38586ac7a74a60738",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "BaseController": {
        "src": "contracts/controller/BaseController.sol:4",
        "inherit": [],
        "libraries": [
          "StorageSlot"
        ],
        "methods": [
          "execute(address,string,(address,address,bytes4,bytes))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseController",
            "src": "contracts/controller/BaseController.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_allowedController",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseController",
              "src": "contracts/controller/BaseController.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RootController": {
        "src": "contracts/controller/RootController.sol:7",
        "version": {
          "withMetadata": "55ccbab3829e828c07cc2480a79ef53e7bfb051559f6d651604c27434745a421",
          "withoutMetadata": "6d7ff6dbb069696cc35a4ae24323367846cf3ec5c4d29263ad1c1fc5a42ae646",
          "linkedWithoutMetadata": "6d7ff6dbb069696cc35a4ae24323367846cf3ec5c4d29263ad1c1fc5a42ae646"
        },
        "inherit": [
          "BaseController"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "execute(address,string,(address,address,bytes4,bytes))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RootController",
            "src": "contracts/controller/RootController.sol:11"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/controller/RootController.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_allowedController",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseController",
              "src": "contracts/controller/BaseController.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "AccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:14",
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)5101_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4800_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4800_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlEnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol:11",
        "inherit": [
          "IAccessControlUpgradeable"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "7193843b225d1f05ca8950b65832c9a5ef37e47cb1a16afb7c012778e3ab33f8",
          "withoutMetadata": "e4c3848be5451b78115942d5ea623064a4538becb8273b2ae30ccf0994ac740c",
          "linkedWithoutMetadata": "e4c3848be5451b78115942d5ea623064a4538becb8273b2ae30ccf0994ac740c"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20WrapperUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20WrapperUpgradeable.sol:21",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "decimals()",
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "101",
              "type": "t_contract(IERC20Upgradeable)1947",
              "contract": "ERC20WrapperUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20WrapperUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20WrapperUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20WrapperUpgradeable.sol:76"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20Upgradeable)1947": {
              "label": "contract IERC20Upgradeable",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "189457156719496b8237677bfd975a81373875ebf50545d19c1f5896b27f9bea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:20",
        "version": {
          "withMetadata": "3f50bbc29f443e90a8d7e4cda85a6a2814b43c872fdd11694557390accf569ce",
          "withoutMetadata": "a47b95c4627ea6f8bddc061ff2f485afa1a14c7612d96008f9c0c31165f73521",
          "linkedWithoutMetadata": "a47b95c4627ea6f8bddc061ff2f485afa1a14c7612d96008f9c0c31165f73521"
        },
        "inherit": [
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "AddressUpgradeable",
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC721ReceiverUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:11",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC721BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:14",
        "inherit": [
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC721BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721EnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:15",
        "inherit": [
          "IERC721EnumerableUpgradeable",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC721URIStorageUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:12",
        "inherit": [
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC721EnumerableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC721Upgradeable",
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "28082c83ac969673dcdd468f2e443e9167228b22d8081056c39265048823659c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "60200fb0057ceb32750ca62f72b02e11b6bd23b5069a4600a5615996c27102c2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "8c9f783a26a5eb1fd7eb54b8122bbf8258c591dcf41ea65a8d73318d2717739a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:9",
        "version": {
          "withMetadata": "612c5fb4a6f1e047d9ce3325277bd7571ee017c8fb228d7b700ae807647a1b33",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:38",
        "version": {
          "withMetadata": "781b471ead77f94b1bc456ce941761e998fbab357e0d8e5d2b86f9eba078d322",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)5408_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)14457_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)14457_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)14457_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)14156_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)5408_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)14156_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "7bd8505863c26b120fff0ab88d71a5ac175ec6657a5db3d74d10616fe6a73757",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC1155Holder": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "41eebc01d001af4d148859e84e7d5615959223eae89814640f9b70391bd7397a",
          "withoutMetadata": "72131d702066f7b866f215433ac4946836ef0f9ba8ef8485c139fdfe891bfbde",
          "linkedWithoutMetadata": "72131d702066f7b866f215433ac4946836ef0f9ba8ef8485c139fdfe891bfbde"
        },
        "inherit": [
          "ERC1155Receiver",
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "7457d37c72fcc028d397160a34c54cb7d26db371a32a25879409214798694a30",
          "withoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964",
          "linkedWithoutMetadata": "7cec7dc6fc3345f5e309880c7ab1c60fa93d626639a6b01b48611e26cc81e964"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:42",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Snapshots)7250_storage)",
              "contract": "ERC20Snapshot",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "6",
              "type": "t_struct(Snapshots)7250_storage",
              "contract": "ERC20Snapshot",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:57"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "8",
              "type": "t_struct(Counter)10236_storage",
              "contract": "ERC20Snapshot",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:60"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)7250_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)10236_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)7250_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Votes": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:27",
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context",
          "IVotes"
        ],
        "libraries": [
          "SafeCast",
          "Math",
          "ECDSA"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)10236_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:36"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)7572_storage)dyn_storage)",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:37"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_struct(Checkpoint)7572_storage)dyn_storage",
              "contract": "ERC20Votes",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)7572_storage)dyn_storage": {
              "label": "struct ERC20Votes.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)7572_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20Votes.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)10236_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)7572_storage": {
              "label": "struct ERC20Votes.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)10236_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:22",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)10236_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)10236_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)10236_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "93e93edecb1fb2781620003dfed701e1eb079a44c55e70db46e15825f1c0a137",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "282d177d10ccb8725444ac23d65f45a9db64a3d3fa9f2cf22a275b6f535ad51a",
          "withoutMetadata": "9779b93e4e64080de5456bc89016cd0fd12e573bd69f5ca20bdc4c4a6ac4b43a",
          "linkedWithoutMetadata": "9779b93e4e64080de5456bc89016cd0fd12e573bd69f5ca20bdc4c4a6ac4b43a"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC721Holder": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol:14",
        "version": {
          "withMetadata": "dbe099587154e0e197564cde5011b3e8561565c742c5cdecafc6e722e42f17ae",
          "withoutMetadata": "fb24998a7ee2638c5d58b9b51f94b80835edbf42ca097a530514c8151a9094a3",
          "linkedWithoutMetadata": "fb24998a7ee2638c5d58b9b51f94b80835edbf42ca097a530514c8151a9094a3"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC777Recipient": {
        "src": "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensReceived(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fd2ca0ed071ee0f437af224447c10fdf8c0d882f9f1ad21d43d1c1adc5188690",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:11",
        "version": {
          "withMetadata": "4fce24a9326ef830c57f304c59e76bf0f95a83e23fb92c0e8962fdafda89806e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Base64": {
        "src": "@openzeppelin/contracts/utils/Base64.sol:11",
        "version": {
          "withMetadata": "0863189e6f5bdf23b61ec304c6dc30646a0abe0113bdc35be7e5c594a80a44f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:14",
        "version": {
          "withMetadata": "ff773d8079d29b09e4645042b0f11122c50f51e2cc68865c05c2cd1cdf7b8674",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "f4ccb1891869c5f86f7a641aff5d868bb0249628d61772b38586ac7a74a60738",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "2022b5c2f9bd5346c5fda967c709a0a54914569a0d088c0695c3823219653806",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "4266d2e359443936ee4be6a3d3a42bfdb2ba2cb81bb78e412efabe482135ca8c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:27",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_THIS",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:37"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ConditionalEscrow": {
        "src": "@openzeppelin/contracts/utils/escrow/ConditionalEscrow.sol:13",
        "inherit": [
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Escrow": {
        "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:22",
        "version": {
          "withMetadata": "e29cf2374cd2ee06518dcc725e4a450742e4314edd5013568e048804d6e92173",
          "withoutMetadata": "73141c25244ef9757e39f45a7e1cee23eeefba3035f8950ef36b013cf70ff650",
          "linkedWithoutMetadata": "73141c25244ef9757e39f45a7e1cee23eeefba3035f8950ef36b013cf70ff650"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RefundEscrow": {
        "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:18",
        "version": {
          "withMetadata": "0a12a62e7e4eef2995f93a61fb4a92e7ac745b5a4a21b6b92d5253083f74db7b",
          "withoutMetadata": "8bfe4de9943a5fc1b20a55968bef22963fde77ca0c920a121030aef9a7541602",
          "linkedWithoutMetadata": "8bfe4de9943a5fc1b20a55968bef22963fde77ca0c920a121030aef9a7541602"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_beneficiary",
            "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "@openzeppelin/contracts/utils/escrow/Escrow.sol:28"
            },
            {
              "label": "_state",
              "offset": 0,
              "slot": "2",
              "type": "t_enum(State)11276",
              "contract": "RefundEscrow",
              "src": "@openzeppelin/contracts/utils/escrow/RefundEscrow.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_enum(State)11276": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9c174631a66587ae66d57c64f6a90b308dc87ed3b0cc11a0e635541ef22360fb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:21",
        "version": {
          "withMetadata": "6717a38886851b4fb47bc096ee4aa7ec8790d27d69d31a14f8101f6588c30d32",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "b7befdee1c17fe138d836806ca85f49d99e6f38d505bd5785e78205a84e61c5e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:38",
        "version": {
          "withMetadata": "ad4452c2f72810934fd94f41ce0efb0d6942d3cc41af243b8c07ee7ad5ff8555",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AKXSetup": {
        "src": "contracts/AKXSetup.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "labzToken",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:6"
            },
            {
              "label": "userDataService",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:7"
            },
            {
              "label": "dexService",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:8"
            },
            {
              "label": "daoGovernor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:9"
            },
            {
              "label": "akxToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:10"
            },
            {
              "label": "refContract",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:11"
            },
            {
              "label": "psl",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:12"
            },
            {
              "label": "rootController",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXSystem": {
        "src": "contracts/AKXSystem.sol:11",
        "version": {
          "withMetadata": "fea0b65f61f3bf46b47303b190598ce7cdd6e0a5f1d977b1184d50cad230ea24",
          "withoutMetadata": "9e8d6c2091c4e0e4c8ce5360ffd5b17e57aa2b4f30917c68cf26b0c1101a247c",
          "linkedWithoutMetadata": "9e8d6c2091c4e0e4c8ce5360ffd5b17e57aa2b4f30917c68cf26b0c1101a247c"
        },
        "inherit": [
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "AKXRoles",
          "AKXSetup",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(string,string,address)",
          "updateVersion(string)",
          "version()",
          "holdersCount()",
          "isPrivateSale()",
          "sysStartDate()",
          "startPrivateSale()",
          "stopPrivateSale()",
          "systemSetup(address,address,address,address,address,address,address,address)",
          "Labz()",
          "Uds()",
          "Akx()",
          "Referrals()",
          "PrivateSale()",
          "RootController()",
          "Governor()",
          "DEX()",
          "addFounder(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "labzToken",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:6"
            },
            {
              "label": "userDataService",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:7"
            },
            {
              "label": "dexService",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:8"
            },
            {
              "label": "daoGovernor",
              "offset": 0,
              "slot": "104",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:9"
            },
            {
              "label": "akxToken",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:10"
            },
            {
              "label": "refContract",
              "offset": 0,
              "slot": "106",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:11"
            },
            {
              "label": "psl",
              "offset": 0,
              "slot": "107",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:12"
            },
            {
              "label": "rootController",
              "offset": 0,
              "slot": "108",
              "type": "t_address",
              "contract": "AKXSetup",
              "src": "contracts/AKXSetup.sol:13"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "109",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "159",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "210",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "260",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "309",
              "type": "t_string_storage",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:13"
            },
            {
              "label": "_setup",
              "offset": 0,
              "slot": "310",
              "type": "t_bool",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:14"
            },
            {
              "label": "safe",
              "offset": 1,
              "slot": "310",
              "type": "t_address",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:16"
            },
            {
              "label": "checkFounder",
              "offset": 0,
              "slot": "311",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:20"
            },
            {
              "label": "founderAllocations",
              "offset": 0,
              "slot": "312",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AKXSystem",
              "src": "contracts/AKXSystem.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)5101_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4800_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4800_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Lock": {
        "src": "contracts/Lock.sol:7",
        "version": {
          "withMetadata": "665ec2d333910a5297b60f523e7877b80648d31ef03249b41615aadef301f984",
          "withoutMetadata": "90bf110baf89079f1063b11d68d3f07a5c4335e4a18863ba8ace8e64c9b0f672",
          "linkedWithoutMetadata": "90bf110baf89079f1063b11d68d3f07a5c4335e4a18863ba8ace8e64c9b0f672"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Lock",
            "src": "contracts/Lock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlockTime",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lock",
              "src": "contracts/Lock.sol:8"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "Lock",
              "src": "contracts/Lock.sol:9"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "FeeCollectionLogic": {
        "src": "contracts/Logic/FeeCollectionLogic.sol:8",
        "version": {
          "withMetadata": "c3759123241588559bdd174c9af489d9971096e3f9dcf3a7d6fb94cdc09c8a52",
          "withoutMetadata": "544c89938e5dac79ecc6ff0fb7c26d89a95ae3837a50513931a4a9a2b7251864",
          "linkedWithoutMetadata": "544c89938e5dac79ecc6ff0fb7c26d89a95ae3837a50513931a4a9a2b7251864"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address payable,address payable)",
          "GetFee(bytes32,uint256)",
          "Collect(uint8,uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeCollectionLogic",
            "src": "contracts/Logic/FeeCollectionLogic.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "feeEscrow",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "FeeCollectionLogic",
              "src": "contracts/Logic/FeeCollectionLogic.sol:10"
            },
            {
              "label": "feeToken",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ERC20)7105",
              "contract": "FeeCollectionLogic",
              "src": "contracts/Logic/FeeCollectionLogic.sol:11"
            },
            {
              "label": "_feesByAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(FeeDetails)15407_storage))",
              "contract": "FeeCollectionLogic",
              "src": "contracts/Logic/FeeCollectionLogic.sol:34"
            },
            {
              "label": "_indexes",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FeeCollectionLogic",
              "src": "contracts/Logic/FeeCollectionLogic.sol:35"
            },
            {
              "label": "_totalFeePaid",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "FeeCollectionLogic",
              "src": "contracts/Logic/FeeCollectionLogic.sol:36"
            },
            {
              "label": "_feeTypes",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_uint128)",
              "contract": "FeeCollectionLogic",
              "src": "contracts/Logic/FeeCollectionLogic.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC20)7105": {
              "label": "contract ERC20",
              "numberOfBytes": "20"
            },
            "t_enum(FeeTypes)15393": {
              "label": "enum FeeCollectionLogic.FeeTypes",
              "members": [
                "DEFAULT",
                "TX_FEE",
                "TX_PREMIUM",
                "DAO",
                "DEX"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(FeeDetails)15407_storage))": {
              "label": "mapping(address => mapping(uint256 => struct FeeCollectionLogic.FeeDetails))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint128)": {
              "label": "mapping(bytes32 => uint128)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(FeeDetails)15407_storage)": {
              "label": "mapping(uint256 => struct FeeCollectionLogic.FeeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(FeeDetails)15407_storage": {
              "label": "struct FeeCollectionLogic.FeeDetails",
              "members": [
                {
                  "label": "feeType",
                  "type": "t_enum(FeeTypes)15393",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "txIO",
                  "type": "t_struct(TxAmounts)15398_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(TxAmounts)15398_storage": {
              "label": "struct FeeCollectionLogic.TxAmounts",
              "members": [
                {
                  "label": "amountIn",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amountOut",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LockLogic": {
        "src": "contracts/Logic/LockLogic.sol:10",
        "version": {
          "withMetadata": "f99ea974018d85a7e8374ce31e12bb9d5d32c3f32fec1863c975e3f4ff350716",
          "withoutMetadata": "15fd173c85f0456c5c6382436c1deeff3c131609eda3a57f81bd6983b7dc56a0",
          "linkedWithoutMetadata": "15fd173c85f0456c5c6382436c1deeff3c131609eda3a57f81bd6983b7dc56a0"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "availableBalance(address)",
          "isHavingAvailableBalance(address)",
          "lockTokens(address,uint256)",
          "unlockTokensFor(address,uint256)",
          "withdrawUnlockedTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockLogic",
            "src": "contracts/Logic/LockLogic.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ERC20)7105",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:15"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:21"
            },
            {
              "label": "_lastBuyTime",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:22"
            },
            {
              "label": "_vipHolders",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:23"
            },
            {
              "label": "_isUnlocked",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:24"
            },
            {
              "label": "lockedBalance",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:25"
            },
            {
              "label": "unlockedBalance",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:26"
            },
            {
              "label": "canSell",
              "offset": 0,
              "slot": "9",
              "type": "t_bool",
              "contract": "LockLogic",
              "src": "contracts/Logic/LockLogic.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC20)7105": {
              "label": "contract ERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "PrivateBuyingLogic": {
        "src": "contracts/Logic/PrivateBuyingLogic.sol:17",
        "inherit": [
          "ReentrancyGuard",
          "LibMath",
          "Pricing"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "PrivateSaleLogic": {
        "src": "contracts/Logic/PrivateSaleLogic.sol:10",
        "version": {
          "withMetadata": "24676896385d9dbe97e28c6263cd8959b97b6e31273e67fc8e4dda6a1e94ce3e",
          "withoutMetadata": "102365b5d22c1c532cc98339b5cbba56c22a078ee66b22769c939e0e3a7316e5",
          "linkedWithoutMetadata": "102365b5d22c1c532cc98339b5cbba56c22a078ee66b22769c939e0e3a7316e5"
        },
        "inherit": [
          "Ownable",
          "Context",
          "PrivateBuyingLogic",
          "ReentrancyGuard",
          "LibMath",
          "Pricing"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "buy()",
          "closeSale()",
          "forceClose()",
          "restart()",
          "setPublicLaunchContract(address)",
          "emergencyBreakAndEnableRefunds()",
          "emergencyBreak()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleLogic",
            "src": "contracts/Logic/PrivateSaleLogic.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_saleToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:12"
            },
            {
              "label": "_labz",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(LabzERC20)25039",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:13"
            },
            {
              "label": "startTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:17"
            },
            {
              "label": "maxTokensForPrivateSale",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:18"
            },
            {
              "label": "maxTokensPerAccount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:19"
            },
            {
              "label": "maxSaleDuration",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:20"
            },
            {
              "label": "totalMinted",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:21"
            },
            {
              "label": "privateSaleIsStarted",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:22"
            },
            {
              "label": "escrowBeneficiary",
              "offset": 1,
              "slot": "10",
              "type": "t_address_payable",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:23"
            },
            {
              "label": "breakIsOn",
              "offset": 21,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:24"
            },
            {
              "label": "isClosed",
              "offset": 22,
              "slot": "10",
              "type": "t_bool",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:25"
            },
            {
              "label": "_saleRefundEscrow",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(RefundEscrow)11442",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:27"
            },
            {
              "label": "lockLogic",
              "offset": 0,
              "slot": "12",
              "type": "t_address",
              "contract": "PrivateSaleLogic",
              "src": "contracts/Logic/PrivateSaleLogic.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(LabzERC20)25039": {
              "label": "contract LabzERC20",
              "numberOfBytes": "20"
            },
            "t_contract(RefundEscrow)11442": {
              "label": "contract RefundEscrow",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ReferralLogic": {
        "src": "contracts/Logic/ReferralLogic.sol:8",
        "version": {
          "withMetadata": "8120a16f464a583eb180aa325d21d1795a71f9f66f8de51e3333629181d7971f",
          "withoutMetadata": "cfcc7ef4e97e951027512c855ebf57dbb32347991b728f1c984d0d78e40db895",
          "linkedWithoutMetadata": "cfcc7ef4e97e951027512c855ebf57dbb32347991b728f1c984d0d78e40db895"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ILogic"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setLogicData(bytes)",
          "execute(address,bytes)",
          "coreLogic(bytes)",
          "getResults(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReferralLogic",
            "src": "contracts/Logic/ReferralLogic.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mantissa",
            "src": "contracts/Logic/ReferralLogic.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_index",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:17"
            },
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:18"
            },
            {
              "label": "_reqById",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(DataRequest)16401_storage)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:20"
            },
            {
              "label": "_currentReqIdByAddress",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:21"
            },
            {
              "label": "_pending",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:22"
            },
            {
              "label": "_failed",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:23"
            },
            {
              "label": "_done",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:24"
            },
            {
              "label": "_results",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:25"
            },
            {
              "label": "_percent",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:26"
            },
            {
              "label": "_multiplier",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ReferralLogic",
              "src": "contracts/Logic/ReferralLogic.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DataRequest)16401_storage)": {
              "label": "mapping(uint256 => struct ReferralLogic.DataRequest)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(DataRequest)16401_storage": {
              "label": "struct ReferralLogic.DataRequest",
              "members": [
                {
                  "label": "_sender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "code",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_referree",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXRoles": {
        "src": "contracts/Roles.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "BaseController": {
        "src": "contracts/controller/BaseController.sol:4",
        "inherit": [],
        "libraries": [
          "StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseController",
            "src": "contracts/controller/BaseController.sol:40"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "PrivateSaleController": {
        "src": "contracts/controller/PrivateSaleController.sol:6",
        "version": {
          "withMetadata": "d0ae88289eb6bf4fbcdc10a40a8d7b277c9597f1ff843cc201ec038703165894",
          "withoutMetadata": "de323305c1e3a3e67914363c40d5cd9f0d30086841e8048c4d3a1a36100e6ef0",
          "linkedWithoutMetadata": "de323305c1e3a3e67914363c40d5cd9f0d30086841e8048c4d3a1a36100e6ef0"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address)",
          "__PrivateSaleController_init(address)",
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PrivateSaleController",
            "src": "contracts/controller/PrivateSaleController.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "logicImplementation",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "PrivateSaleController",
              "src": "contracts/controller/PrivateSaleController.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RootController": {
        "src": "contracts/controller/RootController.sol:7",
        "version": {
          "withMetadata": "59e9e43fb4a097760cdf97c075f1872ca69692679d28630bab37e3f107292ffb",
          "withoutMetadata": "af0f38f70fb1cfdd007bcb7a75a5368eb41a02a1c373e79fe5928f043bcd8b7f",
          "linkedWithoutMetadata": "af0f38f70fb1cfdd007bcb7a75a5368eb41a02a1c373e79fe5928f043bcd8b7f"
        },
        "inherit": [
          "BaseController"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "execute(address,string,(address,address,bytes4,bytes))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RootController",
            "src": "contracts/controller/RootController.sol:11"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/controller/RootController.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAKX": {
        "src": "contracts/interfaces/IAKX.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IAuth": {
        "src": "contracts/interfaces/IAuth.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "authenticate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IEIP721U": {
        "src": "contracts/interfaces/IEIP721U.sol:5",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "userCreatedDate(uint256)",
          "available(uint256)",
          "reclaim(uint256,address)",
          "reputation(uint256)",
          "nativeValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ILogic": {
        "src": "contracts/interfaces/ILogic.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setLogicData(bytes)",
          "execute(address,bytes)",
          "coreLogic(bytes)",
          "getResults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IModule": {
        "src": "contracts/interfaces/IModule.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "moduleName(address)",
          "moduleVersion()",
          "moduleAuthor()",
          "moduleHash()",
          "moduleContract()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IModuleRegistry": {
        "src": "contracts/interfaces/IModuleRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isRegisteredModuleAddress(address)",
          "isRegisteredModuleName(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IUserRecord": {
        "src": "contracts/interfaces/IUserRecord.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOwner(address)",
          "setResolver(address)",
          "addRecord()",
          "count()",
          "getRecord(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IUserRegistry": {
        "src": "contracts/interfaces/IUserRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerUser()",
          "deRegisterUser()",
          "suspendUser(address,bytes32)",
          "recoverUser()",
          "verifyUser()",
          "resolve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Rewards": {
        "src": "contracts/interfaces/Rewards.sol:7",
        "inherit": [
          "InitModifiers"
        ],
        "libraries": [],
        "methods": [
          "canClaim()",
          "canEarn()",
          "claim()",
          "earned()",
          "claimed()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Rewards",
            "src": "contracts/interfaces/Rewards.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            },
            {
              "label": "beneficiaries",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(RewardBeneficiary)17280_storage)",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:36"
            },
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(RewardTypes)17251": {
              "label": "enum Rewards.RewardTypes",
              "members": [
                "REFERRAL",
                "STAKING",
                "OTHER"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(RewardBeneficiary)17280_storage)": {
              "label": "mapping(address => struct Rewards.RewardBeneficiary)",
              "numberOfBytes": "32"
            },
            "t_struct(RewardBeneficiary)17280_storage": {
              "label": "struct Rewards.RewardBeneficiary",
              "members": [
                {
                  "label": "consolidatedEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "beneficiary",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_info",
                  "type": "t_struct(RewardInfo)17272_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(RewardInfo)17272_storage": {
              "label": "struct Rewards.RewardInfo",
              "members": [
                {
                  "label": "_type",
                  "type": "t_enum(RewardTypes)17251",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "consolidatedPerUnit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "earned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "claimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "BaseModule": {
        "src": "contracts/modules/BaseModule.sol:8",
        "inherit": [
          "Initializable",
          "IModule"
        ],
        "libraries": [],
        "methods": [
          "moduleType()",
          "moduleName()",
          "moduleVersion()",
          "moduleAuthor()",
          "moduleHash()",
          "moduleContract()",
          "compareVersions(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_moduleType",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "BaseModule",
              "src": "contracts/modules/BaseModule.sol:10"
            },
            {
              "label": "_moduleName",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "BaseModule",
              "src": "contracts/modules/BaseModule.sol:11"
            },
            {
              "label": "_moduleVersion",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "BaseModule",
              "src": "contracts/modules/BaseModule.sol:12"
            },
            {
              "label": "_moduleContract",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseModule",
              "src": "contracts/modules/BaseModule.sol:13"
            },
            {
              "label": "_moduleAuthor",
              "offset": 0,
              "slot": "5",
              "type": "t_bytes32",
              "contract": "BaseModule",
              "src": "contracts/modules/BaseModule.sol:14"
            },
            {
              "label": "_loaded",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "BaseModule",
              "src": "contracts/modules/BaseModule.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "DidRegistry": {
        "src": "contracts/modules/DidRegistry.sol:5",
        "version": {
          "withMetadata": "532b415b137f0c51773c5739fcbeee97afa29e233a06113a087cb60e1afbbad8",
          "withoutMetadata": "95fe509e3a4e57c0d83592c74e1a1684a87ae5cdfa630f4c94fcfb2a8d6e80cf",
          "linkedWithoutMetadata": "95fe509e3a4e57c0d83592c74e1a1684a87ae5cdfa630f4c94fcfb2a8d6e80cf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "identityOwner(address)",
          "validDelegate(address,bytes32,address)",
          "changeOwner(address,address)",
          "changeOwnerSigned(address,uint8,bytes32,bytes32,address)",
          "addDelegate(address,bytes32,address,uint256)",
          "addDelegateSigned(address,uint8,bytes32,bytes32,bytes32,address,uint256)",
          "revokeDelegate(address,bytes32,address)",
          "revokeDelegateSigned(address,uint8,bytes32,bytes32,bytes32,address)",
          "setAttribute(address,bytes32,bytes,uint256)",
          "setAttributeSigned(address,uint8,bytes32,bytes32,bytes32,bytes,uint256)",
          "revokeAttribute(address,bytes32,bytes)",
          "revokeAttributeSigned(address,uint8,bytes32,bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "DidRegistry",
              "src": "contracts/modules/DidRegistry.sol:7"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_uint256)))",
              "contract": "DidRegistry",
              "src": "contracts/modules/DidRegistry.sol:8"
            },
            {
              "label": "changed",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DidRegistry",
              "src": "contracts/modules/DidRegistry.sol:9"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DidRegistry",
              "src": "contracts/modules/DidRegistry.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_uint256)))": {
              "label": "mapping(address => mapping(bytes32 => mapping(address => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(bytes32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ModuleRegistry": {
        "src": "contracts/modules/ModuleRegistry.sol:8",
        "inherit": [
          "BytesUtils",
          "ModuleStorage",
          "IModuleRegistry",
          "IModule"
        ],
        "libraries": [],
        "methods": [
          "moduleName(address)",
          "isRegisteredModuleAddress(address)",
          "isRegisteredModuleName(bytes32)",
          "getModule(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_moduleByName",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:9"
            },
            {
              "label": "_moduleByAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:10"
            },
            {
              "label": "_moduleResolver",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:11"
            },
            {
              "label": "_rModuleResolver",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:12"
            },
            {
              "label": "_registeredAddress",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:13"
            },
            {
              "label": "_registeredName",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ModuleStorage": {
        "src": "contracts/modules/ModuleStorage.sol:9",
        "inherit": [
          "IModuleRegistry",
          "IModule"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ModulesManager": {
        "src": "contracts/modules/ModulesManager.sol:8",
        "inherit": [
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context",
          "AKXRoles",
          "ModuleRegistry",
          "BytesUtils",
          "ModuleStorage",
          "IModuleRegistry",
          "IModule"
        ],
        "libraries": [],
        "methods": [
          "installModule(address,string)",
          "uninstallModule(address,string)",
          "loadModule(bytes32)",
          "moduleVersion(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ModulesManager",
            "src": "contracts/modules/ModulesManager.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_moduleByName",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:9"
            },
            {
              "label": "_moduleByAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:10"
            },
            {
              "label": "_moduleResolver",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:11"
            },
            {
              "label": "_rModuleResolver",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:12"
            },
            {
              "label": "_registeredAddress",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:13"
            },
            {
              "label": "_registeredName",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "ModuleRegistry",
              "src": "contracts/modules/ModuleRegistry.sol:14"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)14457_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:16"
            },
            {
              "label": "_enabledModules",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ModulesManager",
              "src": "contracts/modules/ModulesManager.sol:10"
            },
            {
              "label": "_installedModules",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ModulesManager",
              "src": "contracts/modules/ModulesManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)14457_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)14457_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)14156_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)5408_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)14156_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "UDS": {
        "src": "contracts/modules/uds/UDS.sol:8",
        "version": {
          "withMetadata": "609110ce8c15fd08b3f2d828ccf7b7e78a07473157bbdd4e09dc73af39a0436b",
          "withoutMetadata": "5fc77e28e616a6a3c91e8b94fc529c95c6b3ea2669dd5cdd8fd6a668ad2329c9",
          "linkedWithoutMetadata": "5fc77e28e616a6a3c91e8b94fc529c95c6b3ea2669dd5cdd8fd6a668ad2329c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setResolver(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UDS",
            "src": "contracts/modules/uds/UDS.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "UDS",
              "src": "contracts/modules/uds/UDS.sol:10"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "UDS",
              "src": "contracts/modules/uds/UDS.sol:11"
            },
            {
              "label": "_resolvers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "UDS",
              "src": "contracts/modules/uds/UDS.sol:12"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "UDS",
              "src": "contracts/modules/uds/UDS.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "UserDataServiceResolver": {
        "src": "contracts/modules/uds/UserDataServiceResolver.sol:12",
        "version": {
          "withMetadata": "bf8187cd2a3fdee93a3ad94611c9997817ceff6777b68772bc4f9150b44d474e",
          "withoutMetadata": "bf8187cd2a3fdee93a3ad94611c9997817ceff6777b68772bc4f9150b44d474e",
          "linkedWithoutMetadata": "bf8187cd2a3fdee93a3ad94611c9997817ceff6777b68772bc4f9150b44d474e"
        },
        "inherit": [
          "AKXRoles",
          "ReentrancyGuard",
          "BaseUserRegistry",
          "Ownable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "AccessControlEnumerable",
          "AccessControl",
          "AllResolvers",
          "MetaDataResolver",
          "ProfileResolver",
          "NameResolver",
          "IdentResolver",
          "BaseResolver",
          "BytesUtils",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "(bytes32,address)",
          "setAuthorisation(bytes32,address,bool)",
          "createNewAccount(address,string)",
          "getAccountInfo(address)",
          "alreadyRegistered(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserDataServiceResolver",
            "src": "contracts/modules/uds/UserDataServiceResolver.sol:45"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/modules/uds/UserDataServiceResolver.sol:66"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_idents",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "IdentResolver",
              "src": "contracts/resolvers/IdentResolver.sol:10"
            },
            {
              "label": "_idExists",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "IdentResolver",
              "src": "contracts/resolvers/IdentResolver.sol:11"
            },
            {
              "label": "_names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:10"
            },
            {
              "label": "addressToNames",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:11"
            },
            {
              "label": "nameToAddress",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:12"
            },
            {
              "label": "_profiles",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ProfileResolver",
              "src": "contracts/resolvers/ProfileResolver.sol:10"
            },
            {
              "label": "_profileExists",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProfileResolver",
              "src": "contracts/resolvers/ProfileResolver.sol:11"
            },
            {
              "label": "_metadataIds",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:13"
            },
            {
              "label": "_idExists",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:14"
            },
            {
              "label": "_keysAvailable",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:15"
            },
            {
              "label": "_keyNames",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:16"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:17"
            },
            {
              "label": "_keyValMetas",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:18"
            },
            {
              "label": "_metaOwners",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:19"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)14457_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:16"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "16",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "17",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "22",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "controllers",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:11"
            },
            {
              "label": "registrationQueue",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:13"
            },
            {
              "label": "uds",
              "offset": 0,
              "slot": "25",
              "type": "t_contract(UDS)18973",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:16"
            },
            {
              "label": "index",
              "offset": 0,
              "slot": "26",
              "type": "t_uint256",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:17"
            },
            {
              "label": "rootNodeAddress",
              "offset": 0,
              "slot": "27",
              "type": "t_bytes32",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:18"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "28",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "authorisations",
              "offset": 0,
              "slot": "29",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))",
              "contract": "UserDataServiceResolver",
              "src": "contracts/modules/uds/UserDataServiceResolver.sol:20"
            },
            {
              "label": "alreadyReg",
              "offset": 0,
              "slot": "30",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "UserDataServiceResolver",
              "src": "contracts/modules/uds/UserDataServiceResolver.sol:28"
            },
            {
              "label": "tokenId",
              "offset": 0,
              "slot": "31",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "UserDataServiceResolver",
              "src": "contracts/modules/uds/UserDataServiceResolver.sol:29"
            },
            {
              "label": "_info",
              "offset": 0,
              "slot": "32",
              "type": "t_mapping(t_address,t_struct(AccountInfo)19070_storage)",
              "contract": "UserDataServiceResolver",
              "src": "contracts/modules/uds/UserDataServiceResolver.sol:31"
            },
            {
              "label": "_tokenIndex",
              "offset": 0,
              "slot": "33",
              "type": "t_struct(Counter)10236_storage",
              "contract": "UserDataServiceResolver",
              "src": "contracts/modules/uds/UserDataServiceResolver.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(UDS)18973": {
              "label": "contract UDS",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(AccountInfo)19070_storage)": {
              "label": "mapping(address => struct UserDataServiceResolver.AccountInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes_storage)": {
              "label": "mapping(bytes32 => bytes)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
              "label": "mapping(bytes32 => mapping(address => mapping(address => bool)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))": {
              "label": "mapping(bytes32 => mapping(bytes32 => bytes))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))": {
              "label": "mapping(bytes32 => mapping(string => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)14457_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)5408_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(uint256 => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AccountInfo)19070_storage": {
              "label": "struct UserDataServiceResolver.AccountInfo",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "identity",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "metasId",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(AddressSet)14457_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)14156_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)10236_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)5408_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)14156_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AkxWallet": {
        "src": "contracts/modules/wallet/AkxWallet.sol:15",
        "version": {
          "withMetadata": "8c131740f6edfbe8ea69de786ade08d77999893a01abe2049c9c81d58c9de1b8",
          "withoutMetadata": "4821d5593eae2ac6f318ca80b6551caf9c0d671a0c329060c65e0ea977eee6d6",
          "linkedWithoutMetadata": "4821d5593eae2ac6f318ca80b6551caf9c0d671a0c329060c65e0ea977eee6d6"
        },
        "inherit": [
          "FallbackManager",
          "ERC2055Transaction",
          "LibMath",
          "InitModifiers",
          "IERC721Receiver",
          "IERC777Recipient",
          "IERC1155Receiver",
          "NonCustodialWallet",
          "ISignatureValidator",
          "ISignatureValidatorConstants",
          "ERC165",
          "IERC165"
        ],
        "libraries": [
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address)",
          "isValidSignature(bytes,bytes)",
          "signMessage(bytes)",
          "getMessageHash(bytes)",
          "isValidSignature(bytes32,bytes)",
          "getMessageHashForWallet(address,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "tokensReceived(address,address,address,uint256,bytes,bytes)",
          "supportsInterface(bytes4)",
          "multiSend(bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AkxWallet",
            "src": "contracts/modules/wallet/AkxWallet.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "multisendSingleton",
            "src": "contracts/modules/wallet/AkxWallet.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "singleton",
            "src": "contracts/modules/wallet/AkxWallet.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "1",
              "type": "t_struct(Nonce)23895_storage",
              "contract": "ERC2055Transaction",
              "src": "contracts/tokens/ERC2055/utils/Transaction.sol:20"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "ERC2055Transaction",
              "src": "contracts/tokens/ERC2055/utils/Transaction.sol:38"
            },
            {
              "label": "_signedMessages",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "AkxWallet",
              "src": "contracts/modules/wallet/AkxWallet.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Nonce)23895_storage": {
              "label": "struct ERC2055Transaction.Nonce",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXWalletFactory": {
        "src": "contracts/modules/wallet/Factory.sol:7",
        "version": {
          "withMetadata": "aca667f6b5ef86c7d43b2b5a473f533eb1a38f31136fb20fa3bd7456e0252068",
          "withoutMetadata": "7b0e11ec00de0aaaad2b3c715898d2cf7d4739e4b2781e71f9c78702d5bb8b17",
          "linkedWithoutMetadata": "7b0e11ec00de0aaaad2b3c715898d2cf7d4739e4b2781e71f9c78702d5bb8b17"
        },
        "inherit": [],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "createWallet(address,bytes32)",
          "belongsTo(address)",
          "ownerOf(address)",
          "initWallet()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AKXWalletFactory",
            "src": "contracts/modules/wallet/Factory.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_salts",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "AKXWalletFactory",
              "src": "contracts/modules/wallet/Factory.sol:11"
            },
            {
              "label": "_saltExists",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "AKXWalletFactory",
              "src": "contracts/modules/wallet/Factory.sol:12"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "AKXWalletFactory",
              "src": "contracts/modules/wallet/Factory.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "FallbackManager": {
        "src": "contracts/modules/wallet/FallbackManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFallbackHandler(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AkxWalletManager": {
        "src": "contracts/modules/wallet/Manager.sol:7",
        "version": {
          "withMetadata": "44346bf82b085db4f0fb22c97bd0cbcb223c17f13569520a9dcffbc9db609fa3",
          "withoutMetadata": "347ac29f32a350295f5a21977c8545a1c8d6a969da3441815945f41eefd3f3f8",
          "linkedWithoutMetadata": "347ac29f32a350295f5a21977c8545a1c8d6a969da3441815945f41eefd3f3f8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)",
          "isValidSignature(bytes32,bytes)",
          "getMessageHash(bytes)",
          "getMessageHashForWallet(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AkxWalletManager",
              "src": "contracts/modules/wallet/Manager.sol:13"
            },
            {
              "label": "modules",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "AkxWalletManager",
              "src": "contracts/modules/wallet/Manager.sol:14"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "AkxWalletManager",
              "src": "contracts/modules/wallet/Manager.sol:15"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "AkxWalletManager",
              "src": "contracts/modules/wallet/Manager.sol:16"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "AkxWalletManager",
              "src": "contracts/modules/wallet/Manager.sol:17"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "AkxWalletManager",
              "src": "contracts/modules/wallet/Manager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "NonCustodialWallet": {
        "src": "contracts/modules/wallet/NonCustodial.sol:8",
        "inherit": [
          "ISignatureValidator",
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AKXProxy": {
        "src": "contracts/proxy/AKXProxy.sol:8",
        "version": {
          "withMetadata": "a4c810145d6c27f33fb933de15c1e74c33cfefc0e4cc3e702371d9b0350e4cb5",
          "withoutMetadata": "2e399151c66ca725706c11d07df62e0c19f9ab51b1c4341d07a6d84859ae53df",
          "linkedWithoutMetadata": "2e399151c66ca725706c11d07df62e0c19f9ab51b1c4341d07a6d84859ae53df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AKXProxy",
            "src": "contracts/proxy/AKXProxy.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "AKXProxy",
              "src": "contracts/proxy/AKXProxy.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IProxy": {
        "src": "contracts/proxy/AKXProxy.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "masterCopy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "AKXProxyFactory": {
        "src": "contracts/proxy/AKXProxyFactory.sol:7",
        "version": {
          "withMetadata": "53801a697c84755b61a6408b608040c771288df9dfdf9c0be3cbed622c57ffc7",
          "withoutMetadata": "add0ea18ac1f8bcc64c6163670aeb84db7cc0de14756411498a1a410bd61e75d",
          "linkedWithoutMetadata": "add0ea18ac1f8bcc64c6163670aeb84db7cc0de14756411498a1a410bd61e75d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxy(address,bytes)",
          "proxyRuntimeCode()",
          "proxyCreationCode()",
          "createProxyWithNonce(address,bytes,uint256)",
          "createProxyWithCallback(address,bytes,uint256,address)",
          "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IProxyCreationCallback": {
        "src": "contracts/proxy/IProxyCallback.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "BaseUserRegistry": {
        "src": "contracts/registry/BaseUserRegistry.sol:9",
        "inherit": [
          "Ownable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "authorizeController(address)",
          "deAuthorizeController(address)",
          "setResolver(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseUserRegistry",
            "src": "contracts/registry/BaseUserRegistry.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "controllers",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:11"
            },
            {
              "label": "registrationQueue",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:13"
            },
            {
              "label": "uds",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(UDS)18973",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:16"
            },
            {
              "label": "index",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:17"
            },
            {
              "label": "rootNodeAddress",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "BaseUserRegistry",
              "src": "contracts/registry/BaseUserRegistry.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(UDS)18973": {
              "label": "contract UDS",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(uint256 => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AllResolvers": {
        "src": "contracts/resolvers/AllResolvers.sol:16",
        "inherit": [
          "MetaDataResolver",
          "ProfileResolver",
          "NameResolver",
          "IdentResolver",
          "BaseResolver",
          "BytesUtils",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_idents",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "IdentResolver",
              "src": "contracts/resolvers/IdentResolver.sol:10"
            },
            {
              "label": "_idExists",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "IdentResolver",
              "src": "contracts/resolvers/IdentResolver.sol:11"
            },
            {
              "label": "_names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:10"
            },
            {
              "label": "addressToNames",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:11"
            },
            {
              "label": "nameToAddress",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:12"
            },
            {
              "label": "_profiles",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ProfileResolver",
              "src": "contracts/resolvers/ProfileResolver.sol:10"
            },
            {
              "label": "_profileExists",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProfileResolver",
              "src": "contracts/resolvers/ProfileResolver.sol:11"
            },
            {
              "label": "_metadataIds",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:13"
            },
            {
              "label": "_idExists",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:14"
            },
            {
              "label": "_keysAvailable",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:15"
            },
            {
              "label": "_keyNames",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:16"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:17"
            },
            {
              "label": "_keyValMetas",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:18"
            },
            {
              "label": "_metaOwners",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes_storage)": {
              "label": "mapping(bytes32 => bytes)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))": {
              "label": "mapping(bytes32 => mapping(bytes32 => bytes))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))": {
              "label": "mapping(bytes32 => mapping(string => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "BaseResolver": {
        "src": "contracts/resolvers/BaseResolver.sol:8",
        "inherit": [
          "BytesUtils",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IdentResolver": {
        "src": "contracts/resolvers/IdentResolver.sol:6",
        "inherit": [
          "BaseResolver",
          "BytesUtils",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "ident(uint256)",
          "setIdent(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_idents",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "IdentResolver",
              "src": "contracts/resolvers/IdentResolver.sol:10"
            },
            {
              "label": "_idExists",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "IdentResolver",
              "src": "contracts/resolvers/IdentResolver.sol:11"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "MetaDataResolver": {
        "src": "contracts/resolvers/MetaDataResolver.sol:6",
        "inherit": [
          "BaseResolver",
          "BytesUtils",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "metadata(uint256)",
          "metaValue(uint256,string)",
          "setMetaData(address,uint256,string,uint256,bytes,bool,bool)",
          "setNewMetaDatas(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_metadataIds",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:13"
            },
            {
              "label": "_idExists",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:14"
            },
            {
              "label": "_keysAvailable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:15"
            },
            {
              "label": "_keyNames",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:16"
            },
            {
              "label": "_keyExists",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:17"
            },
            {
              "label": "_keyValMetas",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:18"
            },
            {
              "label": "_metaOwners",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "MetaDataResolver",
              "src": "contracts/resolvers/MetaDataResolver.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bytes_storage)": {
              "label": "mapping(bytes32 => bytes)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))": {
              "label": "mapping(bytes32 => mapping(bytes32 => bytes))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))": {
              "label": "mapping(bytes32 => mapping(string => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bytes32)": {
              "label": "mapping(string => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "NameResolver": {
        "src": "contracts/resolvers/NameResolver.sol:6",
        "inherit": [
          "BaseResolver",
          "BytesUtils",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "getName(uint256)",
          "getName(address)",
          "getName()",
          "nameOwner(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_names",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:10"
            },
            {
              "label": "addressToNames",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:11"
            },
            {
              "label": "nameToAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "NameResolver",
              "src": "contracts/resolvers/NameResolver.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ProfileResolver": {
        "src": "contracts/resolvers/ProfileResolver.sol:6",
        "inherit": [
          "BaseResolver",
          "BytesUtils",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "profile(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_profiles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ProfileResolver",
              "src": "contracts/resolvers/ProfileResolver.sol:10"
            },
            {
              "label": "_profileExists",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "ProfileResolver",
              "src": "contracts/resolvers/ProfileResolver.sol:11"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RoutesResolver": {
        "src": "contracts/resolvers/RoutesResolver.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_routeRegistry",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(Route)21424_storage)",
              "contract": "RoutesResolver",
              "src": "contracts/resolvers/RoutesResolver.sol:14"
            },
            {
              "label": "_contractRegistry",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "RoutesResolver",
              "src": "contracts/resolvers/RoutesResolver.sol:15"
            },
            {
              "label": "_exists",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "RoutesResolver",
              "src": "contracts/resolvers/RoutesResolver.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Route)21424_storage)": {
              "label": "mapping(bytes32 => struct Route)",
              "numberOfBytes": "32"
            },
            "t_struct(Route)21424_storage": {
              "label": "struct Route",
              "members": [
                {
                  "label": "_contract",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "funcSelectorId",
                  "type": "t_bytes4",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "needsAuth",
                  "type": "t_bool",
                  "offset": 24,
                  "slot": "0"
                },
                {
                  "label": "numParams",
                  "type": "t_uint16",
                  "offset": 25,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKX3": {
        "src": "contracts/tokens/AKX.sol:13",
        "version": {
          "withMetadata": "293a08bc439a3fa6f8dafe7cc808fe20eb82ba617fe0535ea94470fa97fe686c",
          "withoutMetadata": "e878563ce07136bafc54bf492949d20d485dbee6695919e18178cc740ba3b3e9",
          "linkedWithoutMetadata": "e878563ce07136bafc54bf492949d20d485dbee6695919e18178cc740ba3b3e9"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "swap(address,uint256)",
          "buy()",
          "sell()",
          "maxSupply()",
          "akxForLabz()",
          "labzForAKX()",
          "akxForETH()",
          "akxForMatics()",
          "priceETH()",
          "priceMATICS()",
          "prices()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AKX3",
            "src": "contracts/tokens/AKX.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)10236_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)10236_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)10236_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AKXAccounts": {
        "src": "contracts/tokens/AKXAccounts.sol:20",
        "version": {
          "withMetadata": "9c632ffaa4fee037a800890dd974e4fd481410ed70a5933ff162ba1721a89357",
          "withoutMetadata": "325424fe88a5c7327e312549481206ff1782da770e018320525f1a593f35aedd",
          "linkedWithoutMetadata": "325424fe88a5c7327e312549481206ff1782da770e018320525f1a593f35aedd"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC721BurnableUpgradeable",
          "ERC721URIStorageUpgradeable",
          "ERC721EnumerableUpgradeable",
          "IERC721EnumerableUpgradeable",
          "ERC721Upgradeable",
          "IERC721MetadataUpgradeable",
          "IERC721Upgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable"
        ],
        "methods": [
          "()",
          "initialize(address)",
          "tokenURI(uint256)",
          "newAccount()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "101",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "102",
              "type": "t_string_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "107",
              "type": "t_array(t_uint256)44_storage",
              "contract": "ERC721Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "154",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC721EnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "201",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC721URIStorageUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:74"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC721BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "302",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "351",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "352",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "401",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "451",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_tokenIdCounter",
              "offset": 0,
              "slot": "501",
              "type": "t_struct(Counter)4379_storage",
              "contract": "AKXAccounts",
              "src": "contracts/tokens/AKXAccounts.sol:24"
            },
            {
              "label": "_accountStorage",
              "offset": 0,
              "slot": "502",
              "type": "t_address",
              "contract": "AKXAccounts",
              "src": "contracts/tokens/AKXAccounts.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]",
              "numberOfBytes": "1408"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)5101_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4800_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)4379_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4800_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC2055": {
        "src": "contracts/tokens/ERC2055/ERC2055.sol:9",
        "version": {
          "withMetadata": "b55db77e57d9a439d46abe43f3acdc886a7286d87c3e287615b81ab8f4a3ef73",
          "withoutMetadata": "0ad199070d99ca8c4844a4cfde31e0fe968eae1ffba1c6e74ea70044555e2b32",
          "linkedWithoutMetadata": "0ad199070d99ca8c4844a4cfde31e0fe968eae1ffba1c6e74ea70044555e2b32"
        },
        "inherit": [
          "EIP712",
          "IERC2055"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "setTotalSupply(uint256)",
          "setMaxSupply(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "allowance(address,address)",
          "decreaseAllowance(address,uint256)",
          "safeTransferToken(address,address,uint256)",
          "lockToken(uint256)",
          "unlockToken()",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()",
          "lockToken(uint256,uint256)",
          "setMinter(address)",
          "safeMint(address,uint256)",
          "safeBurn(address,uint256)",
          "setBuyLogic(address)",
          "setSellLogic(address)",
          "buy()",
          "setWithdrawRecipient(address)",
          "safeMint(address,address,uint256)",
          "safeBurn(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC2055",
            "src": "contracts/tokens/ERC2055/ERC2055.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_struct(Counter)10236_storage)",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:12"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:20"
            },
            {
              "label": "maxSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:21"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:22"
            },
            {
              "label": "isLocked",
              "offset": 20,
              "slot": "3",
              "type": "t_bool",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:23"
            },
            {
              "label": "lockedUntil",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:24"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:25"
            },
            {
              "label": "_balance",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:27"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC2055",
              "src": "contracts/tokens/ERC2055/ERC2055.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)10236_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)10236_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ERC2055Wrapper": {
        "src": "contracts/tokens/ERC2055/ERC2055Wrapper.sol:9",
        "inherit": [
          "IERC2055",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ERC2055Wrapper_init(address)",
          "depositFor(address,uint256)",
          "withdrawTo(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "underlying",
              "offset": 0,
              "slot": "51",
              "type": "t_contract(ERC2055)22940",
              "contract": "ERC2055Wrapper",
              "src": "contracts/tokens/ERC2055/ERC2055Wrapper.sol:11"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC2055Wrapper",
              "src": "contracts/tokens/ERC2055/ERC2055Wrapper.sol:51"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ERC2055)22940": {
              "label": "contract ERC2055",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IERC2055Decentralized": {
        "src": "contracts/tokens/ERC2055/IERC2055-Decentralized.sol:1",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decentralize(address)",
          "decentralizeAuto(address,uint256)",
          "verifyDecentralization(address)",
          "noTransferIfCentralized()",
          "noMintingIfCentralized()",
          "noBurningIfCentralized()",
          "onlySupportsDecentralization(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC2055Storage": {
        "src": "contracts/tokens/ERC2055/IERC2055-Storage.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "store((bytes32,bytes,uint8,bytes32))",
          "retrieve(bytes32)",
          "retrieveByHash(bytes32)",
          "decodeData(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "IERC2055": {
        "src": "contracts/tokens/ERC2055/IERC2055.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferToken(address,address,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "name()",
          "symbol()",
          "decimals()",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()",
          "lockToken(uint256,uint256)",
          "unlockToken()",
          "safeMint(address,address,uint256)",
          "safeBurn(address,address,uint256)",
          "setBuyLogic(address)",
          "setSellLogic(address)",
          "buy()",
          "setWithdrawRecipient(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "BuyingLogic": {
        "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:28",
        "inherit": [
          "LibMath",
          "Pricing"
        ],
        "libraries": [],
        "methods": [
          "buyLogic()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            },
            {
              "label": "_hasAccount",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:38"
            },
            {
              "label": "_userTokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:39"
            },
            {
              "label": "_loadedAccounts",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bytes_storage)",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:40"
            },
            {
              "label": "_isLoaded",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:41"
            },
            {
              "label": "_akxWallets",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:42"
            },
            {
              "label": "_walletFactory",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:44"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:45"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(ERC2055)22940",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:48"
            },
            {
              "label": "_uds",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(UserDataServiceResolver)19412",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:50"
            },
            {
              "label": "_sale_type",
              "offset": 20,
              "slot": "9",
              "type": "t_enum(SALE_TYPE)23393",
              "contract": "BuyingLogic",
              "src": "contracts/tokens/ERC2055/utils/BuyingLogic.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(ERC2055)22940": {
              "label": "contract ERC2055",
              "numberOfBytes": "20"
            },
            "t_contract(UserDataServiceResolver)19412": {
              "label": "contract UserDataServiceResolver",
              "numberOfBytes": "20"
            },
            "t_enum(SALE_TYPE)23393": {
              "label": "enum SALE_TYPE",
              "members": [
                "NONE",
                "PRIVATE",
                "PUBLIC"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes_storage)": {
              "label": "mapping(address => bytes)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidator": {
        "src": "contracts/tokens/ERC2055/utils/ISignatureValidator.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ISignatureValidatorConstants": {
        "src": "contracts/tokens/ERC2055/utils/ISignatureValidator.sol:4",
        "version": {
          "withMetadata": "5ecaf8c5493ec0b0358075852353903a43ac882ab404549fbeef2112fe0a553a",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "OrderLogic": {
        "src": "contracts/tokens/ERC2055/utils/OrderLogic.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "ERC2055Transaction": {
        "src": "contracts/tokens/ERC2055/utils/Transaction.sol:7",
        "inherit": [
          "LibMath",
          "ISignatureValidatorConstants"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "domainSeparator()",
          "encodeTxData((address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256))",
          "getChainId()",
          "getTransactionHash((address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256))",
          "createERC2055Tx(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)",
          "checkSignature(bytes32,bytes,bytes)",
          "executeTransaction((address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256),bytes)",
          "requiredTxGas(address,uint256,bytes,uint8)",
          "approveHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "nonce",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Nonce)23895_storage",
              "contract": "ERC2055Transaction",
              "src": "contracts/tokens/ERC2055/utils/Transaction.sol:20"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "ERC2055Transaction",
              "src": "contracts/tokens/ERC2055/utils/Transaction.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Nonce)23895_storage": {
              "label": "struct ERC2055Transaction.Nonce",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "TransactionArchivesStorage": {
        "src": "contracts/tokens/ERC2055/utils/TransactionArchivesStorage.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "storeSuccessfulTransaction(address,bytes32,uint256,uint256,uint256,bytes)",
          "storeFailedOrSuspiciousTransaction(address,bytes32,uint256,uint256,uint256,bytes,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "archiveIndex",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "TransactionArchivesStorage",
              "src": "contracts/tokens/ERC2055/utils/TransactionArchivesStorage.sol:21"
            },
            {
              "label": "_txIsStored",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "TransactionArchivesStorage",
              "src": "contracts/tokens/ERC2055/utils/TransactionArchivesStorage.sol:23"
            },
            {
              "label": "_hashStoreBySender",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))",
              "contract": "TransactionArchivesStorage",
              "src": "contracts/tokens/ERC2055/utils/TransactionArchivesStorage.sol:24"
            },
            {
              "label": "_failed",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "TransactionArchivesStorage",
              "src": "contracts/tokens/ERC2055/utils/TransactionArchivesStorage.sol:25"
            },
            {
              "label": "_suspicious",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "TransactionArchivesStorage",
              "src": "contracts/tokens/ERC2055/utils/TransactionArchivesStorage.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(address => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "LabzERC20": {
        "src": "contracts/tokens/LabzERC20.sol:10",
        "version": {
          "withMetadata": "58842746f012f913c7581d5ca2cc9fb66e4ce1971e2849d892e3006df8ddbf9f",
          "withoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d",
          "linkedWithoutMetadata": "d00809343b5ff9714a23e8ff2a782f87d7e481734465560ed213e47f8096bb6d"
        },
        "inherit": [
          "Ownable",
          "ReentrancyGuard",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "enableTransfer()",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LabzERC20",
            "src": "contracts/tokens/LabzERC20.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)10236_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:25"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:37",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "canTransfer",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:12"
            },
            {
              "label": "_balanceOf",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LabzERC20",
              "src": "contracts/tokens/LabzERC20.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)10236_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)10236_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "Referrals": {
        "src": "contracts/tokens/Referrals.sol:9",
        "version": {
          "withMetadata": "fb975c03721b3813681859b80d16ea7a9e710245d502b5c3220f1bd8d0c770c9",
          "withoutMetadata": "ced42744042d646ddbe16be98df1dd1f3daf189444ce03df2316b237c7668fca",
          "linkedWithoutMetadata": "ced42744042d646ddbe16be98df1dd1f3daf189444ce03df2316b237c7668fca"
        },
        "inherit": [
          "Ownable",
          "Context",
          "Rewards",
          "InitModifiers"
        ],
        "libraries": [
          "SafeERC20",
          "Base64"
        ],
        "methods": [
          "(address,address)",
          "canClaim()",
          "canEarn()",
          "setLogic(address)",
          "claim()",
          "refer(string,address,address,uint256)",
          "registerReferrer(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Referrals",
            "src": "contracts/tokens/Referrals.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            },
            {
              "label": "beneficiaries",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(RewardBeneficiary)17280_storage)",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:36"
            },
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Rewards",
              "src": "contracts/interfaces/Rewards.sol:38"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "registeredReferrers",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:13"
            },
            {
              "label": "referralCodes",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:14"
            },
            {
              "label": "codesToReferrer",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_string_memory_ptr,t_address)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:15"
            },
            {
              "label": "_codeExists",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_string_memory_ptr,t_bool)",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:16"
            },
            {
              "label": "_referralLogic",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:18"
            },
            {
              "label": "__logic",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(ILogic)17065",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:19"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Referrals",
              "src": "contracts/tokens/Referrals.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ILogic)17065": {
              "label": "contract ILogic",
              "numberOfBytes": "20"
            },
            "t_enum(RewardTypes)17251": {
              "label": "enum Rewards.RewardTypes",
              "members": [
                "REFERRAL",
                "STAKING",
                "OTHER"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(RewardBeneficiary)17280_storage)": {
              "label": "mapping(address => struct Rewards.RewardBeneficiary)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
              "label": "mapping(string => bool)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RewardBeneficiary)17280_storage": {
              "label": "struct Rewards.RewardBeneficiary",
              "members": [
                {
                  "label": "consolidatedEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "beneficiary",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_info",
                  "type": "t_struct(RewardInfo)17272_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(RewardInfo)17272_storage": {
              "label": "struct Rewards.RewardInfo",
              "members": [
                {
                  "label": "_type",
                  "type": "t_enum(RewardTypes)17251",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "consolidatedPerUnit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "earned",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "claimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "RewardToken": {
        "src": "contracts/tokens/Reward/RewardToken.sol:6",
        "version": {
          "withMetadata": "17c7ab4e4600082e365b3c2dcb69f68628a3c24623598296a2458485e73e7711",
          "withoutMetadata": "ded06629f7fefb40757584323def360d7b88784b64ed690e84e931a6d55bb15c",
          "linkedWithoutMetadata": "ded06629f7fefb40757584323def360d7b88784b64ed690e84e931a6d55bb15c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/tokens/Reward/RewardToken.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AccountStorage": {
        "src": "contracts/tokens/Storage/AccountStorage.sol:9",
        "version": {
          "withMetadata": "d461b57f29f1e78042de9f7c81871ea4bb4431482e513459f02ae39e86cb74e7",
          "withoutMetadata": "14d8167e0741b7b8d7e33a35f241c77a5a75e2e7745eda98e028748e38b7b081",
          "linkedWithoutMetadata": "14d8167e0741b7b8d7e33a35f241c77a5a75e2e7745eda98e028748e38b7b081"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable"
        ],
        "methods": [
          "()",
          "initialize()",
          "create(address,uint256)",
          "updateOperator(address)",
          "data(address,uint256)",
          "data(address)",
          "data(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_accountIndex",
              "offset": 0,
              "slot": "301",
              "type": "t_struct(Counter)4379_storage",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:12"
            },
            {
              "label": "_index",
              "offset": 0,
              "slot": "302",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:22"
            },
            {
              "label": "_tokenIdToIndex",
              "offset": 0,
              "slot": "303",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:23"
            },
            {
              "label": "_data",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_uint256,t_struct(Account)25457_storage)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:24"
            },
            {
              "label": "_sha",
              "offset": 0,
              "slot": "305",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:25"
            },
            {
              "label": "_hasAccount",
              "offset": 0,
              "slot": "306",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:26"
            },
            {
              "label": "_tokenIdAssociated",
              "offset": 0,
              "slot": "307",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "AccountStorage",
              "src": "contracts/tokens/Storage/AccountStorage.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Account)25457_storage)": {
              "label": "mapping(uint256 => struct AccountStorage.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)25457_storage": {
              "label": "struct AccountStorage.Account",
              "members": [
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "creationDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(AddressSet)5101_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4800_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)4379_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4800_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "AdminUtils": {
        "src": "contracts/utils/AdminUtils.sol:11",
        "inherit": [
          "AKXRoles",
          "InitModifiers",
          "IsSelf",
          "AccessControlEnumerableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlEnumerableUpgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "authorizeAdmin(address)",
          "__AdminUtils_init(address)",
          "addSysAdminToPendingQueue(address)",
          "ProcessAllQueueItems()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlEnumerableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            },
            {
              "label": "_allowedAdmins",
              "offset": 0,
              "slot": "202",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:13"
            },
            {
              "label": "_blacklisted",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:14"
            },
            {
              "label": "pendingAdminRightsAcceptance",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:17"
            },
            {
              "label": "_pendingQueueIds",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:18"
            },
            {
              "label": "_addrToQids",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:19"
            },
            {
              "label": "deniedAdmins",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:20"
            },
            {
              "label": "approvedAdmins",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:21"
            },
            {
              "label": "toDeny",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:22"
            },
            {
              "label": "toApprove",
              "offset": 0,
              "slot": "210",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:23"
            },
            {
              "label": "queueIndex",
              "offset": 0,
              "slot": "211",
              "type": "t_uint256",
              "contract": "AdminUtils",
              "src": "contracts/utils/AdminUtils.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)5101_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)5101_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)4800_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)179_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)4800_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "BytesUtils": {
        "src": "contracts/utils/BytesUtils.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "DAOUtils": {
        "src": "contracts/utils/DAOUtils.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateProposal(bytes4,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "dao",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "DAOUtils",
              "src": "contracts/utils/DAOUtils.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "DAOProposalsUtils": {
        "src": "contracts/utils/DaoProposals.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "SubmitOtherProposal(uint256,string,address)",
          "approveNewProposalForVoting(address,bytes4)",
          "denyNewProposalForVoting(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Hashing": {
        "src": "contracts/utils/Hashing.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Hashing",
            "src": "contracts/utils/Hashing.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_secSalt",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "Hashing",
              "src": "contracts/utils/Hashing.sol:7"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "InitModifiers": {
        "src": "contracts/utils/InitModifiers.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitModifiers",
              "src": "contracts/utils/InitModifiers.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "IsSelf": {
        "src": "contracts/utils/IsSelf.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "LibMath": {
        "src": "contracts/utils/LibMath.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "calculateTokenQty(uint256)",
          "calculateFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "Pricing": {
        "src": "contracts/utils/Pricing.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "mantissa",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Pricing",
              "src": "contracts/utils/Pricing.sol:6"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "fe143a6fa113bbdb53f721d4c3e453021650d97523af024dc91401686ce00df7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}