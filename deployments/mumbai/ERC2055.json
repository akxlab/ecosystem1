{
  "address": "0xa81dC65a4297DEF939B27eF50abe5733bD165493",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "feeEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        }
      ],
      "name": "lockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "safeTransferToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "transferred",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "setTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa98838c066b59f695a8c37ea5e3742bf66aa32c8e287e3b8c305ece8d006ff3b",
  "receipt": {
    "to": null,
    "from": "0xc956BbcA545e0071Edcd14AE0531F7fa94D33771",
    "contractAddress": "0xa81dC65a4297DEF939B27eF50abe5733bD165493",
    "transactionIndex": 20,
    "gasUsed": "1699626",
    "logsBloom": "0x
    "blockHash": "0x1b5fbcd607e90f732afdf48f4e6ae8608ff48111cb0f6eef16299aca54b802ff",
    "transactionHash": "0xa98838c066b59f695a8c37ea5e3742bf66aa32c8e287e3b8c305ece8d006ff3b",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 27933242,
        "transactionHash": "0xa98838c066b59f695a8c37ea5e3742bf66aa32c8e287e3b8c305ece8d006ff3b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c956bbca545e0071edcd14ae0531f7fa94d33771",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005a94021f294c7a000000000000000000000000000000000000000000000000209160d67e09d93000000000000000000000000000000000000000000000001183687283a792cba70000000000000000000000000000000000000000000000002036ccd45ee08cb600000000000000000000000000000000000000000000001183c30685c6bc1821",
        "logIndex": 136,
        "blockHash": "0x1b5fbcd607e90f732afdf48f4e6ae8608ff48111cb0f6eef16299aca54b802ff"
      }
    ],
    "blockNumber": 27933242,
    "cumulativeGasUsed": "6230617",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ERC2055 DEFAULT SINGLE (TEST)",
    "ERC2055"
  ],
  "numDeployments": 3,
  "solcInputHash": "902454a7ed76b1c45d768b4676393c38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeTransferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"transferred\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/ERC2055/ERC2055.sol\":\"ERC2055\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/tokens/ERC2055/ERC2055.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./ERC2055Storage.sol\\\";\\nimport \\\"./IERC2055.sol\\\";\\n\\ncontract ERC2055 is IERC2055 {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public _totalSupply;\\n    uint256 public maxSupply;\\n    address public owner;\\n    bool public isLocked;\\n    uint256 public lockedUntil;\\n\\n    mapping(address => uint256) private _balance;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    bytes4 private constant TOKEN_INTERFACE_ID =\\n        bytes4(keccak256(abi.encodePacked(\\\"supportedTokenInterfaces(bytes4)\\\")));\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        owner = msg.sender;\\n        decimals = 18;\\n    }\\n\\n    function feeEstimate(uint256 amount) external view returns(uint256) {\\n        //@todo implement feeEstimate\\n        return 0;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"only owner can do this\\\");\\n        _;\\n    }\\n\\n    function setTotalSupply(uint256 supply) public onlyOwner {\\n        _totalSupply = supply;\\n    }\\n\\n    function setMaxSupply(uint256 supply) public onlyOwner {\\n        maxSupply = supply;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balance[account];\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = msg.sender;\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n\\n\\n\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        _approve(address(this), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n       _transfer(from, to, amount);\\n       return true;\\n    }\\n\\n      /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address _owner = owner;\\n        _approve(_owner, spender, allowance(_owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n     function allowance(address _owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[_owner][spender];\\n    }\\n\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address _owner = owner;\\n        uint256 currentAllowance = allowance(_owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n  \\n     function _approve(\\n        address _owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n\\n function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\n        uint256 fromBalance = _balance[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balance[from] = fromBalance - amount;\\n        }\\n        _balance[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n     \\n    }\\n\\n\\n\\n    function safeMint(uint256 amount, address to)\\n        public\\n     \\n        onlyOwner\\n        returns (bool)\\n    {\\n      _mint(to, amount);\\n        return true;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        //_beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balance[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n       // _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n\\n    function safeTransferToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) public virtual override returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(\\n            0xa9059cbb,\\n            receiver,\\n            amount\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(\\n                sub(gas(), 10000),\\n                token,\\n                0,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0x20\\n            )\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n    }\\n\\n    function lockToken(uint256 until) public override onlyOwner {\\n        require(isLocked != true, \\\"already locked\\\");\\n        isLocked = true;\\n        lockedUntil = until;\\n    }\\n\\n    function unlockToken() public override {\\n        if (block.timestamp > lockedUntil) {\\n            revert(\\\"cannot unlock\\\");\\n        }\\n        isLocked = false;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x5beee49f9ae2c685d044440a09cf392aee431befacce206ea3e9e644578a56e0\",\"license\":\"MIT\"},\"contracts/tokens/ERC2055/ERC2055Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./ERC2055.sol\\\";\\n\\n\\nabstract contract ERC2055Storage {\\n    mapping(uint256 => address) internal _tokenIdtoAddresses;\\n    mapping(uint256 => address) public ownerOf;\\n    mapping(uint256 => string) public names;\\n    mapping(uint256 => string) public symbols;\\n    mapping(uint256 => uint256) public supply;\\n    mapping(uint256 => uint8) public _decimals;\\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\\n    mapping(address => mapping(uint256 => Balances[])) internal _tokenBalances;\\n    mapping(uint256 => mapping(address => uint256)) public allowances;\\n    mapping(address => uint256[]) public _holdsTokenIds;\\n    mapping(uint256 => Token) internal _tokens;\\n    mapping(uint256 => OptionalTokenMetas) private _optionalMetas;\\n    mapping(uint256 => bool) internal _hasMetas;\\n    mapping(uint256 => ERC2055) internal _underlyings;\\n    uint256[] internal _tokenIds;\\n\\n    struct Balances {\\n        address owner;\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct Token {\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n        uint256 maxSupply;\\n        uint8 decimals;\\n    }\\n\\n    struct OptionalTokenMetas {\\n        string logoUri;\\n        string website;\\n        string whitepaper;\\n        string[] socialLinks;\\n        address[] founders;\\n        address[] sponsors;\\n        string[] akas;\\n        string[] networks;\\n        uint256[] chainIds;\\n    }\\n\\n    function tokenIds() public view returns(uint256[] memory) {\\n        return _tokenIds;\\n    }\\n\\n    function balancesOf(address holder) external view returns(Balances[] memory) {\\n        uint i = 0;\\n        Balances[] memory b;\\n        for(i == 0; i < _holdsTokenIds[holder].length; i+=1) {\\n            uint256 tid = _holdsTokenIds[holder][i];\\n            b[i] = Balances(holder, _tokenIdtoAddresses[tid],tid, _balances[tid][holder]);\\n        }\\n        return b;\\n    }\\n\\n    function token(uint256 tokenId) external view returns (Token memory) {\\n        return _tokens[tokenId];\\n    }\\n\\n    function _tName(uint256 tokenId)  external view returns (string memory) {\\n        return this.token(tokenId).name;\\n    }\\n\\n    function _tSymbol(uint256 tokenId) external view returns (string memory) {\\n         return this.token(tokenId).symbol;\\n    }\\n\\n    function _tDecimal(uint256 tokenId) external view returns (uint8) {\\n         return this.token(tokenId).decimals;\\n    }\\n\\n\\n    function _tTotalSupply(uint256 tokenId) external view returns (uint256) {\\n         return this.token(tokenId).totalSupply;\\n    }\\n\\n    function _tMaxSupply(uint256 tokenId) external view returns (uint256) {\\n         return this.token(tokenId).maxSupply;\\n    }\\n\\n    function metas(uint256 tokenId) external view returns(OptionalTokenMetas memory opts) {\\n     \\n       string[] memory socials;\\n       address[] memory founders;\\n       address[] memory sponsors;\\n       string[] memory akas;\\n       string[] memory networks;\\n       uint256[] memory chainIds;\\n\\n        if(_hasMetas[tokenId] != true) {\\n        opts = OptionalTokenMetas(\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"\\\",\\n            socials,\\n            founders,\\n            sponsors,\\n            akas,\\n            networks,\\n            chainIds);\\n        } else {\\n            opts = _optionalMetas[tokenId];\\n        }\\n\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0xc2009ba00ec60e5235fc29440f204275804d9c83ef2b37f31148be6d6b0102e4\",\"license\":\"MIT\"},\"contracts/tokens/ERC2055/IERC2055.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC2055 is IERC20 {\\n\\n    function safeTransferToken(address from, address to, uint256 amount) external returns(bool transferred);\\n    function lockToken(uint256 until) external;\\n    function unlockToken() external;\\n    function feeEstimate(uint256 amount) external view returns(uint256);\\n\\n}\",\"keccak256\":\"0x481750f429001f5a1f1de5a609a5e1cb97e2e3a9c04e954af59b38a989395480\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620021f5380380620021f5833981810160405281019062000037919062000253565b816000908162000048919062000523565b5080600190816200005a919062000523565b5033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600260006101000a81548160ff021916908360ff16021790555050506200060a565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012982620000de565b810181811067ffffffffffffffff821117156200014b576200014a620000ef565b5b80604052505050565b600062000160620000c0565b90506200016e82826200011e565b919050565b600067ffffffffffffffff821115620001915762000190620000ef565b5b6200019c82620000de565b9050602081019050919050565b60005b83811015620001c9578082015181840152602081019050620001ac565b60008484015250505050565b6000620001ec620001e68462000173565b62000154565b9050828152602081018484840111156200020b576200020a620000d9565b5b62000218848285620001a9565b509392505050565b600082601f830112620002385762000237620000d4565b5b81516200024a848260208601620001d5565b91505092915050565b600080604083850312156200026d576200026c620000ca565b5b600083015167ffffffffffffffff8111156200028e576200028d620000cf565b5b6200029c8582860162000220565b925050602083015167ffffffffffffffff811115620002c057620002bf620000cf565b5b620002ce8582860162000220565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200032b57607f821691505b602082108103620003415762000340620002e3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003ab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200036c565b620003b786836200036c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000404620003fe620003f884620003cf565b620003d9565b620003cf565b9050919050565b6000819050919050565b6200042083620003e3565b620004386200042f826200040b565b84845462000379565b825550505050565b600090565b6200044f62000440565b6200045c81848462000415565b505050565b5b8181101562000484576200047860008262000445565b60018101905062000462565b5050565b601f821115620004d3576200049d8162000347565b620004a8846200035c565b81016020851015620004b8578190505b620004d0620004c7856200035c565b83018262000461565b50505b505050565b600082821c905092915050565b6000620004f860001984600802620004d8565b1980831691505092915050565b6000620005138383620004e5565b9150826002028217905092915050565b6200052e82620002d8565b67ffffffffffffffff8111156200054a5762000549620000ef565b5b62000556825462000312565b6200056382828562000488565b600060209050601f8311600181146200059b576000841562000586578287015190505b62000592858262000505565b86555062000602565b601f198416620005ab8662000347565b60005b82811015620005d557848901518255600182019150602085019450602081019050620005ae565b86831015620005f55784890151620005f1601f891682620004e5565b8355505b6001600288020188555050505b505050505050565b611bdb806200061a6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806380f20363116100c3578063b076a18a1161007c578063b076a18a146103b6578063cc1e752e146103e6578063ce0617ec14610416578063d5abeb0114610434578063dd62ed3e14610452578063f7ea7a3d146104825761014d565b806380f20363146102e05780638da5cb5b146102fc57806395d89b411461031a578063a457c2d714610338578063a4e2d63414610368578063a9059cbb146103865761014d565b8063313ce56711610115578063313ce567146101f857806339509351146102165780633eaaf86b1461024657806362bdfceb146102645780636f8b44b01461029457806370a08231146102b05761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a057806318a24b5b146101be57806323b872dd146101c8575b600080fd5b61015a61049e565b60405161016791906112b4565b60405180910390f35b61018a6004803603810190610185919061136f565b61052c565b60405161019791906113ca565b60405180910390f35b6101a86105d3565b6040516101b591906113f4565b60405180910390f35b6101c66105dd565b005b6101e260048036038101906101dd919061140f565b61063f565b6040516101ef91906113ca565b60405180910390f35b610200610657565b60405161020d919061147e565b60405180910390f35b610230600480360381019061022b919061136f565b61066a565b60405161023d91906113ca565b60405180910390f35b61024e6106bc565b60405161025b91906113f4565b60405180910390f35b61027e60048036038101906102799190611499565b6106c2565b60405161028b91906113ca565b60405180910390f35b6102ae60048036038101906102a991906114d9565b610768565b005b6102ca60048036038101906102c59190611506565b610802565b6040516102d791906113f4565b60405180910390f35b6102fa60048036038101906102f591906114d9565b61084b565b005b610304610956565b6040516103119190611542565b60405180910390f35b61032261097c565b60405161032f91906112b4565b60405180910390f35b610352600480360381019061034d919061136f565b610a0a565b60405161035f91906113ca565b60405180910390f35b610370610a9c565b60405161037d91906113ca565b60405180910390f35b6103a0600480360381019061039b919061136f565b610aaf565b6040516103ad91906113ca565b60405180910390f35b6103d060048036038101906103cb919061140f565b610acb565b6040516103dd91906113ca565b60405180910390f35b61040060048036038101906103fb91906114d9565b610b73565b60405161040d91906113f4565b60405180910390f35b61041e610b7a565b60405161042b91906113f4565b60405180910390f35b61043c610b80565b60405161044991906113f4565b60405180910390f35b61046c6004803603810190610467919061155d565b610b86565b60405161047991906113f4565b60405180910390f35b61049c600480360381019061049791906114d9565b610c0d565b005b600080546104ab906115cc565b80601f01602080910402602001604051908101604052809291908181526020018280546104d7906115cc565b80156105245780601f106104f957610100808354040283529160200191610524565b820191906000526020600020905b81548152906001019060200180831161050757829003601f168201915b505050505081565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590611649565b60405180910390fd5b6105c9308484610ca7565b6001905092915050565b6000600354905090565b600654421115610622576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610619906116b5565b60405180910390fd5b6000600560146101000a81548160ff021916908315150217905550565b600061064c848484610e70565b600190509392505050565b600260009054906101000a900460ff1681565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506106b18185856106a28589610b86565b6106ac9190611704565b610ca7565b600191505092915050565b60035481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074b90611649565b60405180910390fd5b61075e82846110dc565b6001905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ef90611649565b60405180910390fd5b8060048190555050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290611649565b60405180910390fd5b60011515600560149054906101000a900460ff16151503610931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092890611784565b60405180910390fd5b6001600560146101000a81548160ff0219169083151502179055508060068190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054610989906115cc565b80601f01602080910402602001604051908101604052809291908181526020018280546109b5906115cc565b8015610a025780601f106109d757610100808354040283529160200191610a02565b820191906000526020600020905b8154815290600101906020018083116109e557829003601f168201915b505050505081565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610a3e8286610b86565b905083811015610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a90611816565b60405180910390fd5b610a908286868403610ca7565b60019250505092915050565b600560149054906101000a900460ff1681565b600080339050610ac0818585610e70565b600191505092915050565b60008063a9059cbb8484604051602401610ae6929190611836565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050602060008251602084016000896127105a03f13d60008114610b565760208114610b5e5760009350610b69565b819350610b69565b600051158215171593505b5050509392505050565b6000919050565b60065481565b60045481565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9490611649565b60405180910390fd5b8060038190555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d906118d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c90611963565b60405180910390fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e6391906113f4565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed6906119f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4590611a87565b60405180910390fd5b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610fd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcc90611b19565b60405180910390fd5b818103600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461106a9190611704565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110ce91906113f4565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361114b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114290611b85565b60405180910390fd5b806003600082825461115d9190611704565b9250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111b39190611704565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161121891906113f4565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561125e578082015181840152602081019050611243565b60008484015250505050565b6000601f19601f8301169050919050565b600061128682611224565b611290818561122f565b93506112a0818560208601611240565b6112a98161126a565b840191505092915050565b600060208201905081810360008301526112ce818461127b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611306826112db565b9050919050565b611316816112fb565b811461132157600080fd5b50565b6000813590506113338161130d565b92915050565b6000819050919050565b61134c81611339565b811461135757600080fd5b50565b60008135905061136981611343565b92915050565b60008060408385031215611386576113856112d6565b5b600061139485828601611324565b92505060206113a58582860161135a565b9150509250929050565b60008115159050919050565b6113c4816113af565b82525050565b60006020820190506113df60008301846113bb565b92915050565b6113ee81611339565b82525050565b600060208201905061140960008301846113e5565b92915050565b600080600060608486031215611428576114276112d6565b5b600061143686828701611324565b935050602061144786828701611324565b92505060406114588682870161135a565b9150509250925092565b600060ff82169050919050565b61147881611462565b82525050565b6000602082019050611493600083018461146f565b92915050565b600080604083850312156114b0576114af6112d6565b5b60006114be8582860161135a565b92505060206114cf85828601611324565b9150509250929050565b6000602082840312156114ef576114ee6112d6565b5b60006114fd8482850161135a565b91505092915050565b60006020828403121561151c5761151b6112d6565b5b600061152a84828501611324565b91505092915050565b61153c816112fb565b82525050565b60006020820190506115576000830184611533565b92915050565b60008060408385031215611574576115736112d6565b5b600061158285828601611324565b925050602061159385828601611324565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115e457607f821691505b6020821081036115f7576115f661159d565b5b50919050565b7f6f6e6c79206f776e65722063616e20646f207468697300000000000000000000600082015250565b600061163360168361122f565b915061163e826115fd565b602082019050919050565b6000602082019050818103600083015261166281611626565b9050919050565b7f63616e6e6f7420756e6c6f636b00000000000000000000000000000000000000600082015250565b600061169f600d8361122f565b91506116aa82611669565b602082019050919050565b600060208201905081810360008301526116ce81611692565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061170f82611339565b915061171a83611339565b9250828201905080821115611732576117316116d5565b5b92915050565b7f616c7265616479206c6f636b6564000000000000000000000000000000000000600082015250565b600061176e600e8361122f565b915061177982611738565b602082019050919050565b6000602082019050818103600083015261179d81611761565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061180060258361122f565b915061180b826117a4565b604082019050919050565b6000602082019050818103600083015261182f816117f3565b9050919050565b600060408201905061184b6000830185611533565b61185860208301846113e5565b9392505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006118bb60248361122f565b91506118c68261185f565b604082019050919050565b600060208201905081810360008301526118ea816118ae565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061194d60228361122f565b9150611958826118f1565b604082019050919050565b6000602082019050818103600083015261197c81611940565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006119df60258361122f565b91506119ea82611983565b604082019050919050565b60006020820190508181036000830152611a0e816119d2565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611a7160238361122f565b9150611a7c82611a15565b604082019050919050565b60006020820190508181036000830152611aa081611a64565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611b0360268361122f565b9150611b0e82611aa7565b604082019050919050565b60006020820190508181036000830152611b3281611af6565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611b6f601f8361122f565b9150611b7a82611b39565b602082019050919050565b60006020820190508181036000830152611b9e81611b62565b905091905056fea26469706673582212204cb6142270608c0f1b82255b2556045f566272152ad71cf9f45b04326002d4fb64736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 822,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 824,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 826,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "decimals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 828,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 830,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "maxSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 832,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 834,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "isLocked",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 836,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "lockedUntil",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 840,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "_balance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 846,
        "contract": "contracts/tokens/ERC2055/ERC2055.sol:ERC2055",
        "label": "_allowances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}