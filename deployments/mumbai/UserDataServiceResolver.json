{
  "address": "0x21E98110b814e3563fd0bc45Fe56607e450e2Cf3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rootNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_uds",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAuthorised",
          "type": "bool"
        }
      ],
      "name": "AuthorisationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "metaid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "keyid",
          "type": "bytes32"
        }
      ],
      "name": "MetaDataAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "identity",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NewAccountCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC721_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDENT_INTERFACE_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METADATA_INTERFACE_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METAVALUE_INTERFACE_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME_INTERFACE_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_INTERFACE_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECLAIM_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REPUTATION_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SETMETA_INTERFACE_ID",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorisations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "authorizeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountWalletAddress",
          "type": "address"
        }
      ],
      "name": "createNewAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountWalletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "accountName",
          "type": "string"
        }
      ],
      "name": "createNewAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "deAuthorizeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "infoOwner",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "identity",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "metasId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserDataServiceResolver.AccountInfo",
          "name": "Info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ident",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "keyStr",
          "type": "string"
        }
      ],
      "name": "metaValue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "key",
              "type": "bytes32"
            },
            {
              "internalType": "enum MetaDataResolver.DataTypes",
              "name": "dType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "dValue",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "editable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "encrypted",
              "type": "bool"
            }
          ],
          "internalType": "struct MetaDataResolver.KeyValMeta",
          "name": "kv",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "nameOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "profile",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootNodeAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        }
      ],
      "name": "setIdent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "keyStr",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dtype",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "editable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "encrypted",
          "type": "bool"
        }
      ],
      "name": "setMetaData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05d3a8750362ea993f7693a78614068cb6bfc39c50a09266b1b88dfaf3a7ec23",
  "receipt": {
    "to": null,
    "from": "0xc956BbcA545e0071Edcd14AE0531F7fa94D33771",
    "contractAddress": "0x21E98110b814e3563fd0bc45Fe56607e450e2Cf3",
    "transactionIndex": 1,
    "gasUsed": "4617961",
    "logsBloom": "0x
    "blockHash": "0x1ef69066944df6dc311785a2aebabd4d3601eac97187f6c603b1069131947ccf",
    "transactionHash": "0x05d3a8750362ea993f7693a78614068cb6bfc39c50a09266b1b88dfaf3a7ec23",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27927448,
        "transactionHash": "0x05d3a8750362ea993f7693a78614068cb6bfc39c50a09266b1b88dfaf3a7ec23",
        "address": "0x21E98110b814e3563fd0bc45Fe56607e450e2Cf3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c956bbca545e0071edcd14ae0531f7fa94d33771"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1ef69066944df6dc311785a2aebabd4d3601eac97187f6c603b1069131947ccf"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27927448,
        "transactionHash": "0x05d3a8750362ea993f7693a78614068cb6bfc39c50a09266b1b88dfaf3a7ec23",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c956bbca545e0071edcd14ae0531f7fa94d33771",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000031c82ef3a4059e000000000000000000000000000000000000000000000000272ba0aeeddc29750000000000000000000000000000000000000000000006c6e058582615b4ea7d00000000000000000000000000000000000000000000000026f9d87ffa3823d70000000000000000000000000000000000000000000006c6e08a20550958f01b",
        "logIndex": 2,
        "blockHash": "0x1ef69066944df6dc311785a2aebabd4d3601eac97187f6c603b1069131947ccf"
      }
    ],
    "blockNumber": 27927448,
    "cumulativeGasUsed": "4669389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1234013c4cafb6363c4f33dbf470110b50cbfe179f5efee9cb9619d44a775486",
    "0xf203AB80223CFCDf62159a3A1fF72113Ef8E9A13"
  ],
  "numDeployments": 1,
  "solcInputHash": "b37100783af3e1d34d97b9965ff388c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_uds\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"AuthorisationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"metaid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyid\",\"type\":\"bytes32\"}],\"name\":\"MetaDataAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identity\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewAccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDENT_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METADATA_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METAVALUE_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECLAIM_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPUTATION_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETMETA_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"authorizeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountWalletAddress\",\"type\":\"address\"}],\"name\":\"createNewAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"accountName\",\"type\":\"string\"}],\"name\":\"createNewAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"deAuthorizeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"infoOwner\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"identity\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"metasId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct UserDataServiceResolver.AccountInfo\",\"name\":\"Info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ident\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"keyStr\",\"type\":\"string\"}],\"name\":\"metaValue\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"enum MetaDataResolver.DataTypes\",\"name\":\"dType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"dValue\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"editable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"encrypted\",\"type\":\"bool\"}],\"internalType\":\"struct MetaDataResolver.KeyValMeta\",\"name\":\"kv\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"nameOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"profile\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootNodeAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"setIdent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"keyStr\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dtype\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"editable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"encrypted\",\"type\":\"bool\"}],\"name\":\"setMetaData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authorisations(bytes32,address,address)\":{\"notice\":\"A mapping of authorisations. An address that is authorised for a profile name may make any changes to the name that the _owner could, but may not update the set of authorisations. (node,  _owner, caller) => isAuthorised\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/uds/UserDataServiceResolver.sol\":\"UserDataServiceResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/controllers/BaseController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nabstract contract BaseController is Context, AccessControlEnumerable, IController {\\n\\n    address public repository;\\n    address public resolver;\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    constructor(address _repo, address _resolver) {\\n        repository = _repo;\\n        resolver = _resolver;\\n        _setupRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function Name() external override returns (string memory) {}\\n\\n    function ID() external override returns (bytes32) {}\\n\\n    function Operator() external override returns (address) {}\\n\\n    function authorise(address user) external override {}\\n\\n    function isAuthorised(address user) external override returns (bool) {}\\n\\n    function execute() external override {}\\n}\",\"keccak256\":\"0x7e23313169e3a00f73193c79109c00f55501547b3a5f7498459e776b9e9ff9bb\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\ninterface IController is IERC165 {\\n\\n    function Name() external returns(string memory);\\n\\n    function ID() external returns(bytes32);\\n\\n    function Operator() external returns(address);\\n\\n    function authorise(address user) external;\\n\\n    function isAuthorised(address user) external returns(bool);\\n\\n    function execute() external;\\n\\n}\",\"keccak256\":\"0x1cb2cc451007f411454847f050b5cfa443f0ff4874879ccd21f6e0a795c7a703\",\"license\":\"MIT\"},\"contracts/interfaces/IEIP721U.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\ninterface IEIP721U is IERC721 {\\n\\n    event UserMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 ts\\n    );\\n    event UserRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 ts\\n    );\\n    event UserUpdated(uint256 indexed id, uint256 ts);\\n\\n    function userCreatedDate(uint256 id) external returns(uint256);\\n    function available(uint256 id) external returns(bool);\\n    function reclaim(uint256 id, address owner) external;\\n    function reputation(uint256 id) external returns(uint256);\\n    function nativeValue(uint256 id) external returns(uint256);\\n\\n\\n\\n}\",\"keccak256\":\"0x38d25699fba3701862d12b4d650e355fb7593da5914eb7eae60c3d62f1cc3036\",\"license\":\"MIT\"},\"contracts/modules/uds/UDS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n\\n/**\\n * @title UDS User Data Service based partly on ENS contracts (especially for resolvers)\\n */\\ncontract UDS  {\\n  \\n    address public _owner; // uds owner\\n    uint256 public chainId;\\n    mapping(bytes32 => address) private _resolvers;\\n\\n    mapping(bytes32 => address) public owner; // profile data owner\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    function _chainId() internal {\\n        chainId = block.chainid;\\n    }\\n\\n    function isPolygon() internal view returns(bool) {\\n        return chainId == 137 || chainId == 80001;\\n    }\\n\\n    function isMainnet() internal view returns(bool) {\\n        return chainId == 1 || chainId == 5;\\n    }\\n\\n    function setResolver(bytes32 rootNode, address resolver) external {\\n        _resolvers[rootNode] = resolver;\\n    }\\n\\n\\n}\",\"keccak256\":\"0x0a2627effdc40a8e38fbd7abd85818d3c19c5e4de5a4b44a1a495c26725f6a7b\",\"license\":\"MIT\"},\"contracts/modules/uds/UserDataServiceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../../resolvers/AllResolvers.sol\\\";\\nimport \\\"./UDS.sol\\\";\\nimport \\\"../../registry/BaseUserRegistry.sol\\\";\\nimport \\\"../../controllers/BaseController.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract UserDataServiceResolver is AllResolvers, BaseUserRegistry {\\n\\n    /**\\n * A mapping of authorisations. An address that is authorised for a profile name\\n * may make any changes to the name that the _owner could, but may not update\\n * the set of authorisations.\\n * (node,  _owner, caller) => isAuthorised\\n */\\n    mapping(bytes32 => mapping(address => mapping(address => bool))) public authorisations;\\n    bytes4 private constant INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n\\n    event AuthorisationChanged(bytes32 indexed profileId, address indexed  _owner, address indexed target, bool isAuthorised);\\n    event NewAccountCreated(bytes32 identity, address indexed  _owner, uint256 tokenId);\\n    event Log(string message);\\n\\n    mapping(address => AccountInfo) private _info;\\n\\n    using Counters for Counters.Counter;\\n\\n   Counters.Counter internal _tokenIndex;\\n\\n    struct AccountInfo {\\n        uint256 tokenId;\\n        bytes32 identity;\\n        address owner;\\n        bytes32 metasId;\\n        uint256 timestamp;\\n    }\\n\\n    constructor(bytes32 rootNode, address _uds) BaseUserRegistry(rootNode, _uds){\\n\\n    }\\n\\n\\n    function setAuthorisation(bytes32 profileId, address target, bool _isAuthorised) internal  {\\n        authorisations[profileId][msg.sender][target] = _isAuthorised;\\n        emit AuthorisationChanged(profileId, msg.sender, target, _isAuthorised);\\n    }\\n\\n    function isAuthorised(bytes32 profileId) internal view returns (bool) {\\n        address _owner = uds.owner(profileId);\\n        return _owner == msg.sender || authorisations[profileId][_owner][msg.sender];\\n    }\\n\\n\\n    function multicall(bytes[] calldata data) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    function createNewAccount(address _accountWalletAddress, string memory accountName) public  {\\n         require(_createNewAccount(_accountWalletAddress), \\\"error registering new account\\\");\\n        setOptionalName(_accountWalletAddress, _tokenIndex.current(), accountName);\\n        _tokenIndex.increment();\\n\\n\\n    }\\n\\n    function createNewAccount(address _accountWalletAddress) public {\\n        emit Log(\\\"create new account requested\\\");\\n        require(_createNewAccount(_accountWalletAddress), \\\"error registering new account\\\");\\n_tokenIndex.increment();\\n    }\\n\\n    function _createNewAccount(address accountOwner) internal returns (bool) {\\n\\n        super._register(_tokenIndex.current(), accountOwner, true);\\n        emit Log(\\\"super._register is successful... requesting ident\\\");\\n        bytes32 _ident = sha256(abi.encodePacked(_tokenIndex.current(), accountOwner));\\n        super.setIdent(_tokenIndex.current(), _ident);\\n\\n        bytes32 metasId = setNewMetaDatas(_tokenIndex.current(), accountOwner);\\n        AccountInfo memory Info = setAccountInfoRecord(_tokenIndex.current(), _ident, accountOwner, metasId);\\n        emit NewAccountCreated(_ident, accountOwner, _tokenIndex.current());\\n\\n        return true;\\n    }\\n\\n    function setAccountInfoRecord(uint256 tokenId,\\n        bytes32 identity,\\n        address  _owner,\\n        bytes32 metasId) internal returns (AccountInfo memory){\\n        AccountInfo memory Info = AccountInfo(tokenId, identity,  _owner, metasId, block.timestamp);\\n        _info[_owner] = Info;\\n        return Info;\\n    }\\n\\n    function getAccountInfo(address infoOwner) external view returns(AccountInfo memory Info) {\\n        Info = _info[infoOwner];\\n    }\\n\\n    function concat(string memory _x, string memory _y) pure internal returns (string memory) {\\n        bytes memory _xBytes = bytes(_x);\\n        bytes memory _yBytes = bytes(_y);\\n\\n        string memory _tmpValue = new string(_xBytes.length + _yBytes.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint i;\\n        uint j;\\n\\n        for(i=0;i<_xBytes.length;i++) {\\n            _newValue[j++] = _xBytes[i];\\n        }\\n\\n        for(i=0;i<_yBytes.length;i++) {\\n            _newValue[j++] = _yBytes[i];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n    public\\n    view\\n    override(ERC721, AllResolvers)\\n    returns (bool)\\n    {\\n\\n        return super.supportsInterface(interfaceID);\\n    }\\n\\n\\n}\",\"keccak256\":\"0x9af2cbeec5d6f3778828b8e8db8fcf381ae1579a629b5444a8f420b52343a447\",\"license\":\"MIT\"},\"contracts/registry/BaseUserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IEIP721U.sol\\\";\\nimport \\\"../modules/uds/UDS.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract BaseUserRegistry is ERC721, Ownable {\\n\\n    mapping(address => bool) public controllers;\\n\\n    mapping(uint256 => mapping(uint256 => bool))  private registrationQueue;\\n\\n\\n    UDS internal uds;\\n    uint256 internal index;\\n    bytes32 public rootNodeAddress; // will be used in layer 2\\n\\n    bytes4 public constant ERC721_ID =\\n    bytes4(\\n        keccak256(\\\"balanceOf(address)\\\") ^\\n        keccak256(\\\"ownerOf(uint256)\\\") ^\\n        keccak256(\\\"approve(address,uint256)\\\") ^\\n        keccak256(\\\"getApproved(uint256)\\\") ^\\n        keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\n        keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\n        keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\n        keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\n        keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\") ^\\n        keccak256(\\\"register(address)\\\")\\n    );\\n    bytes4 public constant RECLAIM_ID = bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\n    bytes4 public constant REPUTATION_ID = bytes4(keccak256(\\\"reputation(uint256)\\\"));\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n    internal\\n    view\\n    override\\n    returns (bool)\\n    {\\n        address _owner = ownerOf(tokenId);\\n        return (spender == _owner ||\\n        getApproved(tokenId) == spender ||\\n        isApprovedForAll(_owner, spender));\\n    }\\n\\n\\n    constructor(bytes32 rootNode, address _uds) ERC721(\\\"USER TOKEN AKX3\\\",\\\"AKXU\\\"){\\n        uds = UDS(_uds);\\n        rootNodeAddress = rootNode;\\n        index = 0;\\n    }\\n\\n    modifier onlyLive() {\\n        require(uds.owner(rootNodeAddress) == msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(controllers[msg.sender]);\\n        _;\\n    }\\n\\n    function authorizeController(address controller) external  onlyOwner {\\n        controllers[controller] = true;\\n    }\\n\\n    function deAuthorizeController(address controller) external  onlyOwner {\\n        controllers[controller] = false;\\n    }\\n\\n    function setResolver(address resolver) external  onlyOwner {\\n        uds.setResolver(rootNodeAddress, resolver);\\n    }\\n\\n\\n\\n\\n\\n    function _register(uint256 tokenId, address _owner, bool update) internal  returns (uint256) {\\n\\n        index += 1;\\n\\n        registrationQueue[index][tokenId] = true;\\n\\n        super._safeMint(_owner, tokenId);\\n\\n        registrationQueue[index][tokenId] = false;\\n\\n\\n        return tokenId;\\n\\n    }\\n\\n\\n}\",\"keccak256\":\"0x8753a8d57b2d5fbe4f5d13ba2aad19744b2b79bbe188bd1d66f7bfb98ef3aafc\",\"license\":\"MIT\"},\"contracts/resolvers/AllResolvers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IdentResolver.sol\\\";\\nimport \\\"./NameResolver.sol\\\";\\nimport \\\"./ProfileResolver.sol\\\";\\nimport \\\"./MetaDataResolver.sol\\\";\\n\\nabstract contract AllResolvers is IdentResolver, NameResolver, ProfileResolver, MetaDataResolver {\\n  function supportsInterface(bytes4 interfaceID) virtual override public view returns(bool) {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\",\"keccak256\":\"0x46226a216c4c2857514a1e30e07636f79ebe62ff908ae4d2517c7934f19ae801\",\"license\":\"MIT\"},\"contracts/resolvers/BaseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/BytesUtils.sol\\\";\\n\\n\\nabstract contract BaseResolver is ERC165, BytesUtils {\\n\\nbytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n\\n\\n}\",\"keccak256\":\"0xbee7db887706648e4c7b738340c7273c68ddd312187a530eb60a40bbe106eb40\",\"license\":\"MIT\"},\"contracts/resolvers/IdentResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./BaseResolver.sol\\\";\\n\\nabstract contract IdentResolver is BaseResolver {\\n   \\n   bytes4 constant public IDENT_INTERFACE_ID = 0x0e2f9f10;\\n\\n   mapping(uint256 => bytes32) private _idents; // external user identifier for ie database\\n    mapping(uint256 => bool) private _idExists;\\n   \\n    function ident(uint256 tokenId) external view returns (bytes32) {\\n        return _idents[tokenId];\\n    }\\n\\n    function setIdent(uint256 tokenId, bytes32 identifier) public {\\n        require(_idExists[tokenId] != true, \\\"ident already set\\\");\\n        _idents[tokenId] = identifier;\\n    }\\n\\n\\n}\",\"keccak256\":\"0x624de2feda171030392efde174f1f5ab2b43babe5a20d35ea84aaa9cf5810dca\",\"license\":\"MIT\"},\"contracts/resolvers/MetaDataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./BaseResolver.sol\\\";\\n\\nabstract contract MetaDataResolver is BaseResolver {\\n\\n   bytes4 constant public METADATA_INTERFACE_ID = 0xe3684e39;\\n   bytes4 constant public METAVALUE_INTERFACE_ID = 0x4dc34682;\\n   bytes4 constant public SETMETA_INTERFACE_ID = 0x08730f07;\\n\\n\\n   mapping(uint256 => bytes32) private _metadataIds;\\n   mapping(bytes32 => bool) private _idExists;\\n   mapping(bytes32 => mapping(string => bool)) private _keysAvailable;\\n   mapping(string => bytes32) private _keyNames;\\n   mapping(string => bool) private _keyExists;\\n   mapping(bytes32 => mapping(bytes32 => bytes)) private _keyValMetas;\\n   mapping(uint256 => address) private _metaOwners;\\n   \\n    enum DataTypes {\\n        PROFILE_STRING,\\n        IMAGE,\\n        HASH,\\n        SELECTION,\\n        URI,\\n        WALLET,\\n        NO_RENDER\\n    }\\n\\n   struct KeyValMeta {\\n    bytes32 key;\\n    DataTypes dType;\\n    bytes dValue;\\n    bool editable;\\n    bool encrypted;\\n   }\\n\\n   event MetaDataAdded(uint256 tokenid, bytes32 metaid, bytes32 keyid);\\n\\n\\nfunction metadata(uint256 tokenId) external view returns(bytes32) {\\n    return _metadataIds[tokenId];\\n}\\n\\nfunction getMetaValue(bytes32 keyId, bytes32 id) internal view returns(bytes memory) {\\n    return _keyValMetas[keyId][id];\\n}\\n\\nfunction metaValue(uint256 tokenId, string memory keyStr) external view returns(KeyValMeta memory kv) {\\n    bytes32 id = this.metadata(tokenId);\\n    bytes memory bVals = getMetaValue(metaKey(id, keyStr), id);\\n    kv = abi.decode(bVals, (KeyValMeta));\\n}\\n\\nfunction metaKey(bytes32 metaId, string memory keyStr) internal view returns(bytes32) {\\n    if(!isKeyAvailable(metaId, keyStr)) {\\n        revert(\\\"invalid key requested\\\");\\n    }\\n    return _keyNames[keyStr];\\n}\\n\\nfunction isKeyAvailable(bytes32 metaId, string memory keyStr) internal view returns(bool) {\\n    return _keysAvailable[metaId][keyStr] == true;\\n}\\n\\nfunction setMetaData(uint256 tokenId, string memory keyStr, uint _dtype, bytes memory value, bool editable, bool encrypted) external {\\n    require(msg.sender == _metaOwners[tokenId], \\\"only owner can set metas\\\");\\n    bytes32 id = _metadataIds[tokenId];\\n    if(_keyExists[keyStr] != true) {\\n        _keyExists[keyStr] = true;\\n        _keyNames[keyStr] = keccak256(abi.encodePacked(keyStr));\\n    }\\n    bytes32 keyId = _keyNames[keyStr];\\n    KeyValMeta memory kv = KeyValMeta(keyId, DataTypes(_dtype), abi.encode(value), editable, encrypted);\\n    _keyValMetas[id][keyId] = abi.encode(kv);\\n    emit MetaDataAdded(tokenId, id, keyId);\\n}\\n\\n    function setNewMetaDatas(uint256 tokenId, address tOwner) internal returns(bytes32) {\\n        _metaOwners[tokenId] = tOwner;\\n        bytes32 id = keccak256(abi.encode(tokenId));\\n        if(_idExists[id] != true) {\\n            _idExists[id] = true;\\n            _metadataIds[tokenId] = id;\\n        }\\n        return id;\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0x4a453426f39105a73f0cf8c08ff3ad10ef3b3d448d4316e22e628667a994a8b8\",\"license\":\"MIT\"},\"contracts/resolvers/NameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./BaseResolver.sol\\\";\\n\\nabstract contract NameResolver is BaseResolver {\\n   \\n   bytes4 constant public NAME_INTERFACE_ID = 0x00ad800c;\\n\\n   mapping(uint256 => string) private _names; // external user identifier\\n    mapping(address => string) private addressToNames;\\n    mapping(string => address) private nameToAddress;\\n   \\n    function getName(uint256 tokenId) external view returns (string memory) {\\n        return _names[tokenId];\\n    }\\n\\n    function getName(address _owner) external view returns (string memory) {\\n        return addressToNames[_owner];\\n    }\\n\\n    function getName() external view returns (string memory) {\\n        return addressToNames[msg.sender];\\n    }\\n\\n    function nameOwner(string memory _name) external view returns (address) {\\n        return nameToAddress[_name];\\n    }\\n\\n\\n    function setOptionalName(address owner, uint256 tokenId, string memory accountName) internal {\\n        _names[tokenId] = accountName;\\n        addressToNames[owner] = accountName;\\n        nameToAddress[accountName] = owner;\\n    }\\n\\n}\",\"keccak256\":\"0x3a24e56280221fae4f31730197f5cf978187d77abcce91bb3dcad4f2346dc2af\",\"license\":\"MIT\"},\"contracts/resolvers/ProfileResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./BaseResolver.sol\\\";\\n\\nabstract contract ProfileResolver is BaseResolver {\\n\\n   bytes4 constant public PROFILE_INTERFACE_ID = 0x72cd2b1a;\\n\\n   mapping(uint256 => bytes32) private _profiles;\\n    mapping(uint256 => bool) private _profileExists;\\n\\n    function profile(uint256 tokenId) public view returns(bytes32) {\\n        return _profiles[tokenId];\\n    }\\n\\n    function setProfileID(uint256 tokenId) internal returns(bytes32) {\\n        require(_profileExists[tokenId] != true, \\\"profile already exists\\\");\\n        bytes32 id = _profiles[tokenId] = keccak256(abi.encodePacked(tokenId, PROFILE_INTERFACE_ID));\\n        return id;\\n    }\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x9b82b1329b9a52c27271db5773a06aa9dd7c1a17fbe597091061de272d5fc73b\",\"license\":\"MIT\"},\"contracts/utils/BytesUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nabstract contract BytesUtils {\\n     function bytesToAddress(bytes memory b) internal pure returns(address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns(bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\",\"keccak256\":\"0x115788e3d0a39dcf22f2a01c65cd142d68141f1b16d958484d34359d4eb87e08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620056bc380380620056bc8339818101604052810190620000379190620002b8565b81816040518060400160405280600f81526020017f5553455220544f4b454e20414b583300000000000000000000000000000000008152506040518060400160405280600481526020017f414b58550000000000000000000000000000000000000000000000000000000081525081600e9081620000b6919062000579565b5080600f9081620000c8919062000579565b505050620000eb620000df6200014560201b60201c565b6200014d60201b60201c565b80601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160198190555060006018819055505050505062000660565b600033905090565b6000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002808262000253565b9050919050565b620002928162000273565b81146200029e57600080fd5b50565b600081519050620002b28162000287565b92915050565b60008060408385031215620002d257620002d162000213565b5b6000620002e2858286016200023c565b9250506020620002f585828601620002a1565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038157607f821691505b60208210810362000397576200039662000339565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003c2565b6200040d8683620003c2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200045a620004546200044e8462000425565b6200042f565b62000425565b9050919050565b6000819050919050565b620004768362000439565b6200048e620004858262000461565b848454620003cf565b825550505050565b600090565b620004a562000496565b620004b28184846200046b565b505050565b5b81811015620004da57620004ce6000826200049b565b600181019050620004b8565b5050565b601f8211156200052957620004f3816200039d565b620004fe84620003b2565b810160208510156200050e578190505b620005266200051d85620003b2565b830182620004b7565b50505b505050565b600082821c905092915050565b60006200054e600019846008026200052e565b1980831691505092915050565b60006200056983836200053b565b9150826002028217905092915050565b6200058482620002ff565b67ffffffffffffffff811115620005a0576200059f6200030a565b5b620005ac825462000368565b620005b9828285620004de565b600060209050601f831160018114620005f15760008415620005dc578287015190505b620005e885826200055b565b86555062000658565b601f19841662000601866200039d565b60005b828110156200062b5784890151825560018201915060208501945060208101905062000604565b868310156200064b578489015162000647601f8916826200053b565b8355505b6001600288020188555050505b505050505050565b61504c80620006706000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c806370a0823111610151578063c87b56dd116100c3578063e985e9c511610087578063e985e9c5146107c1578063eca02763146107f1578063f2fde38b1461080d578063f31a125214610829578063f86bc87914610847578063fe05c3d91461087757610274565b8063c87b56dd146106e3578063da8c229e14610713578063e08670bf14610743578063e18c3a0614610761578063e3684e391461079157610274565b80638da5cb5b116101155780638da5cb5b1461063357806395d89b41146106515780639e502b581461066f578063a22cb4651461068d578063b88d4fde146106a9578063bbe39bf7146106c557610274565b806370a082311461057b578063715018a6146105ab57806372cd2b1a146105b55780637b510fe8146105e55780637fc0a9e51461061557610274565b806334cf6659116101ea5780634f96baf1116101ae5780634f96baf1146104955780635258e560146104b157806359de0deb146104cf5780635fd4b08a146104eb5780636352211e1461051b5780636b8ff5741461054b57610274565b806334cf6659146103f35780633561ff581461041157806342842e0e1461042d5780634dc34682146104495780634e543b261461047957610274565b8063095ea7b31161023c578063095ea7b3146103315780630e2f9f101461034d57806317d7de7c1461037d57806323b872dd1461039b57806327b85035146103b75780632ed55dec146103d557610274565b806301ffc9a714610279578063044c6c54146102a957806306fdde03146102c7578063081812fc146102e557806308730f0714610315575b600080fd5b610293600480360381019061028e9190613154565b610893565b6040516102a0919061319c565b60405180910390f35b6102b16108a5565b6040516102be91906131c6565b60405180910390f35b6102cf6108b0565b6040516102dc9190613271565b60405180910390f35b6102ff60048036038101906102fa91906132c9565b610942565b60405161030c9190613337565b60405180910390f35b61032f600480360381019061032a9190613554565b610988565b005b61034b60048036038101906103469190613645565b610c25565b005b610367600480360381019061036291906132c9565b610d3c565b604051610374919061369e565b60405180910390f35b610385610d58565b6040516103929190613271565b60405180910390f35b6103b560048036038101906103b091906136b9565b610e27565b005b6103bf610e87565b6040516103cc91906131c6565b60405180910390f35b6103dd610e92565b6040516103ea91906131c6565b60405180910390f35b6103fb610fe8565b60405161040891906131c6565b60405180910390f35b61042b60048036038101906104269190613738565b610ff2565b005b610447600480360381019061044291906136b9565b611074565b005b610463600480360381019061045e9190613778565b611094565b6040516104709190613934565b60405180910390f35b610493600480360381019061048e9190613956565b61114f565b005b6104af60048036038101906104aa9190613956565b6111eb565b005b6104b9611275565b6040516104c691906131c6565b60405180910390f35b6104e960048036038101906104e49190613956565b611280565b005b61050560048036038101906105009190613956565b6112e3565b6040516105129190613271565b60405180910390f35b610535600480360381019061053091906132c9565b6113b4565b6040516105429190613337565b60405180910390f35b610565600480360381019061056091906132c9565b611465565b6040516105729190613271565b60405180910390f35b61059560048036038101906105909190613956565b61150a565b6040516105a29190613992565b60405180910390f35b6105b36115c1565b005b6105cf60048036038101906105ca91906132c9565b6115d5565b6040516105dc919061369e565b60405180910390f35b6105ff60048036038101906105fa9190613956565b6115f2565b60405161060c9190613a33565b60405180910390f35b61061d6116c9565b60405161062a91906131c6565b60405180910390f35b61063b6116d4565b6040516106489190613337565b60405180910390f35b6106596116fe565b6040516106669190613271565b60405180910390f35b610677611790565b60405161068491906131c6565b60405180910390f35b6106a760048036038101906106a29190613a4e565b6117b4565b005b6106c360048036038101906106be9190613a8e565b6117ca565b005b6106cd61182c565b6040516106da919061369e565b60405180910390f35b6106fd60048036038101906106f891906132c9565b611832565b60405161070a9190613271565b60405180910390f35b61072d60048036038101906107289190613956565b61189a565b60405161073a919061319c565b60405180910390f35b61074b6118ba565b60405161075891906131c6565b60405180910390f35b61077b60048036038101906107769190613b11565b6118c5565b6040516107889190613337565b60405180910390f35b6107ab60048036038101906107a691906132c9565b61190d565b6040516107b8919061369e565b60405180910390f35b6107db60048036038101906107d69190613b5a565b61192a565b6040516107e8919061319c565b60405180910390f35b61080b60048036038101906108069190613956565b6119be565b005b61082760048036038101906108229190613956565b611a21565b005b610831611aa4565b60405161083e91906131c6565b60405180910390f35b610861600480360381019061085c9190613b9a565b611ac8565b60405161086e919061319c565b60405180910390f35b610891600480360381019061088c9190613bed565b611b04565b005b600061089e82611b6e565b9050919050565b6308730f0760e01b81565b6060600e80546108bf90613c78565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb90613c78565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b5050505050905090565b600061094d82611c50565b6012600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600d600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090613cf5565b60405180910390fd5b60006007600088815260200190815260200160002054905060011515600b87604051610a559190613d51565b908152602001604051809103902060009054906101000a900460ff16151514610af9576001600b87604051610a8a9190613d51565b908152602001604051809103902060006101000a81548160ff02191690831515021790555085604051602001610ac09190613d51565b60405160208183030381529060405280519060200120600a87604051610ae69190613d51565b9081526020016040518091039020819055505b6000600a87604051610b0b9190613d51565b908152602001604051809103902054905060006040518060a00160405280838152602001886006811115610b4257610b416137e3565b5b6006811115610b5457610b536137e3565b5b815260200187604051602001610b6a9190613db2565b60405160208183030381529060405281526020018615158152602001851515815250905080604051602001610b9f9190613934565b604051602081830303815290604052600c600085815260200190815260200160002060008481526020019081526020016000209081610bde9190613f80565b507f0e7d31702c053db64a9bb1c5fa3ceeda422af277139cc645fccdcf87ad23970c898484604051610c1293929190614052565b60405180910390a1505050505050505050565b6000610c30826113b4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c97906140fb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610cbf611c9b565b73ffffffffffffffffffffffffffffffffffffffff161480610cee5750610ced81610ce8611c9b565b61192a565b5b610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d249061418d565b60405180910390fd5b610d378383611ca3565b505050565b6000806000838152602001908152602001600020549050919050565b6060600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610da490613c78565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd090613c78565b8015610e1d5780601f10610df257610100808354040283529160200191610e1d565b820191906000526020600020905b815481529060010190602001808311610e0057829003601f168201915b5050505050905090565b610e38610e32611c9b565b82611d5c565b610e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6e9061421f565b60405180910390fd5b610e82838383611df1565b505050565b630e2f9f1060e01b81565b7f4420e4869750c98a56ac621854d2d00e598698ac87193cdfcbb6ed1164e9cbcd7fb88d4fde60196325a28bb7f99a2582e0b46de55b18761e960c14ad7a320994657f42842e0eb38857a7775b4e7364b2775df7325074d088e7fb39590cd6281184ed7f23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b7fe985e9c5c6636c6879256001057b28ccac7718ef0ac56553ff9b926452cab8a37fa22cb4651ab9570f89bb516380c40ce76762284fb1f21337ceaf6adab99e7d4a7f081812fc55e34fdc7cf5d8b5cf4e3621fa6423fde952ec6ab24afdc0d85c0b2e7f095ea7b334ae44009aa867bfb386f5c3b4b443ac6f0ee573fa91c4608fbadfba7f6352211e6566aa027e75ac9dbf2423197fbd9b82b9d981a3ab367d355866aa1c7f70a08231b98ef4ca268c9cc3f6b4590e4bfec28280db06bb5d45e689f2a360be18181818181818181881565b62ad800c60e01b81565b600115156001600084815260200190815260200160002060009054906101000a900460ff16151503611059576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110509061428b565b60405180910390fd5b80600080848152602001908152602001600020819055505050565b61108f838383604051806020016040528060008152506117ca565b505050565b61109c613055565b60003073ffffffffffffffffffffffffffffffffffffffff1663e3684e39856040518263ffffffff1660e01b81526004016110d79190613992565b602060405180830381865afa1580156110f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111891906142c0565b9050600061112f6111298386612057565b836120c9565b9050808060200190518101906111459190614449565b9250505092915050565b611157612180565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a601954836040518363ffffffff1660e01b81526004016111b6929190614492565b600060405180830381600087803b1580156111d057600080fd5b505af11580156111e4573d6000803e3d6000fd5b5050505050565b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab60405161121890614507565b60405180910390a1611229816121fe565b611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90614573565b60405180910390fd5b611272601c612371565b50565b63e3684e3960e01b81565b611288612180565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461132f90613c78565b80601f016020809104026020016040519081016040528092919081815260200182805461135b90613c78565b80156113a85780601f1061137d576101008083540402835291602001916113a8565b820191906000526020600020905b81548152906001019060200180831161138b57829003601f168201915b50505050509050919050565b6000806010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361145c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611453906145df565b60405180910390fd5b80915050919050565b606060026000838152602001908152602001600020805461148590613c78565b80601f01602080910402602001604051908101604052809291908181526020018280546114b190613c78565b80156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b50505050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361157a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157190614671565b60405180910390fd5b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6115c9612180565b6115d36000612387565b565b600060056000838152602001908152602001600020549050919050565b6115fa61309d565b601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050919050565b6372cd2b1a60e01b81565b6000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600f805461170d90613c78565b80601f016020809104026020016040519081016040528092919081815260200182805461173990613c78565b80156117865780601f1061175b57610100808354040283529160200191611786565b820191906000526020600020905b81548152906001019060200180831161176957829003601f168201915b5050505050905090565b7f28ed4f6c74b219a5819055dfbcd2f1837c046c364cf01fabb6799e4f440d6f1381565b6117c66117bf611c9b565b838361244d565b5050565b6117db6117d5611c9b565b83611d5c565b61181a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118119061421f565b60405180910390fd5b611826848484846125b9565b50505050565b60195481565b606061183d82611c50565b6000611847612615565b905060008151116118675760405180602001604052806000815250611892565b806118718461262c565b604051602001611882929190614691565b6040516020818303038152906040525b915050919050565b60156020528060005260406000206000915054906101000a900460ff1681565b634dc3468260e01b81565b60006004826040516118d79190613d51565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060076000838152602001908152602001600020549050919050565b6000601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6119c6612180565b6001601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b611a29612180565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8f90614727565b60405180910390fd5b611aa181612387565b50565b7f56c708d57e33cc71507c0ab2242d1bed8052197860a551d2b84fd7e949ef74fb81565b601a602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b611b0d826121fe565b611b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4390614573565b60405180910390fd5b611b6082611b5a601c61278c565b8361279a565b611b6a601c612371565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c3957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c495750611c488261286a565b5b9050919050565b611c598161287c565b611c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8f906145df565b60405180910390fd5b50565b600033905090565b816012600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d16836113b4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611d68836113b4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611dd757508373ffffffffffffffffffffffffffffffffffffffff16611dbf84610942565b73ffffffffffffffffffffffffffffffffffffffff16145b80611de85750611de7818561192a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e11826113b4565b73ffffffffffffffffffffffffffffffffffffffff1614611e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5e906147b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecd9061484b565b60405180910390fd5b611ee18383836128e8565b611eec600082611ca3565b6001601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f3c919061489a565b925050819055506001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f9391906148ce565b92505081905550816010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120528383836128ed565b505050565b600061206383836128f2565b6120a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120999061494e565b60405180910390fd5b600a826040516120b29190613d51565b908152602001604051809103902054905092915050565b6060600c6000848152602001908152602001600020600083815260200190815260200160002080546120fa90613c78565b80601f016020809104026020016040519081016040528092919081815260200182805461212690613c78565b80156121735780601f1061214857610100808354040283529160200191612173565b820191906000526020600020905b81548152906001019060200180831161215657829003601f168201915b5050505050905092915050565b612188611c9b565b73ffffffffffffffffffffffffffffffffffffffff166121a66116d4565b73ffffffffffffffffffffffffffffffffffffffff16146121fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f3906149ba565b60405180910390fd5b565b600061221561220d601c61278c565b836001612940565b507fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab60405161224390614a4c565b60405180910390a160006002612259601c61278c565b8460405160200161226b929190614ad5565b6040516020818303038152906040526040516122879190614b3d565b602060405180830381855afa1580156122a4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906122c791906142c0565b90506122dc6122d6601c61278c565b82610ff2565b60006122f16122eb601c61278c565b856129ee565b9050600061230a612302601c61278c565b848785612ae8565b90508473ffffffffffffffffffffffffffffffffffffffff167f06b635dfd6a725f6b4ed22d2d7e15afd9abc86976825dd8678e98e2abcd3dbab8461234f601c61278c565b60405161235d929190614b54565b60405180910390a260019350505050919050565b6001816000016000828254019250508190555050565b6000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b290614bc9565b60405180910390fd5b80601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125ac919061319c565b60405180910390a3505050565b6125c4848484611df1565b6125d084848484612bef565b61260f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260690614c5b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008203612673576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612787565b600082905060005b600082146126a557808061268e90614c7b565b915050600a8261269e9190614cf2565b915061267b565b60008167ffffffffffffffff8111156126c1576126c061335c565b5b6040519080825280601f01601f1916602001820160405280156126f35781602001600182028036833780820191505090505b5090505b600085146127805760018261270c919061489a565b9150600a8561271b9190614d23565b603061272791906148ce565b60f81b81838151811061273d5761273c614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127799190614cf2565b94506126f7565b8093505050505b919050565b600081600001549050919050565b806002600084815260200190815260200160002090816127ba9190614dde565b5080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816128079190614dde565b50826004826040516128199190613d51565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061287582612d76565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006001151560096000858152602001908152602001600020836040516129199190613d51565b908152602001604051809103902060009054906101000a900460ff16151514905092915050565b600060016018600082825461295591906148ce565b925050819055506001601660006018548152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055506129a58385612de0565b6000601660006018548152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055508390509392505050565b600081600d600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600083604051602001612a559190613992565b604051602081830303815290604052805190602001209050600115156008600083815260200190815260200160002060009054906101000a900460ff16151514612ade5760016008600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508060076000868152602001908152602001600020819055505b8091505092915050565b612af061309d565b60006040518060a001604052808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815250905080601b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015590505080915050949350505050565b6000612c108473ffffffffffffffffffffffffffffffffffffffff16612dfe565b15612d69578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612c39611c9b565b8786866040518563ffffffff1660e01b8152600401612c5b9493929190614eb0565b6020604051808303816000875af1925050508015612c9757506040513d601f19601f82011682018060405250810190612c949190614f11565b60015b612d19573d8060008114612cc7576040519150601f19603f3d011682016040523d82523d6000602084013e612ccc565b606091505b506000815103612d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0890614c5b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d6e565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612dfa828260405180602001604052806000815250612e21565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b612e2b8383612e7c565b612e386000848484612bef565b612e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6e90614c5b565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee290614f8a565b60405180910390fd5b612ef48161287c565b15612f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2b90614ff6565b60405180910390fd5b612f40600083836128e8565b6001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f9091906148ce565b92505081905550816010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613051600083836128ed565b5050565b6040518060a00160405280600080191681526020016000600681111561307e5761307d6137e3565b5b8152602001606081526020016000151581526020016000151581525090565b6040518060a001604052806000815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613131816130fc565b811461313c57600080fd5b50565b60008135905061314e81613128565b92915050565b60006020828403121561316a576131696130f2565b5b60006131788482850161313f565b91505092915050565b60008115159050919050565b61319681613181565b82525050565b60006020820190506131b1600083018461318d565b92915050565b6131c0816130fc565b82525050565b60006020820190506131db60008301846131b7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561321b578082015181840152602081019050613200565b60008484015250505050565b6000601f19601f8301169050919050565b6000613243826131e1565b61324d81856131ec565b935061325d8185602086016131fd565b61326681613227565b840191505092915050565b6000602082019050818103600083015261328b8184613238565b905092915050565b6000819050919050565b6132a681613293565b81146132b157600080fd5b50565b6000813590506132c38161329d565b92915050565b6000602082840312156132df576132de6130f2565b5b60006132ed848285016132b4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613321826132f6565b9050919050565b61333181613316565b82525050565b600060208201905061334c6000830184613328565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61339482613227565b810181811067ffffffffffffffff821117156133b3576133b261335c565b5b80604052505050565b60006133c66130e8565b90506133d2828261338b565b919050565b600067ffffffffffffffff8211156133f2576133f161335c565b5b6133fb82613227565b9050602081019050919050565b82818337600083830152505050565b600061342a613425846133d7565b6133bc565b90508281526020810184848401111561344657613445613357565b5b613451848285613408565b509392505050565b600082601f83011261346e5761346d613352565b5b813561347e848260208601613417565b91505092915050565b600067ffffffffffffffff8211156134a2576134a161335c565b5b6134ab82613227565b9050602081019050919050565b60006134cb6134c684613487565b6133bc565b9050828152602081018484840111156134e7576134e6613357565b5b6134f2848285613408565b509392505050565b600082601f83011261350f5761350e613352565b5b813561351f8482602086016134b8565b91505092915050565b61353181613181565b811461353c57600080fd5b50565b60008135905061354e81613528565b92915050565b60008060008060008060c08789031215613571576135706130f2565b5b600061357f89828a016132b4565b965050602087013567ffffffffffffffff8111156135a05761359f6130f7565b5b6135ac89828a01613459565b95505060406135bd89828a016132b4565b945050606087013567ffffffffffffffff8111156135de576135dd6130f7565b5b6135ea89828a016134fa565b93505060806135fb89828a0161353f565b92505060a061360c89828a0161353f565b9150509295509295509295565b61362281613316565b811461362d57600080fd5b50565b60008135905061363f81613619565b92915050565b6000806040838503121561365c5761365b6130f2565b5b600061366a85828601613630565b925050602061367b858286016132b4565b9150509250929050565b6000819050919050565b61369881613685565b82525050565b60006020820190506136b3600083018461368f565b92915050565b6000806000606084860312156136d2576136d16130f2565b5b60006136e086828701613630565b93505060206136f186828701613630565b9250506040613702868287016132b4565b9150509250925092565b61371581613685565b811461372057600080fd5b50565b6000813590506137328161370c565b92915050565b6000806040838503121561374f5761374e6130f2565b5b600061375d858286016132b4565b925050602061376e85828601613723565b9150509250929050565b6000806040838503121561378f5761378e6130f2565b5b600061379d858286016132b4565b925050602083013567ffffffffffffffff8111156137be576137bd6130f7565b5b6137ca85828601613459565b9150509250929050565b6137dd81613685565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110613823576138226137e3565b5b50565b600081905061383482613812565b919050565b600061384482613826565b9050919050565b61385481613839565b82525050565b600081519050919050565b600082825260208201905092915050565b60006138818261385a565b61388b8185613865565b935061389b8185602086016131fd565b6138a481613227565b840191505092915050565b6138b881613181565b82525050565b600060a0830160008301516138d660008601826137d4565b5060208301516138e9602086018261384b565b50604083015184820360408601526139018282613876565b915050606083015161391660608601826138af565b50608083015161392960808601826138af565b508091505092915050565b6000602082019050818103600083015261394e81846138be565b905092915050565b60006020828403121561396c5761396b6130f2565b5b600061397a84828501613630565b91505092915050565b61398c81613293565b82525050565b60006020820190506139a76000830184613983565b92915050565b6139b681613293565b82525050565b6139c581613316565b82525050565b60a0820160008201516139e160008501826139ad565b5060208201516139f460208501826137d4565b506040820151613a0760408501826139bc565b506060820151613a1a60608501826137d4565b506080820151613a2d60808501826139ad565b50505050565b600060a082019050613a4860008301846139cb565b92915050565b60008060408385031215613a6557613a646130f2565b5b6000613a7385828601613630565b9250506020613a848582860161353f565b9150509250929050565b60008060008060808587031215613aa857613aa76130f2565b5b6000613ab687828801613630565b9450506020613ac787828801613630565b9350506040613ad8878288016132b4565b925050606085013567ffffffffffffffff811115613af957613af86130f7565b5b613b05878288016134fa565b91505092959194509250565b600060208284031215613b2757613b266130f2565b5b600082013567ffffffffffffffff811115613b4557613b446130f7565b5b613b5184828501613459565b91505092915050565b60008060408385031215613b7157613b706130f2565b5b6000613b7f85828601613630565b9250506020613b9085828601613630565b9150509250929050565b600080600060608486031215613bb357613bb26130f2565b5b6000613bc186828701613723565b9350506020613bd286828701613630565b9250506040613be386828701613630565b9150509250925092565b60008060408385031215613c0457613c036130f2565b5b6000613c1285828601613630565b925050602083013567ffffffffffffffff811115613c3357613c326130f7565b5b613c3f85828601613459565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613c9057607f821691505b602082108103613ca357613ca2613c49565b5b50919050565b7f6f6e6c79206f776e65722063616e20736574206d657461730000000000000000600082015250565b6000613cdf6018836131ec565b9150613cea82613ca9565b602082019050919050565b60006020820190508181036000830152613d0e81613cd2565b9050919050565b600081905092915050565b6000613d2b826131e1565b613d358185613d15565b9350613d458185602086016131fd565b80840191505092915050565b6000613d5d8284613d20565b915081905092915050565b600082825260208201905092915050565b6000613d848261385a565b613d8e8185613d68565b9350613d9e8185602086016131fd565b613da781613227565b840191505092915050565b60006020820190508181036000830152613dcc8184613d79565b905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613e367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613df9565b613e408683613df9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613e7d613e78613e7384613293565b613e58565b613293565b9050919050565b6000819050919050565b613e9783613e62565b613eab613ea382613e84565b848454613e06565b825550505050565b600090565b613ec0613eb3565b613ecb818484613e8e565b505050565b5b81811015613eef57613ee4600082613eb8565b600181019050613ed1565b5050565b601f821115613f3457613f0581613dd4565b613f0e84613de9565b81016020851015613f1d578190505b613f31613f2985613de9565b830182613ed0565b50505b505050565b600082821c905092915050565b6000613f5760001984600802613f39565b1980831691505092915050565b6000613f708383613f46565b9150826002028217905092915050565b613f898261385a565b67ffffffffffffffff811115613fa257613fa161335c565b5b613fac8254613c78565b613fb7828285613ef3565b600060209050601f831160018114613fea5760008415613fd8578287015190505b613fe28582613f64565b86555061404a565b601f198416613ff886613dd4565b60005b8281101561402057848901518255600182019150602085019450602081019050613ffb565b8683101561403d5784890151614039601f891682613f46565b8355505b6001600288020188555050505b505050505050565b60006060820190506140676000830186613983565b614074602083018561368f565b614081604083018461368f565b949350505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006140e56021836131ec565b91506140f082614089565b604082019050919050565b60006020820190508181036000830152614114816140d8565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000614177603e836131ec565b91506141828261411b565b604082019050919050565b600060208201905081810360008301526141a68161416a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000614209602e836131ec565b9150614214826141ad565b604082019050919050565b60006020820190508181036000830152614238816141fc565b9050919050565b7f6964656e7420616c726561647920736574000000000000000000000000000000600082015250565b60006142756011836131ec565b91506142808261423f565b602082019050919050565b600060208201905081810360008301526142a481614268565b9050919050565b6000815190506142ba8161370c565b92915050565b6000602082840312156142d6576142d56130f2565b5b60006142e4848285016142ab565b91505092915050565b600080fd5b600080fd5b6007811061430457600080fd5b50565b600081519050614316816142f7565b92915050565b600061432f61432a84613487565b6133bc565b90508281526020810184848401111561434b5761434a613357565b5b6143568482856131fd565b509392505050565b600082601f83011261437357614372613352565b5b815161438384826020860161431c565b91505092915050565b60008151905061439b81613528565b92915050565b600060a082840312156143b7576143b66142ed565b5b6143c160a06133bc565b905060006143d1848285016142ab565b60008301525060206143e584828501614307565b602083015250604082015167ffffffffffffffff811115614409576144086142f2565b5b6144158482850161435e565b60408301525060606144298482850161438c565b606083015250608061443d8482850161438c565b60808301525092915050565b60006020828403121561445f5761445e6130f2565b5b600082015167ffffffffffffffff81111561447d5761447c6130f7565b5b614489848285016143a1565b91505092915050565b60006040820190506144a7600083018561368f565b6144b46020830184613328565b9392505050565b7f637265617465206e6577206163636f756e742072657175657374656400000000600082015250565b60006144f1601c836131ec565b91506144fc826144bb565b602082019050919050565b60006020820190508181036000830152614520816144e4565b9050919050565b7f6572726f72207265676973746572696e67206e6577206163636f756e74000000600082015250565b600061455d601d836131ec565b915061456882614527565b602082019050919050565b6000602082019050818103600083015261458c81614550565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006145c96018836131ec565b91506145d482614593565b602082019050919050565b600060208201905081810360008301526145f8816145bc565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061465b6029836131ec565b9150614666826145ff565b604082019050919050565b6000602082019050818103600083015261468a8161464e565b9050919050565b600061469d8285613d20565b91506146a98284613d20565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006147116026836131ec565b915061471c826146b5565b604082019050919050565b6000602082019050818103600083015261474081614704565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006147a36025836131ec565b91506147ae82614747565b604082019050919050565b600060208201905081810360008301526147d281614796565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006148356024836131ec565b9150614840826147d9565b604082019050919050565b6000602082019050818103600083015261486481614828565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006148a582613293565b91506148b083613293565b92508282039050818111156148c8576148c761486b565b5b92915050565b60006148d982613293565b91506148e483613293565b92508282019050808211156148fc576148fb61486b565b5b92915050565b7f696e76616c6964206b6579207265717565737465640000000000000000000000600082015250565b60006149386015836131ec565b915061494382614902565b602082019050919050565b600060208201905081810360008301526149678161492b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006149a46020836131ec565b91506149af8261496e565b602082019050919050565b600060208201905081810360008301526149d381614997565b9050919050565b7f73757065722e5f7265676973746572206973207375636365737366756c2e2e2e60008201527f2072657175657374696e67206964656e74000000000000000000000000000000602082015250565b6000614a366031836131ec565b9150614a41826149da565b604082019050919050565b60006020820190508181036000830152614a6581614a29565b9050919050565b6000819050919050565b614a87614a8282613293565b614a6c565b82525050565b60008160601b9050919050565b6000614aa582614a8d565b9050919050565b6000614ab782614a9a565b9050919050565b614acf614aca82613316565b614aac565b82525050565b6000614ae18285614a76565b602082019150614af18284614abe565b6014820191508190509392505050565b600081905092915050565b6000614b178261385a565b614b218185614b01565b9350614b318185602086016131fd565b80840191505092915050565b6000614b498284614b0c565b915081905092915050565b6000604082019050614b69600083018561368f565b614b766020830184613983565b9392505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614bb36019836131ec565b9150614bbe82614b7d565b602082019050919050565b60006020820190508181036000830152614be281614ba6565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614c456032836131ec565b9150614c5082614be9565b604082019050919050565b60006020820190508181036000830152614c7481614c38565b9050919050565b6000614c8682613293565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614cb857614cb761486b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614cfd82613293565b9150614d0883613293565b925082614d1857614d17614cc3565b5b828204905092915050565b6000614d2e82613293565b9150614d3983613293565b925082614d4957614d48614cc3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b601f821115614dd957614daa81614d83565b614db384613de9565b81016020851015614dc2578190505b614dd6614dce85613de9565b830182613ed0565b50505b505050565b614de7826131e1565b67ffffffffffffffff811115614e0057614dff61335c565b5b614e0a8254613c78565b614e15828285614d98565b600060209050601f831160018114614e485760008415614e36578287015190505b614e408582613f64565b865550614ea8565b601f198416614e5686614d83565b60005b82811015614e7e57848901518255600182019150602085019450602081019050614e59565b86831015614e9b5784890151614e97601f891682613f46565b8355505b6001600288020188555050505b505050505050565b6000608082019050614ec56000830187613328565b614ed26020830186613328565b614edf6040830185613983565b8181036060830152614ef18184613d79565b905095945050505050565b600081519050614f0b81613128565b92915050565b600060208284031215614f2757614f266130f2565b5b6000614f3584828501614efc565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614f746020836131ec565b9150614f7f82614f3e565b602082019050919050565b60006020820190508181036000830152614fa381614f67565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614fe0601c836131ec565b9150614feb82614faa565b602082019050919050565b6000602082019050818103600083015261500f81614fd3565b905091905056fea2646970667358221220ea15706a9e4e08513b207fe056322567acf73e6ef069f1c2e2ca81e9ae4254d964736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c806370a0823111610151578063c87b56dd116100c3578063e985e9c511610087578063e985e9c5146107c1578063eca02763146107f1578063f2fde38b1461080d578063f31a125214610829578063f86bc87914610847578063fe05c3d91461087757610274565b8063c87b56dd146106e3578063da8c229e14610713578063e08670bf14610743578063e18c3a0614610761578063e3684e391461079157610274565b80638da5cb5b116101155780638da5cb5b1461063357806395d89b41146106515780639e502b581461066f578063a22cb4651461068d578063b88d4fde146106a9578063bbe39bf7146106c557610274565b806370a082311461057b578063715018a6146105ab57806372cd2b1a146105b55780637b510fe8146105e55780637fc0a9e51461061557610274565b806334cf6659116101ea5780634f96baf1116101ae5780634f96baf1146104955780635258e560146104b157806359de0deb146104cf5780635fd4b08a146104eb5780636352211e1461051b5780636b8ff5741461054b57610274565b806334cf6659146103f35780633561ff581461041157806342842e0e1461042d5780634dc34682146104495780634e543b261461047957610274565b8063095ea7b31161023c578063095ea7b3146103315780630e2f9f101461034d57806317d7de7c1461037d57806323b872dd1461039b57806327b85035146103b75780632ed55dec146103d557610274565b806301ffc9a714610279578063044c6c54146102a957806306fdde03146102c7578063081812fc146102e557806308730f0714610315575b600080fd5b610293600480360381019061028e9190613154565b610893565b6040516102a0919061319c565b60405180910390f35b6102b16108a5565b6040516102be91906131c6565b60405180910390f35b6102cf6108b0565b6040516102dc9190613271565b60405180910390f35b6102ff60048036038101906102fa91906132c9565b610942565b60405161030c9190613337565b60405180910390f35b61032f600480360381019061032a9190613554565b610988565b005b61034b60048036038101906103469190613645565b610c25565b005b610367600480360381019061036291906132c9565b610d3c565b604051610374919061369e565b60405180910390f35b610385610d58565b6040516103929190613271565b60405180910390f35b6103b560048036038101906103b091906136b9565b610e27565b005b6103bf610e87565b6040516103cc91906131c6565b60405180910390f35b6103dd610e92565b6040516103ea91906131c6565b60405180910390f35b6103fb610fe8565b60405161040891906131c6565b60405180910390f35b61042b60048036038101906104269190613738565b610ff2565b005b610447600480360381019061044291906136b9565b611074565b005b610463600480360381019061045e9190613778565b611094565b6040516104709190613934565b60405180910390f35b610493600480360381019061048e9190613956565b61114f565b005b6104af60048036038101906104aa9190613956565b6111eb565b005b6104b9611275565b6040516104c691906131c6565b60405180910390f35b6104e960048036038101906104e49190613956565b611280565b005b61050560048036038101906105009190613956565b6112e3565b6040516105129190613271565b60405180910390f35b610535600480360381019061053091906132c9565b6113b4565b6040516105429190613337565b60405180910390f35b610565600480360381019061056091906132c9565b611465565b6040516105729190613271565b60405180910390f35b61059560048036038101906105909190613956565b61150a565b6040516105a29190613992565b60405180910390f35b6105b36115c1565b005b6105cf60048036038101906105ca91906132c9565b6115d5565b6040516105dc919061369e565b60405180910390f35b6105ff60048036038101906105fa9190613956565b6115f2565b60405161060c9190613a33565b60405180910390f35b61061d6116c9565b60405161062a91906131c6565b60405180910390f35b61063b6116d4565b6040516106489190613337565b60405180910390f35b6106596116fe565b6040516106669190613271565b60405180910390f35b610677611790565b60405161068491906131c6565b60405180910390f35b6106a760048036038101906106a29190613a4e565b6117b4565b005b6106c360048036038101906106be9190613a8e565b6117ca565b005b6106cd61182c565b6040516106da919061369e565b60405180910390f35b6106fd60048036038101906106f891906132c9565b611832565b60405161070a9190613271565b60405180910390f35b61072d60048036038101906107289190613956565b61189a565b60405161073a919061319c565b60405180910390f35b61074b6118ba565b60405161075891906131c6565b60405180910390f35b61077b60048036038101906107769190613b11565b6118c5565b6040516107889190613337565b60405180910390f35b6107ab60048036038101906107a691906132c9565b61190d565b6040516107b8919061369e565b60405180910390f35b6107db60048036038101906107d69190613b5a565b61192a565b6040516107e8919061319c565b60405180910390f35b61080b60048036038101906108069190613956565b6119be565b005b61082760048036038101906108229190613956565b611a21565b005b610831611aa4565b60405161083e91906131c6565b60405180910390f35b610861600480360381019061085c9190613b9a565b611ac8565b60405161086e919061319c565b60405180910390f35b610891600480360381019061088c9190613bed565b611b04565b005b600061089e82611b6e565b9050919050565b6308730f0760e01b81565b6060600e80546108bf90613c78565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb90613c78565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b5050505050905090565b600061094d82611c50565b6012600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600d600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090613cf5565b60405180910390fd5b60006007600088815260200190815260200160002054905060011515600b87604051610a559190613d51565b908152602001604051809103902060009054906101000a900460ff16151514610af9576001600b87604051610a8a9190613d51565b908152602001604051809103902060006101000a81548160ff02191690831515021790555085604051602001610ac09190613d51565b60405160208183030381529060405280519060200120600a87604051610ae69190613d51565b9081526020016040518091039020819055505b6000600a87604051610b0b9190613d51565b908152602001604051809103902054905060006040518060a00160405280838152602001886006811115610b4257610b416137e3565b5b6006811115610b5457610b536137e3565b5b815260200187604051602001610b6a9190613db2565b60405160208183030381529060405281526020018615158152602001851515815250905080604051602001610b9f9190613934565b604051602081830303815290604052600c600085815260200190815260200160002060008481526020019081526020016000209081610bde9190613f80565b507f0e7d31702c053db64a9bb1c5fa3ceeda422af277139cc645fccdcf87ad23970c898484604051610c1293929190614052565b60405180910390a1505050505050505050565b6000610c30826113b4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c97906140fb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610cbf611c9b565b73ffffffffffffffffffffffffffffffffffffffff161480610cee5750610ced81610ce8611c9b565b61192a565b5b610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d249061418d565b60405180910390fd5b610d378383611ca3565b505050565b6000806000838152602001908152602001600020549050919050565b6060600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610da490613c78565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd090613c78565b8015610e1d5780601f10610df257610100808354040283529160200191610e1d565b820191906000526020600020905b815481529060010190602001808311610e0057829003601f168201915b5050505050905090565b610e38610e32611c9b565b82611d5c565b610e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6e9061421f565b60405180910390fd5b610e82838383611df1565b505050565b630e2f9f1060e01b81565b7f4420e4869750c98a56ac621854d2d00e598698ac87193cdfcbb6ed1164e9cbcd7fb88d4fde60196325a28bb7f99a2582e0b46de55b18761e960c14ad7a320994657f42842e0eb38857a7775b4e7364b2775df7325074d088e7fb39590cd6281184ed7f23b872dd7302113369cda2901243429419bec145408fa8b352b3dd92b66c680b7fe985e9c5c6636c6879256001057b28ccac7718ef0ac56553ff9b926452cab8a37fa22cb4651ab9570f89bb516380c40ce76762284fb1f21337ceaf6adab99e7d4a7f081812fc55e34fdc7cf5d8b5cf4e3621fa6423fde952ec6ab24afdc0d85c0b2e7f095ea7b334ae44009aa867bfb386f5c3b4b443ac6f0ee573fa91c4608fbadfba7f6352211e6566aa027e75ac9dbf2423197fbd9b82b9d981a3ab367d355866aa1c7f70a08231b98ef4ca268c9cc3f6b4590e4bfec28280db06bb5d45e689f2a360be18181818181818181881565b62ad800c60e01b81565b600115156001600084815260200190815260200160002060009054906101000a900460ff16151503611059576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110509061428b565b60405180910390fd5b80600080848152602001908152602001600020819055505050565b61108f838383604051806020016040528060008152506117ca565b505050565b61109c613055565b60003073ffffffffffffffffffffffffffffffffffffffff1663e3684e39856040518263ffffffff1660e01b81526004016110d79190613992565b602060405180830381865afa1580156110f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111891906142c0565b9050600061112f6111298386612057565b836120c9565b9050808060200190518101906111459190614449565b9250505092915050565b611157612180565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a601954836040518363ffffffff1660e01b81526004016111b6929190614492565b600060405180830381600087803b1580156111d057600080fd5b505af11580156111e4573d6000803e3d6000fd5b5050505050565b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab60405161121890614507565b60405180910390a1611229816121fe565b611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90614573565b60405180910390fd5b611272601c612371565b50565b63e3684e3960e01b81565b611288612180565b6000601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461132f90613c78565b80601f016020809104026020016040519081016040528092919081815260200182805461135b90613c78565b80156113a85780601f1061137d576101008083540402835291602001916113a8565b820191906000526020600020905b81548152906001019060200180831161138b57829003601f168201915b50505050509050919050565b6000806010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361145c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611453906145df565b60405180910390fd5b80915050919050565b606060026000838152602001908152602001600020805461148590613c78565b80601f01602080910402602001604051908101604052809291908181526020018280546114b190613c78565b80156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b50505050509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361157a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157190614671565b60405180910390fd5b601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6115c9612180565b6115d36000612387565b565b600060056000838152602001908152602001600020549050919050565b6115fa61309d565b601b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050919050565b6372cd2b1a60e01b81565b6000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600f805461170d90613c78565b80601f016020809104026020016040519081016040528092919081815260200182805461173990613c78565b80156117865780601f1061175b57610100808354040283529160200191611786565b820191906000526020600020905b81548152906001019060200180831161176957829003601f168201915b5050505050905090565b7f28ed4f6c74b219a5819055dfbcd2f1837c046c364cf01fabb6799e4f440d6f1381565b6117c66117bf611c9b565b838361244d565b5050565b6117db6117d5611c9b565b83611d5c565b61181a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118119061421f565b60405180910390fd5b611826848484846125b9565b50505050565b60195481565b606061183d82611c50565b6000611847612615565b905060008151116118675760405180602001604052806000815250611892565b806118718461262c565b604051602001611882929190614691565b6040516020818303038152906040525b915050919050565b60156020528060005260406000206000915054906101000a900460ff1681565b634dc3468260e01b81565b60006004826040516118d79190613d51565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060076000838152602001908152602001600020549050919050565b6000601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6119c6612180565b6001601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b611a29612180565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8f90614727565b60405180910390fd5b611aa181612387565b50565b7f56c708d57e33cc71507c0ab2242d1bed8052197860a551d2b84fd7e949ef74fb81565b601a602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b611b0d826121fe565b611b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4390614573565b60405180910390fd5b611b6082611b5a601c61278c565b8361279a565b611b6a601c612371565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c3957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c495750611c488261286a565b5b9050919050565b611c598161287c565b611c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8f906145df565b60405180910390fd5b50565b600033905090565b816012600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d16836113b4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611d68836113b4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611dd757508373ffffffffffffffffffffffffffffffffffffffff16611dbf84610942565b73ffffffffffffffffffffffffffffffffffffffff16145b80611de85750611de7818561192a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e11826113b4565b73ffffffffffffffffffffffffffffffffffffffff1614611e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5e906147b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecd9061484b565b60405180910390fd5b611ee18383836128e8565b611eec600082611ca3565b6001601160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f3c919061489a565b925050819055506001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f9391906148ce565b92505081905550816010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120528383836128ed565b505050565b600061206383836128f2565b6120a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120999061494e565b60405180910390fd5b600a826040516120b29190613d51565b908152602001604051809103902054905092915050565b6060600c6000848152602001908152602001600020600083815260200190815260200160002080546120fa90613c78565b80601f016020809104026020016040519081016040528092919081815260200182805461212690613c78565b80156121735780601f1061214857610100808354040283529160200191612173565b820191906000526020600020905b81548152906001019060200180831161215657829003601f168201915b5050505050905092915050565b612188611c9b565b73ffffffffffffffffffffffffffffffffffffffff166121a66116d4565b73ffffffffffffffffffffffffffffffffffffffff16146121fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f3906149ba565b60405180910390fd5b565b600061221561220d601c61278c565b836001612940565b507fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab60405161224390614a4c565b60405180910390a160006002612259601c61278c565b8460405160200161226b929190614ad5565b6040516020818303038152906040526040516122879190614b3d565b602060405180830381855afa1580156122a4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906122c791906142c0565b90506122dc6122d6601c61278c565b82610ff2565b60006122f16122eb601c61278c565b856129ee565b9050600061230a612302601c61278c565b848785612ae8565b90508473ffffffffffffffffffffffffffffffffffffffff167f06b635dfd6a725f6b4ed22d2d7e15afd9abc86976825dd8678e98e2abcd3dbab8461234f601c61278c565b60405161235d929190614b54565b60405180910390a260019350505050919050565b6001816000016000828254019250508190555050565b6000601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036124bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b290614bc9565b60405180910390fd5b80601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125ac919061319c565b60405180910390a3505050565b6125c4848484611df1565b6125d084848484612bef565b61260f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260690614c5b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008203612673576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612787565b600082905060005b600082146126a557808061268e90614c7b565b915050600a8261269e9190614cf2565b915061267b565b60008167ffffffffffffffff8111156126c1576126c061335c565b5b6040519080825280601f01601f1916602001820160405280156126f35781602001600182028036833780820191505090505b5090505b600085146127805760018261270c919061489a565b9150600a8561271b9190614d23565b603061272791906148ce565b60f81b81838151811061273d5761273c614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127799190614cf2565b94506126f7565b8093505050505b919050565b600081600001549050919050565b806002600084815260200190815260200160002090816127ba9190614dde565b5080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816128079190614dde565b50826004826040516128199190613d51565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061287582612d76565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006001151560096000858152602001908152602001600020836040516129199190613d51565b908152602001604051809103902060009054906101000a900460ff16151514905092915050565b600060016018600082825461295591906148ce565b925050819055506001601660006018548152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055506129a58385612de0565b6000601660006018548152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055508390509392505050565b600081600d600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600083604051602001612a559190613992565b604051602081830303815290604052805190602001209050600115156008600083815260200190815260200160002060009054906101000a900460ff16151514612ade5760016008600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508060076000868152602001908152602001600020819055505b8091505092915050565b612af061309d565b60006040518060a001604052808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200142815250905080601b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015590505080915050949350505050565b6000612c108473ffffffffffffffffffffffffffffffffffffffff16612dfe565b15612d69578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612c39611c9b565b8786866040518563ffffffff1660e01b8152600401612c5b9493929190614eb0565b6020604051808303816000875af1925050508015612c9757506040513d601f19601f82011682018060405250810190612c949190614f11565b60015b612d19573d8060008114612cc7576040519150601f19603f3d011682016040523d82523d6000602084013e612ccc565b606091505b506000815103612d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0890614c5b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d6e565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612dfa828260405180602001604052806000815250612e21565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b612e2b8383612e7c565b612e386000848484612bef565b612e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6e90614c5b565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee290614f8a565b60405180910390fd5b612ef48161287c565b15612f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2b90614ff6565b60405180910390fd5b612f40600083836128e8565b6001601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f9091906148ce565b92505081905550816010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613051600083836128ed565b5050565b6040518060a00160405280600080191681526020016000600681111561307e5761307d6137e3565b5b8152602001606081526020016000151581526020016000151581525090565b6040518060a001604052806000815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613131816130fc565b811461313c57600080fd5b50565b60008135905061314e81613128565b92915050565b60006020828403121561316a576131696130f2565b5b60006131788482850161313f565b91505092915050565b60008115159050919050565b61319681613181565b82525050565b60006020820190506131b1600083018461318d565b92915050565b6131c0816130fc565b82525050565b60006020820190506131db60008301846131b7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561321b578082015181840152602081019050613200565b60008484015250505050565b6000601f19601f8301169050919050565b6000613243826131e1565b61324d81856131ec565b935061325d8185602086016131fd565b61326681613227565b840191505092915050565b6000602082019050818103600083015261328b8184613238565b905092915050565b6000819050919050565b6132a681613293565b81146132b157600080fd5b50565b6000813590506132c38161329d565b92915050565b6000602082840312156132df576132de6130f2565b5b60006132ed848285016132b4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613321826132f6565b9050919050565b61333181613316565b82525050565b600060208201905061334c6000830184613328565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61339482613227565b810181811067ffffffffffffffff821117156133b3576133b261335c565b5b80604052505050565b60006133c66130e8565b90506133d2828261338b565b919050565b600067ffffffffffffffff8211156133f2576133f161335c565b5b6133fb82613227565b9050602081019050919050565b82818337600083830152505050565b600061342a613425846133d7565b6133bc565b90508281526020810184848401111561344657613445613357565b5b613451848285613408565b509392505050565b600082601f83011261346e5761346d613352565b5b813561347e848260208601613417565b91505092915050565b600067ffffffffffffffff8211156134a2576134a161335c565b5b6134ab82613227565b9050602081019050919050565b60006134cb6134c684613487565b6133bc565b9050828152602081018484840111156134e7576134e6613357565b5b6134f2848285613408565b509392505050565b600082601f83011261350f5761350e613352565b5b813561351f8482602086016134b8565b91505092915050565b61353181613181565b811461353c57600080fd5b50565b60008135905061354e81613528565b92915050565b60008060008060008060c08789031215613571576135706130f2565b5b600061357f89828a016132b4565b965050602087013567ffffffffffffffff8111156135a05761359f6130f7565b5b6135ac89828a01613459565b95505060406135bd89828a016132b4565b945050606087013567ffffffffffffffff8111156135de576135dd6130f7565b5b6135ea89828a016134fa565b93505060806135fb89828a0161353f565b92505060a061360c89828a0161353f565b9150509295509295509295565b61362281613316565b811461362d57600080fd5b50565b60008135905061363f81613619565b92915050565b6000806040838503121561365c5761365b6130f2565b5b600061366a85828601613630565b925050602061367b858286016132b4565b9150509250929050565b6000819050919050565b61369881613685565b82525050565b60006020820190506136b3600083018461368f565b92915050565b6000806000606084860312156136d2576136d16130f2565b5b60006136e086828701613630565b93505060206136f186828701613630565b9250506040613702868287016132b4565b9150509250925092565b61371581613685565b811461372057600080fd5b50565b6000813590506137328161370c565b92915050565b6000806040838503121561374f5761374e6130f2565b5b600061375d858286016132b4565b925050602061376e85828601613723565b9150509250929050565b6000806040838503121561378f5761378e6130f2565b5b600061379d858286016132b4565b925050602083013567ffffffffffffffff8111156137be576137bd6130f7565b5b6137ca85828601613459565b9150509250929050565b6137dd81613685565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110613823576138226137e3565b5b50565b600081905061383482613812565b919050565b600061384482613826565b9050919050565b61385481613839565b82525050565b600081519050919050565b600082825260208201905092915050565b60006138818261385a565b61388b8185613865565b935061389b8185602086016131fd565b6138a481613227565b840191505092915050565b6138b881613181565b82525050565b600060a0830160008301516138d660008601826137d4565b5060208301516138e9602086018261384b565b50604083015184820360408601526139018282613876565b915050606083015161391660608601826138af565b50608083015161392960808601826138af565b508091505092915050565b6000602082019050818103600083015261394e81846138be565b905092915050565b60006020828403121561396c5761396b6130f2565b5b600061397a84828501613630565b91505092915050565b61398c81613293565b82525050565b60006020820190506139a76000830184613983565b92915050565b6139b681613293565b82525050565b6139c581613316565b82525050565b60a0820160008201516139e160008501826139ad565b5060208201516139f460208501826137d4565b506040820151613a0760408501826139bc565b506060820151613a1a60608501826137d4565b506080820151613a2d60808501826139ad565b50505050565b600060a082019050613a4860008301846139cb565b92915050565b60008060408385031215613a6557613a646130f2565b5b6000613a7385828601613630565b9250506020613a848582860161353f565b9150509250929050565b60008060008060808587031215613aa857613aa76130f2565b5b6000613ab687828801613630565b9450506020613ac787828801613630565b9350506040613ad8878288016132b4565b925050606085013567ffffffffffffffff811115613af957613af86130f7565b5b613b05878288016134fa565b91505092959194509250565b600060208284031215613b2757613b266130f2565b5b600082013567ffffffffffffffff811115613b4557613b446130f7565b5b613b5184828501613459565b91505092915050565b60008060408385031215613b7157613b706130f2565b5b6000613b7f85828601613630565b9250506020613b9085828601613630565b9150509250929050565b600080600060608486031215613bb357613bb26130f2565b5b6000613bc186828701613723565b9350506020613bd286828701613630565b9250506040613be386828701613630565b9150509250925092565b60008060408385031215613c0457613c036130f2565b5b6000613c1285828601613630565b925050602083013567ffffffffffffffff811115613c3357613c326130f7565b5b613c3f85828601613459565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613c9057607f821691505b602082108103613ca357613ca2613c49565b5b50919050565b7f6f6e6c79206f776e65722063616e20736574206d657461730000000000000000600082015250565b6000613cdf6018836131ec565b9150613cea82613ca9565b602082019050919050565b60006020820190508181036000830152613d0e81613cd2565b9050919050565b600081905092915050565b6000613d2b826131e1565b613d358185613d15565b9350613d458185602086016131fd565b80840191505092915050565b6000613d5d8284613d20565b915081905092915050565b600082825260208201905092915050565b6000613d848261385a565b613d8e8185613d68565b9350613d9e8185602086016131fd565b613da781613227565b840191505092915050565b60006020820190508181036000830152613dcc8184613d79565b905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613e367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613df9565b613e408683613df9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613e7d613e78613e7384613293565b613e58565b613293565b9050919050565b6000819050919050565b613e9783613e62565b613eab613ea382613e84565b848454613e06565b825550505050565b600090565b613ec0613eb3565b613ecb818484613e8e565b505050565b5b81811015613eef57613ee4600082613eb8565b600181019050613ed1565b5050565b601f821115613f3457613f0581613dd4565b613f0e84613de9565b81016020851015613f1d578190505b613f31613f2985613de9565b830182613ed0565b50505b505050565b600082821c905092915050565b6000613f5760001984600802613f39565b1980831691505092915050565b6000613f708383613f46565b9150826002028217905092915050565b613f898261385a565b67ffffffffffffffff811115613fa257613fa161335c565b5b613fac8254613c78565b613fb7828285613ef3565b600060209050601f831160018114613fea5760008415613fd8578287015190505b613fe28582613f64565b86555061404a565b601f198416613ff886613dd4565b60005b8281101561402057848901518255600182019150602085019450602081019050613ffb565b8683101561403d5784890151614039601f891682613f46565b8355505b6001600288020188555050505b505050505050565b60006060820190506140676000830186613983565b614074602083018561368f565b614081604083018461368f565b949350505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006140e56021836131ec565b91506140f082614089565b604082019050919050565b60006020820190508181036000830152614114816140d8565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000614177603e836131ec565b91506141828261411b565b604082019050919050565b600060208201905081810360008301526141a68161416a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000614209602e836131ec565b9150614214826141ad565b604082019050919050565b60006020820190508181036000830152614238816141fc565b9050919050565b7f6964656e7420616c726561647920736574000000000000000000000000000000600082015250565b60006142756011836131ec565b91506142808261423f565b602082019050919050565b600060208201905081810360008301526142a481614268565b9050919050565b6000815190506142ba8161370c565b92915050565b6000602082840312156142d6576142d56130f2565b5b60006142e4848285016142ab565b91505092915050565b600080fd5b600080fd5b6007811061430457600080fd5b50565b600081519050614316816142f7565b92915050565b600061432f61432a84613487565b6133bc565b90508281526020810184848401111561434b5761434a613357565b5b6143568482856131fd565b509392505050565b600082601f83011261437357614372613352565b5b815161438384826020860161431c565b91505092915050565b60008151905061439b81613528565b92915050565b600060a082840312156143b7576143b66142ed565b5b6143c160a06133bc565b905060006143d1848285016142ab565b60008301525060206143e584828501614307565b602083015250604082015167ffffffffffffffff811115614409576144086142f2565b5b6144158482850161435e565b60408301525060606144298482850161438c565b606083015250608061443d8482850161438c565b60808301525092915050565b60006020828403121561445f5761445e6130f2565b5b600082015167ffffffffffffffff81111561447d5761447c6130f7565b5b614489848285016143a1565b91505092915050565b60006040820190506144a7600083018561368f565b6144b46020830184613328565b9392505050565b7f637265617465206e6577206163636f756e742072657175657374656400000000600082015250565b60006144f1601c836131ec565b91506144fc826144bb565b602082019050919050565b60006020820190508181036000830152614520816144e4565b9050919050565b7f6572726f72207265676973746572696e67206e6577206163636f756e74000000600082015250565b600061455d601d836131ec565b915061456882614527565b602082019050919050565b6000602082019050818103600083015261458c81614550565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006145c96018836131ec565b91506145d482614593565b602082019050919050565b600060208201905081810360008301526145f8816145bc565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061465b6029836131ec565b9150614666826145ff565b604082019050919050565b6000602082019050818103600083015261468a8161464e565b9050919050565b600061469d8285613d20565b91506146a98284613d20565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006147116026836131ec565b915061471c826146b5565b604082019050919050565b6000602082019050818103600083015261474081614704565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006147a36025836131ec565b91506147ae82614747565b604082019050919050565b600060208201905081810360008301526147d281614796565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006148356024836131ec565b9150614840826147d9565b604082019050919050565b6000602082019050818103600083015261486481614828565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006148a582613293565b91506148b083613293565b92508282039050818111156148c8576148c761486b565b5b92915050565b60006148d982613293565b91506148e483613293565b92508282019050808211156148fc576148fb61486b565b5b92915050565b7f696e76616c6964206b6579207265717565737465640000000000000000000000600082015250565b60006149386015836131ec565b915061494382614902565b602082019050919050565b600060208201905081810360008301526149678161492b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006149a46020836131ec565b91506149af8261496e565b602082019050919050565b600060208201905081810360008301526149d381614997565b9050919050565b7f73757065722e5f7265676973746572206973207375636365737366756c2e2e2e60008201527f2072657175657374696e67206964656e74000000000000000000000000000000602082015250565b6000614a366031836131ec565b9150614a41826149da565b604082019050919050565b60006020820190508181036000830152614a6581614a29565b9050919050565b6000819050919050565b614a87614a8282613293565b614a6c565b82525050565b60008160601b9050919050565b6000614aa582614a8d565b9050919050565b6000614ab782614a9a565b9050919050565b614acf614aca82613316565b614aac565b82525050565b6000614ae18285614a76565b602082019150614af18284614abe565b6014820191508190509392505050565b600081905092915050565b6000614b178261385a565b614b218185614b01565b9350614b318185602086016131fd565b80840191505092915050565b6000614b498284614b0c565b915081905092915050565b6000604082019050614b69600083018561368f565b614b766020830184613983565b9392505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614bb36019836131ec565b9150614bbe82614b7d565b602082019050919050565b60006020820190508181036000830152614be281614ba6565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614c456032836131ec565b9150614c5082614be9565b604082019050919050565b60006020820190508181036000830152614c7481614c38565b9050919050565b6000614c8682613293565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614cb857614cb761486b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614cfd82613293565b9150614d0883613293565b925082614d1857614d17614cc3565b5b828204905092915050565b6000614d2e82613293565b9150614d3983613293565b925082614d4957614d48614cc3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b601f821115614dd957614daa81614d83565b614db384613de9565b81016020851015614dc2578190505b614dd6614dce85613de9565b830182613ed0565b50505b505050565b614de7826131e1565b67ffffffffffffffff811115614e0057614dff61335c565b5b614e0a8254613c78565b614e15828285614d98565b600060209050601f831160018114614e485760008415614e36578287015190505b614e408582613f64565b865550614ea8565b601f198416614e5686614d83565b60005b82811015614e7e57848901518255600182019150602085019450602081019050614e59565b86831015614e9b5784890151614e97601f891682613f46565b8355505b6001600288020188555050505b505050505050565b6000608082019050614ec56000830187613328565b614ed26020830186613328565b614edf6040830185613983565b8181036060830152614ef18184613d79565b905095945050505050565b600081519050614f0b81613128565b92915050565b600060208284031215614f2757614f266130f2565b5b6000614f3584828501614efc565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614f746020836131ec565b9150614f7f82614f3e565b602082019050919050565b60006020820190508181036000830152614fa381614f67565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614fe0601c836131ec565b9150614feb82614faa565b602082019050919050565b6000602082019050818103600083015261500f81614fd3565b905091905056fea2646970667358221220ea15706a9e4e08513b207fe056322567acf73e6ef069f1c2e2ca81e9ae4254d964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "authorisations(bytes32,address,address)": {
        "notice": "A mapping of authorisations. An address that is authorised for a profile name may make any changes to the name that the _owner could, but may not update the set of authorisations. (node,  _owner, caller) => isAuthorised"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10281,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_idents",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 10285,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_idExists",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10657,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_names",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 10661,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "addressToNames",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 10665,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "nameToAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 10753,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_profiles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 10757,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_profileExists",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10339,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_metadataIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 10343,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_idExists",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 10349,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_keysAvailable",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 10353,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_keyNames",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_bytes32)"
      },
      {
        "astId": 10357,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_keyExists",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 10363,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_keyValMetas",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))"
      },
      {
        "astId": 10367,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_metaOwners",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2615,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_name",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 2617,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_symbol",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2621,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_owners",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2625,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_balances",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2629,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2635,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 550,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_owner",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 9229,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "controllers",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9235,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "registrationQueue",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 9238,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "uds",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(UDS)8551"
      },
      {
        "astId": 9240,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "index",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 9242,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "rootNodeAddress",
        "offset": 0,
        "slot": "25",
        "type": "t_bytes32"
      },
      {
        "astId": 8571,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "authorisations",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 8606,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_info",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_struct(AccountInfo)8624_storage)"
      },
      {
        "astId": 8613,
        "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
        "label": "_tokenIndex",
        "offset": 0,
        "slot": "28",
        "type": "t_struct(Counter)3940_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(UDS)8551": {
        "encoding": "inplace",
        "label": "contract UDS",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(AccountInfo)8624_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserDataServiceResolver.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)8624_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AccountInfo)8624_storage": {
        "encoding": "inplace",
        "label": "struct UserDataServiceResolver.AccountInfo",
        "members": [
          {
            "astId": 8615,
            "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8617,
            "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
            "label": "identity",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8619,
            "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8621,
            "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
            "label": "metasId",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 8623,
            "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)3940_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3939,
            "contract": "contracts/modules/uds/UserDataServiceResolver.sol:UserDataServiceResolver",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}