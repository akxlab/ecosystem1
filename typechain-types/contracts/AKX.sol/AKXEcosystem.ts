/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AKXEcosystemInterface extends utils.Interface {
  functions: {
    "AKX_HOLDER_ROLE()": FunctionFragment;
    "AKX_OPERATOR_ROLE()": FunctionFragment;
    "CURRENT_STATE()": FunctionFragment;
    "DAO_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DexToken(address)": FunctionFragment;
    "EthDIDRegistry()": FunctionFragment;
    "LABZ_HOLDER_ROLE()": FunctionFragment;
    "LABZ_OPERATOR_ROLE()": FunctionFragment;
    "LabzToken()": FunctionFragment;
    "NEXT_STATE()": FunctionFragment;
    "NOHUMAN_STATE()": FunctionFragment;
    "PAUSED_STATE()": FunctionFragment;
    "PREV_STATE()": FunctionFragment;
    "PUBLIC_STATE()": FunctionFragment;
    "UDS_OPERATOR_ROLE()": FunctionFragment;
    "UPGRADER_OPERATOR_ROLE()": FunctionFragment;
    "UserDataService()": FunctionFragment;
    "VIP_SALE_STATE()": FunctionFragment;
    "__AKX_Ecosystem_init()": FunctionFragment;
    "authenticate(address)": FunctionFragment;
    "disconnect()": FunctionFragment;
    "getFounders()": FunctionFragment;
    "getName()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDAOAsOwner(address)": FunctionFragment;
    "setFoundersAddresses(address[])": FunctionFragment;
    "setMultiSignatureWallet(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "triggerNextStateAuto(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AKX_HOLDER_ROLE"
      | "AKX_OPERATOR_ROLE"
      | "CURRENT_STATE"
      | "DAO_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DexToken"
      | "EthDIDRegistry"
      | "LABZ_HOLDER_ROLE"
      | "LABZ_OPERATOR_ROLE"
      | "LabzToken"
      | "NEXT_STATE"
      | "NOHUMAN_STATE"
      | "PAUSED_STATE"
      | "PREV_STATE"
      | "PUBLIC_STATE"
      | "UDS_OPERATOR_ROLE"
      | "UPGRADER_OPERATOR_ROLE"
      | "UserDataService"
      | "VIP_SALE_STATE"
      | "__AKX_Ecosystem_init"
      | "authenticate"
      | "disconnect"
      | "getFounders"
      | "getName"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getVersion"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "renounceRole"
      | "revokeRole"
      | "setDAOAsOwner"
      | "setFoundersAddresses"
      | "setMultiSignatureWallet"
      | "supportsInterface"
      | "triggerNextStateAuto"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AKX_HOLDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AKX_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURRENT_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAO_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DexToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "EthDIDRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LABZ_HOLDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LABZ_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LabzToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NEXT_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NOHUMAN_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSED_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREV_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UDS_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UserDataService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VIP_SALE_STATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__AKX_Ecosystem_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disconnect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFounders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOAsOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundersAddresses",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiSignatureWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerNextStateAuto",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AKX_HOLDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AKX_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CURRENT_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAO_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DexToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EthDIDRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LABZ_HOLDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LABZ_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LabzToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NEXT_STATE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NOHUMAN_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSED_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PREV_STATE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UDS_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UserDataService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VIP_SALE_STATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__AKX_Ecosystem_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disconnect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFounders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDAOAsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundersAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiSignatureWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerNextStateAuto",
    data: BytesLike
  ): Result;

  events: {
    "AddedToNoBanWLEvent(address)": EventFragment;
    "Authenticated(address,bool,bytes)": EventFragment;
    "Authenticating(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToNoBanWLEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Authenticated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Authenticating"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface AddedToNoBanWLEventEventObject {
  _owner: string;
}
export type AddedToNoBanWLEventEvent = TypedEvent<
  [string],
  AddedToNoBanWLEventEventObject
>;

export type AddedToNoBanWLEventEventFilter =
  TypedEventFilter<AddedToNoBanWLEventEvent>;

export interface AuthenticatedEventObject {
  _owner: string;
  result: boolean;
  data: string;
}
export type AuthenticatedEvent = TypedEvent<
  [string, boolean, string],
  AuthenticatedEventObject
>;

export type AuthenticatedEventFilter = TypedEventFilter<AuthenticatedEvent>;

export interface AuthenticatingEventObject {
  _owner: string;
}
export type AuthenticatingEvent = TypedEvent<
  [string],
  AuthenticatingEventObject
>;

export type AuthenticatingEventFilter = TypedEventFilter<AuthenticatingEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface AKXEcosystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AKXEcosystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    CURRENT_STATE(overrides?: CallOverrides): Promise<[string]>;

    DAO_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DexToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    EthDIDRegistry(overrides?: CallOverrides): Promise<[string]>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LabzToken(overrides?: CallOverrides): Promise<[string]>;

    NEXT_STATE(overrides?: CallOverrides): Promise<[string]>;

    NOHUMAN_STATE(overrides?: CallOverrides): Promise<[string]>;

    PAUSED_STATE(overrides?: CallOverrides): Promise<[string]>;

    PREV_STATE(overrides?: CallOverrides): Promise<[string]>;

    PUBLIC_STATE(overrides?: CallOverrides): Promise<[string]>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UserDataService(overrides?: CallOverrides): Promise<[string]>;

    VIP_SALE_STATE(overrides?: CallOverrides): Promise<[string]>;

    __AKX_Ecosystem_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authenticate(
      _udsr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disconnect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFounders(overrides?: CallOverrides): Promise<[string[]]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersion(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      ethrdid: PromiseOrValue<string>,
      labztoken: PromiseOrValue<string>,
      uds: PromiseOrValue<string>,
      dex: PromiseOrValue<string>,
      gov: PromiseOrValue<string>,
      akxtoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDAOAsOwner(
      _daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFoundersAddresses(
      _founders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMultiSignatureWallet(
      _multi: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    triggerNextStateAuto(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

  AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  CURRENT_STATE(overrides?: CallOverrides): Promise<string>;

  DAO_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DexToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  EthDIDRegistry(overrides?: CallOverrides): Promise<string>;

  LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

  LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  LabzToken(overrides?: CallOverrides): Promise<string>;

  NEXT_STATE(overrides?: CallOverrides): Promise<string>;

  NOHUMAN_STATE(overrides?: CallOverrides): Promise<string>;

  PAUSED_STATE(overrides?: CallOverrides): Promise<string>;

  PREV_STATE(overrides?: CallOverrides): Promise<string>;

  PUBLIC_STATE(overrides?: CallOverrides): Promise<string>;

  UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  UserDataService(overrides?: CallOverrides): Promise<string>;

  VIP_SALE_STATE(overrides?: CallOverrides): Promise<string>;

  __AKX_Ecosystem_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authenticate(
    _udsr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disconnect(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFounders(overrides?: CallOverrides): Promise<string[]>;

  getName(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    ethrdid: PromiseOrValue<string>,
    labztoken: PromiseOrValue<string>,
    uds: PromiseOrValue<string>,
    dex: PromiseOrValue<string>,
    gov: PromiseOrValue<string>,
    akxtoken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDAOAsOwner(
    _daoAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFoundersAddresses(
    _founders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMultiSignatureWallet(
    _multi: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  triggerNextStateAuto(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    CURRENT_STATE(overrides?: CallOverrides): Promise<string>;

    DAO_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DexToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    EthDIDRegistry(overrides?: CallOverrides): Promise<string>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

    LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    LabzToken(overrides?: CallOverrides): Promise<string>;

    NEXT_STATE(overrides?: CallOverrides): Promise<string>;

    NOHUMAN_STATE(overrides?: CallOverrides): Promise<string>;

    PAUSED_STATE(overrides?: CallOverrides): Promise<string>;

    PREV_STATE(overrides?: CallOverrides): Promise<string>;

    PUBLIC_STATE(overrides?: CallOverrides): Promise<string>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    UserDataService(overrides?: CallOverrides): Promise<string>;

    VIP_SALE_STATE(overrides?: CallOverrides): Promise<string>;

    __AKX_Ecosystem_init(overrides?: CallOverrides): Promise<void>;

    authenticate(
      _udsr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disconnect(overrides?: CallOverrides): Promise<boolean>;

    getFounders(overrides?: CallOverrides): Promise<string[]>;

    getName(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      ethrdid: PromiseOrValue<string>,
      labztoken: PromiseOrValue<string>,
      uds: PromiseOrValue<string>,
      dex: PromiseOrValue<string>,
      gov: PromiseOrValue<string>,
      akxtoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDAOAsOwner(
      _daoAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundersAddresses(
      _founders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiSignatureWallet(
      _multi: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    triggerNextStateAuto(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToNoBanWLEvent(address)"(
      _owner?: null
    ): AddedToNoBanWLEventEventFilter;
    AddedToNoBanWLEvent(_owner?: null): AddedToNoBanWLEventEventFilter;

    "Authenticated(address,bool,bytes)"(
      _owner?: null,
      result?: null,
      data?: null
    ): AuthenticatedEventFilter;
    Authenticated(
      _owner?: null,
      result?: null,
      data?: null
    ): AuthenticatedEventFilter;

    "Authenticating(address)"(_owner?: null): AuthenticatingEventFilter;
    Authenticating(_owner?: null): AuthenticatingEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    CURRENT_STATE(overrides?: CallOverrides): Promise<BigNumber>;

    DAO_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DexToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EthDIDRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LabzToken(overrides?: CallOverrides): Promise<BigNumber>;

    NEXT_STATE(overrides?: CallOverrides): Promise<BigNumber>;

    NOHUMAN_STATE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSED_STATE(overrides?: CallOverrides): Promise<BigNumber>;

    PREV_STATE(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLIC_STATE(overrides?: CallOverrides): Promise<BigNumber>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UserDataService(overrides?: CallOverrides): Promise<BigNumber>;

    VIP_SALE_STATE(overrides?: CallOverrides): Promise<BigNumber>;

    __AKX_Ecosystem_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authenticate(
      _udsr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disconnect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFounders(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      ethrdid: PromiseOrValue<string>,
      labztoken: PromiseOrValue<string>,
      uds: PromiseOrValue<string>,
      dex: PromiseOrValue<string>,
      gov: PromiseOrValue<string>,
      akxtoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDAOAsOwner(
      _daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFoundersAddresses(
      _founders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMultiSignatureWallet(
      _multi: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerNextStateAuto(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CURRENT_STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAO_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DexToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EthDIDRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LABZ_OPERATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LabzToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NEXT_STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NOHUMAN_STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSED_STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PREV_STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUBLIC_STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_OPERATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserDataService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VIP_SALE_STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __AKX_Ecosystem_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authenticate(
      _udsr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disconnect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFounders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      ethrdid: PromiseOrValue<string>,
      labztoken: PromiseOrValue<string>,
      uds: PromiseOrValue<string>,
      dex: PromiseOrValue<string>,
      gov: PromiseOrValue<string>,
      akxtoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDAOAsOwner(
      _daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFoundersAddresses(
      _founders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMultiSignatureWallet(
      _multi: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerNextStateAuto(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
