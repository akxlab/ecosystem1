/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IEIP1155UResolver {
  export type ResolverRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    from: PromiseOrValue<string>;
  };

  export type ResolverRequestStructOutput = [string, string] & {
    id: string;
    from: string;
  };

  export type ResolverResponseStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    isError: PromiseOrValue<boolean>;
    errMsg: PromiseOrValue<string>;
  };

  export type ResolverResponseStructOutput = [
    BigNumber,
    string,
    string,
    boolean,
    string
  ] & {
    tokenId: BigNumber;
    to: string;
    data: string;
    isError: boolean;
    errMsg: string;
  };
}

export interface IEIP1155UResolverInterface extends utils.Interface {
  functions: {
    "addToResolver(bytes32,address,uint256)": FunctionFragment;
    "isResolvable(bytes32,address)": FunctionFragment;
    "resolve((bytes32,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addToResolver" | "isResolvable" | "resolve"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToResolver",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isResolvable",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [IEIP1155UResolver.ResolverRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isResolvable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;

  events: {
    "AddedToEIP1155UResolver(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToEIP1155UResolver"): EventFragment;
}

export interface AddedToEIP1155UResolverEventObject {
  id: string;
  tokenId: BigNumber;
}
export type AddedToEIP1155UResolverEvent = TypedEvent<
  [string, BigNumber],
  AddedToEIP1155UResolverEventObject
>;

export type AddedToEIP1155UResolverEventFilter =
  TypedEventFilter<AddedToEIP1155UResolverEvent>;

export interface IEIP1155UResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEIP1155UResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToResolver(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isResolvable(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      arg0: IEIP1155UResolver.ResolverRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToResolver(
    id: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isResolvable(
    id: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    arg0: IEIP1155UResolver.ResolverRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToResolver(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isResolvable(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    resolve(
      arg0: IEIP1155UResolver.ResolverRequestStruct,
      overrides?: CallOverrides
    ): Promise<IEIP1155UResolver.ResolverResponseStructOutput>;
  };

  filters: {
    "AddedToEIP1155UResolver(bytes32,uint256)"(
      id?: null,
      tokenId?: null
    ): AddedToEIP1155UResolverEventFilter;
    AddedToEIP1155UResolver(
      id?: null,
      tokenId?: null
    ): AddedToEIP1155UResolverEventFilter;
  };

  estimateGas: {
    addToResolver(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isResolvable(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      arg0: IEIP1155UResolver.ResolverRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToResolver(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isResolvable(
      id: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      arg0: IEIP1155UResolver.ResolverRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
