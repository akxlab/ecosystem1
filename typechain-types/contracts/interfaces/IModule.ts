/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IModuleInterface extends utils.Interface {
  functions: {
    "moduleAuthor()": FunctionFragment;
    "moduleContract()": FunctionFragment;
    "moduleHash()": FunctionFragment;
    "moduleName(address)": FunctionFragment;
    "moduleVersion()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "moduleAuthor"
      | "moduleContract"
      | "moduleHash"
      | "moduleName"
      | "moduleVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "moduleAuthor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "moduleAuthor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleVersion",
    data: BytesLike
  ): Result;

  events: {
    "ModuleAdded(bytes32)": EventFragment;
    "ModuleRemoved(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleRemoved"): EventFragment;
}

export interface ModuleAddedEventObject {
  _name: string;
}
export type ModuleAddedEvent = TypedEvent<[string], ModuleAddedEventObject>;

export type ModuleAddedEventFilter = TypedEventFilter<ModuleAddedEvent>;

export interface ModuleRemovedEventObject {
  _name: string;
}
export type ModuleRemovedEvent = TypedEvent<[string], ModuleRemovedEventObject>;

export type ModuleRemovedEventFilter = TypedEventFilter<ModuleRemovedEvent>;

export interface IModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    moduleAuthor(overrides?: CallOverrides): Promise<[string]>;

    moduleContract(overrides?: CallOverrides): Promise<[string]>;

    moduleHash(overrides?: CallOverrides): Promise<[string]>;

    moduleName(
      modAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    moduleVersion(overrides?: CallOverrides): Promise<[string]>;
  };

  moduleAuthor(overrides?: CallOverrides): Promise<string>;

  moduleContract(overrides?: CallOverrides): Promise<string>;

  moduleHash(overrides?: CallOverrides): Promise<string>;

  moduleName(
    modAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  moduleVersion(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    moduleAuthor(overrides?: CallOverrides): Promise<string>;

    moduleContract(overrides?: CallOverrides): Promise<string>;

    moduleHash(overrides?: CallOverrides): Promise<string>;

    moduleName(
      modAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleVersion(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ModuleAdded(bytes32)"(_name?: null): ModuleAddedEventFilter;
    ModuleAdded(_name?: null): ModuleAddedEventFilter;

    "ModuleRemoved(bytes32)"(_name?: null): ModuleRemovedEventFilter;
    ModuleRemoved(_name?: null): ModuleRemovedEventFilter;
  };

  estimateGas: {
    moduleAuthor(overrides?: CallOverrides): Promise<BigNumber>;

    moduleContract(overrides?: CallOverrides): Promise<BigNumber>;

    moduleHash(overrides?: CallOverrides): Promise<BigNumber>;

    moduleName(
      modAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    moduleAuthor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleName(
      modAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
