/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IModuleRegistryInterface extends utils.Interface {
  functions: {
    "isRegisteredModuleAddress(address)": FunctionFragment;
    "isRegisteredModuleName(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isRegisteredModuleAddress"
      | "isRegisteredModuleName"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isRegisteredModuleAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredModuleName",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "isRegisteredModuleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredModuleName",
    data: BytesLike
  ): Result;

  events: {
    "ModuleDeRegistered(address)": EventFragment;
    "ModuleRegistered(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleDeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleRegistered"): EventFragment;
}

export interface ModuleDeRegisteredEventObject {
  _module: string;
}
export type ModuleDeRegisteredEvent = TypedEvent<
  [string],
  ModuleDeRegisteredEventObject
>;

export type ModuleDeRegisteredEventFilter =
  TypedEventFilter<ModuleDeRegisteredEvent>;

export interface ModuleRegisteredEventObject {
  _module: string;
  _name: string;
}
export type ModuleRegisteredEvent = TypedEvent<
  [string, string],
  ModuleRegisteredEventObject
>;

export type ModuleRegisteredEventFilter =
  TypedEventFilter<ModuleRegisteredEvent>;

export interface IModuleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModuleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isRegisteredModuleAddress(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredModuleName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  isRegisteredModuleAddress(
    _module: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredModuleName(
    _name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    isRegisteredModuleAddress(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredModuleName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ModuleDeRegistered(address)"(
      _module?: null
    ): ModuleDeRegisteredEventFilter;
    ModuleDeRegistered(_module?: null): ModuleDeRegisteredEventFilter;

    "ModuleRegistered(address,bytes32)"(
      _module?: null,
      _name?: null
    ): ModuleRegisteredEventFilter;
    ModuleRegistered(_module?: null, _name?: null): ModuleRegisteredEventFilter;
  };

  estimateGas: {
    isRegisteredModuleAddress(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredModuleName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isRegisteredModuleAddress(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredModuleName(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
