/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface AccountInterface extends utils.Interface {
  functions: {
    "_accountOwner()": FunctionFragment;
    "_accountType()": FunctionFragment;
    "getAccountAddress()": FunctionFragment;
    "initialize(address,string,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountSignature(uint256,bytes)": FunctionFragment;
    "setKeyParts(bytes)": FunctionFragment;
    "setSignatureVerificationResult(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyDilithiumSignature(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_accountOwner"
      | "_accountType"
      | "getAccountAddress"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setAccountSignature"
      | "setKeyParts"
      | "setSignatureVerificationResult"
      | "transferOwnership"
      | "verifyDilithiumSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_accountOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_accountType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountSignature",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyParts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureVerificationResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDilithiumSignature",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_accountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_accountType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeyParts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureVerificationResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDilithiumSignature",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SignAccountRequest(uint256,bytes,bytes)": EventFragment;
    "SignatureVerificationRequest(uint256,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignAccountRequest"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SignatureVerificationRequest"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SignAccountRequestEventObject {
  reqId: BigNumber;
  accountAddress: string;
  pubkey: string;
}
export type SignAccountRequestEvent = TypedEvent<
  [BigNumber, string, string],
  SignAccountRequestEventObject
>;

export type SignAccountRequestEventFilter =
  TypedEventFilter<SignAccountRequestEvent>;

export interface SignatureVerificationRequestEventObject {
  reqId: BigNumber;
  signatureId: string;
  pubkey: string;
}
export type SignatureVerificationRequestEvent = TypedEvent<
  [BigNumber, string, string],
  SignatureVerificationRequestEventObject
>;

export type SignatureVerificationRequestEventFilter =
  TypedEventFilter<SignatureVerificationRequestEvent>;

export interface Account extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _accountOwner(overrides?: CallOverrides): Promise<[string]>;

    _accountType(overrides?: CallOverrides): Promise<[string]>;

    getAccountAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _for: PromiseOrValue<string>,
      _aType: PromiseOrValue<string>,
      keyParts: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAccountSignature(
      reqId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeyParts(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSignatureVerificationResult(
      _reqId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyDilithiumSignature(
      signatureId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _accountOwner(overrides?: CallOverrides): Promise<string>;

  _accountType(overrides?: CallOverrides): Promise<string>;

  getAccountAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _for: PromiseOrValue<string>,
    _aType: PromiseOrValue<string>,
    keyParts: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAccountSignature(
    reqId: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeyParts(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSignatureVerificationResult(
    _reqId: PromiseOrValue<BigNumberish>,
    result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyDilithiumSignature(
    signatureId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _accountOwner(overrides?: CallOverrides): Promise<string>;

    _accountType(overrides?: CallOverrides): Promise<string>;

    getAccountAddress(overrides?: CallOverrides): Promise<string>;

    initialize(
      _for: PromiseOrValue<string>,
      _aType: PromiseOrValue<string>,
      keyParts: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccountSignature(
      reqId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeyParts(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSignatureVerificationResult(
      _reqId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyDilithiumSignature(
      signatureId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SignAccountRequest(uint256,bytes,bytes)"(
      reqId?: null,
      accountAddress?: null,
      pubkey?: null
    ): SignAccountRequestEventFilter;
    SignAccountRequest(
      reqId?: null,
      accountAddress?: null,
      pubkey?: null
    ): SignAccountRequestEventFilter;

    "SignatureVerificationRequest(uint256,bytes32,bytes)"(
      reqId?: null,
      signatureId?: null,
      pubkey?: null
    ): SignatureVerificationRequestEventFilter;
    SignatureVerificationRequest(
      reqId?: null,
      signatureId?: null,
      pubkey?: null
    ): SignatureVerificationRequestEventFilter;
  };

  estimateGas: {
    _accountOwner(overrides?: CallOverrides): Promise<BigNumber>;

    _accountType(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _for: PromiseOrValue<string>,
      _aType: PromiseOrValue<string>,
      keyParts: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAccountSignature(
      reqId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeyParts(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSignatureVerificationResult(
      _reqId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyDilithiumSignature(
      signatureId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _accountOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _accountType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _for: PromiseOrValue<string>,
      _aType: PromiseOrValue<string>,
      keyParts: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAccountSignature(
      reqId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeyParts(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSignatureVerificationResult(
      _reqId: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyDilithiumSignature(
      signatureId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
