/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface PoolModuleInterface extends utils.Interface {
  functions: {
    "_loaded()": FunctionFragment;
    "_moduleAuthor()": FunctionFragment;
    "_moduleContract()": FunctionFragment;
    "_moduleName()": FunctionFragment;
    "_moduleVersion()": FunctionFragment;
    "admin()": FunctionFragment;
    "compareVersions(string,string)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "loadModule(bytes32,string)": FunctionFragment;
    "moduleAuthor()": FunctionFragment;
    "moduleContract()": FunctionFragment;
    "moduleHash()": FunctionFragment;
    "moduleName()": FunctionFragment;
    "moduleType()": FunctionFragment;
    "moduleVersion()": FunctionFragment;
    "registry()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_loaded"
      | "_moduleAuthor"
      | "_moduleContract"
      | "_moduleName"
      | "_moduleVersion"
      | "admin"
      | "compareVersions"
      | "implementation"
      | "initialize"
      | "loadModule"
      | "moduleAuthor"
      | "moduleContract"
      | "moduleHash"
      | "moduleName"
      | "moduleType"
      | "moduleVersion"
      | "registry"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_loaded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_moduleAuthor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_moduleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_moduleName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_moduleVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compareVersions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loadModule",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleAuthor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_loaded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_moduleAuthor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_moduleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_moduleName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_moduleVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compareVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loadModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleAuthor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "ModuleAdded(bytes32)": EventFragment;
    "ModuleRemoved(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleRemoved"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ModuleAddedEventObject {
  _name: string;
}
export type ModuleAddedEvent = TypedEvent<[string], ModuleAddedEventObject>;

export type ModuleAddedEventFilter = TypedEventFilter<ModuleAddedEvent>;

export interface ModuleRemovedEventObject {
  _name: string;
}
export type ModuleRemovedEvent = TypedEvent<[string], ModuleRemovedEventObject>;

export type ModuleRemovedEventFilter = TypedEventFilter<ModuleRemovedEvent>;

export interface PoolModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _loaded(overrides?: CallOverrides): Promise<[boolean]>;

    _moduleAuthor(overrides?: CallOverrides): Promise<[string]>;

    _moduleContract(overrides?: CallOverrides): Promise<[string]>;

    _moduleName(overrides?: CallOverrides): Promise<[string]>;

    _moduleVersion(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    compareVersions(
      v1: PromiseOrValue<string>,
      v2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _reg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loadModule(
      _name: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moduleAuthor(overrides?: CallOverrides): Promise<[string]>;

    moduleContract(overrides?: CallOverrides): Promise<[string]>;

    moduleHash(overrides?: CallOverrides): Promise<[string]>;

    moduleName(overrides?: CallOverrides): Promise<[string]>;

    moduleType(overrides?: CallOverrides): Promise<[string]>;

    moduleVersion(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;
  };

  _loaded(overrides?: CallOverrides): Promise<boolean>;

  _moduleAuthor(overrides?: CallOverrides): Promise<string>;

  _moduleContract(overrides?: CallOverrides): Promise<string>;

  _moduleName(overrides?: CallOverrides): Promise<string>;

  _moduleVersion(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  compareVersions(
    v1: PromiseOrValue<string>,
    v2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    _reg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loadModule(
    _name: PromiseOrValue<BytesLike>,
    version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moduleAuthor(overrides?: CallOverrides): Promise<string>;

  moduleContract(overrides?: CallOverrides): Promise<string>;

  moduleHash(overrides?: CallOverrides): Promise<string>;

  moduleName(overrides?: CallOverrides): Promise<string>;

  moduleType(overrides?: CallOverrides): Promise<string>;

  moduleVersion(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _loaded(overrides?: CallOverrides): Promise<boolean>;

    _moduleAuthor(overrides?: CallOverrides): Promise<string>;

    _moduleContract(overrides?: CallOverrides): Promise<string>;

    _moduleName(overrides?: CallOverrides): Promise<string>;

    _moduleVersion(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    compareVersions(
      v1: PromiseOrValue<string>,
      v2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(
      _reg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    loadModule(
      _name: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    moduleAuthor(overrides?: CallOverrides): Promise<string>;

    moduleContract(overrides?: CallOverrides): Promise<string>;

    moduleHash(overrides?: CallOverrides): Promise<string>;

    moduleName(overrides?: CallOverrides): Promise<string>;

    moduleType(overrides?: CallOverrides): Promise<string>;

    moduleVersion(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ModuleAdded(bytes32)"(_name?: null): ModuleAddedEventFilter;
    ModuleAdded(_name?: null): ModuleAddedEventFilter;

    "ModuleRemoved(bytes32)"(_name?: null): ModuleRemovedEventFilter;
    ModuleRemoved(_name?: null): ModuleRemovedEventFilter;
  };

  estimateGas: {
    _loaded(overrides?: CallOverrides): Promise<BigNumber>;

    _moduleAuthor(overrides?: CallOverrides): Promise<BigNumber>;

    _moduleContract(overrides?: CallOverrides): Promise<BigNumber>;

    _moduleName(overrides?: CallOverrides): Promise<BigNumber>;

    _moduleVersion(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    compareVersions(
      v1: PromiseOrValue<string>,
      v2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _reg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loadModule(
      _name: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moduleAuthor(overrides?: CallOverrides): Promise<BigNumber>;

    moduleContract(overrides?: CallOverrides): Promise<BigNumber>;

    moduleHash(overrides?: CallOverrides): Promise<BigNumber>;

    moduleName(overrides?: CallOverrides): Promise<BigNumber>;

    moduleType(overrides?: CallOverrides): Promise<BigNumber>;

    moduleVersion(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _loaded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _moduleAuthor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _moduleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _moduleName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _moduleVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compareVersions(
      v1: PromiseOrValue<string>,
      v2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _reg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loadModule(
      _name: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moduleAuthor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
