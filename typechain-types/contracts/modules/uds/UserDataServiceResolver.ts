/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace UserDataServiceResolver {
  export type AccountInfoStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    identity: PromiseOrValue<BytesLike>;
    owner: PromiseOrValue<string>;
    metasId: PromiseOrValue<BytesLike>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type AccountInfoStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ] & {
    tokenId: BigNumber;
    identity: string;
    owner: string;
    metasId: string;
    timestamp: BigNumber;
  };
}

export declare namespace MetaDataResolver {
  export type KeyValMetaStruct = {
    key: PromiseOrValue<BytesLike>;
    dType: PromiseOrValue<BigNumberish>;
    dValue: PromiseOrValue<BytesLike>;
    editable: PromiseOrValue<boolean>;
    encrypted: PromiseOrValue<boolean>;
  };

  export type KeyValMetaStructOutput = [
    string,
    number,
    string,
    boolean,
    boolean
  ] & {
    key: string;
    dType: number;
    dValue: string;
    editable: boolean;
    encrypted: boolean;
  };
}

export interface UserDataServiceResolverInterface extends utils.Interface {
  functions: {
    "AKX_HOLDER_ROLE()": FunctionFragment;
    "AKX_OPERATOR_ROLE()": FunctionFragment;
    "DAO_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ERC721_ID()": FunctionFragment;
    "IDENT_INTERFACE_ID()": FunctionFragment;
    "LABZ_HOLDER_ROLE()": FunctionFragment;
    "LABZ_OPERATOR_ROLE()": FunctionFragment;
    "METADATA_INTERFACE_ID()": FunctionFragment;
    "METAVALUE_INTERFACE_ID()": FunctionFragment;
    "NAME_INTERFACE_ID()": FunctionFragment;
    "PROFILE_INTERFACE_ID()": FunctionFragment;
    "RECLAIM_ID()": FunctionFragment;
    "REPUTATION_ID()": FunctionFragment;
    "SETMETA_INTERFACE_ID()": FunctionFragment;
    "UDS_OPERATOR_ROLE()": FunctionFragment;
    "UPGRADER_OPERATOR_ROLE()": FunctionFragment;
    "alreadyRegistered(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorisations(bytes32,address,address)": FunctionFragment;
    "authorizeController(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "controllers(address)": FunctionFragment;
    "createNewAccount(address)": FunctionFragment;
    "createNewAccount(address,string)": FunctionFragment;
    "deAuthorizeController(address)": FunctionFragment;
    "getAccountInfo(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getName()": FunctionFragment;
    "getName(address)": FunctionFragment;
    "getName(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "ident(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "metaValue(uint256,string)": FunctionFragment;
    "metadata(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nameOwner(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "profile(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rootNodeAddress()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setAuthorisation(bytes32,address,bool)": FunctionFragment;
    "setIdent(uint256,bytes32)": FunctionFragment;
    "setMetaData(uint256,string,uint256,bytes,bool,bool)": FunctionFragment;
    "setResolver(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AKX_HOLDER_ROLE"
      | "AKX_OPERATOR_ROLE"
      | "DAO_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ERC721_ID"
      | "IDENT_INTERFACE_ID"
      | "LABZ_HOLDER_ROLE"
      | "LABZ_OPERATOR_ROLE"
      | "METADATA_INTERFACE_ID"
      | "METAVALUE_INTERFACE_ID"
      | "NAME_INTERFACE_ID"
      | "PROFILE_INTERFACE_ID"
      | "RECLAIM_ID"
      | "REPUTATION_ID"
      | "SETMETA_INTERFACE_ID"
      | "UDS_OPERATOR_ROLE"
      | "UPGRADER_OPERATOR_ROLE"
      | "alreadyRegistered"
      | "approve"
      | "authorisations"
      | "authorizeController"
      | "balanceOf"
      | "controllers"
      | "createNewAccount(address)"
      | "createNewAccount(address,string)"
      | "deAuthorizeController"
      | "getAccountInfo"
      | "getApproved"
      | "getName()"
      | "getName(address)"
      | "getName(uint256)"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "ident"
      | "isApprovedForAll"
      | "metaValue"
      | "metadata"
      | "name"
      | "nameOwner"
      | "owner"
      | "ownerOf"
      | "profile"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "rootNodeAddress"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setAuthorisation"
      | "setIdent"
      | "setMetaData"
      | "setResolver"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AKX_HOLDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AKX_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAO_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ERC721_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IDENT_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LABZ_HOLDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LABZ_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METADATA_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "METAVALUE_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NAME_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROFILE_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RECLAIM_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SETMETA_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UDS_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alreadyRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorisations",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewAccount(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewAccount(address,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deAuthorizeController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getName()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getName(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getName(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ident",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "metaValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nameOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "profile",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rootNodeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorisation",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AKX_HOLDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AKX_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAO_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ERC721_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IDENT_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LABZ_HOLDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LABZ_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METADATA_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "METAVALUE_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NAME_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROFILE_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RECLAIM_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SETMETA_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UDS_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alreadyRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorisations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewAccount(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewAccount(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deAuthorizeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getName(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getName(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ident", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metaValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootNodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIdent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetaData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AlreadyRegisteredEvent(bytes32,uint256,bytes32)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AuthorisationChanged(bytes32,address,address,bool)": EventFragment;
    "Log(string)": EventFragment;
    "MetaDataAdded(uint256,bytes32,bytes32)": EventFragment;
    "NewAccountCreated(bytes32,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AlreadyRegisteredEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorisationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaDataAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AlreadyRegisteredEventEventObject {
  identity: string;
  tokenId: BigNumber;
  metasId: string;
}
export type AlreadyRegisteredEventEvent = TypedEvent<
  [string, BigNumber, string],
  AlreadyRegisteredEventEventObject
>;

export type AlreadyRegisteredEventEventFilter =
  TypedEventFilter<AlreadyRegisteredEventEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface AuthorisationChangedEventObject {
  profileId: string;
  _owner: string;
  target: string;
  isAuthorised: boolean;
}
export type AuthorisationChangedEvent = TypedEvent<
  [string, string, string, boolean],
  AuthorisationChangedEventObject
>;

export type AuthorisationChangedEventFilter =
  TypedEventFilter<AuthorisationChangedEvent>;

export interface LogEventObject {
  message: string;
}
export type LogEvent = TypedEvent<[string], LogEventObject>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface MetaDataAddedEventObject {
  tokenid: BigNumber;
  metaid: string;
  keyid: string;
}
export type MetaDataAddedEvent = TypedEvent<
  [BigNumber, string, string],
  MetaDataAddedEventObject
>;

export type MetaDataAddedEventFilter = TypedEventFilter<MetaDataAddedEvent>;

export interface NewAccountCreatedEventObject {
  identity: string;
  _owner: string;
  tokenId: BigNumber;
}
export type NewAccountCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  NewAccountCreatedEventObject
>;

export type NewAccountCreatedEventFilter =
  TypedEventFilter<NewAccountCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UserDataServiceResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserDataServiceResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DAO_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ERC721_ID(overrides?: CallOverrides): Promise<[string]>;

    IDENT_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    METADATA_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    METAVALUE_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    NAME_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    PROFILE_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    RECLAIM_ID(overrides?: CallOverrides): Promise<[string]>;

    REPUTATION_ID(overrides?: CallOverrides): Promise<[string]>;

    SETMETA_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    alreadyRegistered(
      _subject: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorisations(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    authorizeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "createNewAccount(address)"(
      _accountWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createNewAccount(address,string)"(
      _accountWalletAddress: PromiseOrValue<string>,
      accountName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deAuthorizeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountInfo(
      infoOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserDataServiceResolver.AccountInfoStructOutput] & {
        Info: UserDataServiceResolver.AccountInfoStructOutput;
      }
    >;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getName()"(overrides?: CallOverrides): Promise<[string]>;

    "getName(address)"(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getName(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ident(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metaValue(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MetaDataResolver.KeyValMetaStructOutput] & {
        kv: MetaDataResolver.KeyValMetaStructOutput;
      }
    >;

    metadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nameOwner(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    profile(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rootNodeAddress(overrides?: CallOverrides): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthorisation(
      profileId: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      _isAuthorised: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIdent(
      tokenId: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetaData(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      _dtype: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BytesLike>,
      editable: PromiseOrValue<boolean>,
      encrypted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setResolver(
      resolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

  AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  DAO_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ERC721_ID(overrides?: CallOverrides): Promise<string>;

  IDENT_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

  LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  METADATA_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  METAVALUE_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  NAME_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  PROFILE_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  RECLAIM_ID(overrides?: CallOverrides): Promise<string>;

  REPUTATION_ID(overrides?: CallOverrides): Promise<string>;

  SETMETA_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  alreadyRegistered(
    _subject: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorisations(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  authorizeController(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  controllers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "createNewAccount(address)"(
    _accountWalletAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createNewAccount(address,string)"(
    _accountWalletAddress: PromiseOrValue<string>,
    accountName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deAuthorizeController(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountInfo(
    infoOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UserDataServiceResolver.AccountInfoStructOutput>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  "getName(address)"(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getName(uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ident(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metaValue(
    tokenId: PromiseOrValue<BigNumberish>,
    keyStr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MetaDataResolver.KeyValMetaStructOutput>;

  metadata(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nameOwner(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  profile(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rootNodeAddress(overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthorisation(
    profileId: PromiseOrValue<BytesLike>,
    target: PromiseOrValue<string>,
    _isAuthorised: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIdent(
    tokenId: PromiseOrValue<BigNumberish>,
    identifier: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetaData(
    tokenId: PromiseOrValue<BigNumberish>,
    keyStr: PromiseOrValue<string>,
    _dtype: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BytesLike>,
    editable: PromiseOrValue<boolean>,
    encrypted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setResolver(
    resolver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    DAO_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ERC721_ID(overrides?: CallOverrides): Promise<string>;

    IDENT_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<string>;

    LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    METADATA_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    METAVALUE_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    NAME_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    PROFILE_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    RECLAIM_ID(overrides?: CallOverrides): Promise<string>;

    REPUTATION_ID(overrides?: CallOverrides): Promise<string>;

    SETMETA_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    alreadyRegistered(
      _subject: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorisations(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "createNewAccount(address)"(
      _accountWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createNewAccount(address,string)"(
      _accountWalletAddress: PromiseOrValue<string>,
      accountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deAuthorizeController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountInfo(
      infoOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UserDataServiceResolver.AccountInfoStructOutput>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    "getName(address)"(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getName(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ident(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metaValue(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MetaDataResolver.KeyValMetaStructOutput>;

    metadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nameOwner(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    profile(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rootNodeAddress(overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthorisation(
      profileId: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      _isAuthorised: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIdent(
      tokenId: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaData(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      _dtype: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BytesLike>,
      editable: PromiseOrValue<boolean>,
      encrypted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setResolver(
      resolver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AlreadyRegisteredEvent(bytes32,uint256,bytes32)"(
      identity?: null,
      tokenId?: null,
      metasId?: null
    ): AlreadyRegisteredEventEventFilter;
    AlreadyRegisteredEvent(
      identity?: null,
      tokenId?: null,
      metasId?: null
    ): AlreadyRegisteredEventEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "AuthorisationChanged(bytes32,address,address,bool)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      _owner?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null,
      isAuthorised?: null
    ): AuthorisationChangedEventFilter;
    AuthorisationChanged(
      profileId?: PromiseOrValue<BytesLike> | null,
      _owner?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null,
      isAuthorised?: null
    ): AuthorisationChangedEventFilter;

    "Log(string)"(message?: null): LogEventFilter;
    Log(message?: null): LogEventFilter;

    "MetaDataAdded(uint256,bytes32,bytes32)"(
      tokenid?: null,
      metaid?: null,
      keyid?: null
    ): MetaDataAddedEventFilter;
    MetaDataAdded(
      tokenid?: null,
      metaid?: null,
      keyid?: null
    ): MetaDataAddedEventFilter;

    "NewAccountCreated(bytes32,address,uint256)"(
      identity?: null,
      _owner?: PromiseOrValue<string> | null,
      tokenId?: null
    ): NewAccountCreatedEventFilter;
    NewAccountCreated(
      identity?: null,
      _owner?: PromiseOrValue<string> | null,
      tokenId?: null
    ): NewAccountCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DAO_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_ID(overrides?: CallOverrides): Promise<BigNumber>;

    IDENT_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LABZ_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    METADATA_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    METAVALUE_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    NAME_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    PROFILE_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    RECLAIM_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REPUTATION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    SETMETA_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    alreadyRegistered(
      _subject: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorisations(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createNewAccount(address)"(
      _accountWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createNewAccount(address,string)"(
      _accountWalletAddress: PromiseOrValue<string>,
      accountName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deAuthorizeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountInfo(
      infoOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getName(address)"(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getName(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ident(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metaValue(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nameOwner(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profile(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rootNodeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthorisation(
      profileId: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      _isAuthorised: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIdent(
      tokenId: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetaData(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      _dtype: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BytesLike>,
      editable: PromiseOrValue<boolean>,
      encrypted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setResolver(
      resolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AKX_HOLDER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AKX_OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAO_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IDENT_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LABZ_HOLDER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LABZ_OPERATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    METADATA_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    METAVALUE_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME_INTERFACE_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROFILE_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RECLAIM_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REPUTATION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SETMETA_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UDS_OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADER_OPERATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alreadyRegistered(
      _subject: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorisations(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "createNewAccount(address)"(
      _accountWalletAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createNewAccount(address,string)"(
      _accountWalletAddress: PromiseOrValue<string>,
      accountName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deAuthorizeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      infoOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName(address)"(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getName(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ident(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metaValue(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameOwner(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profile(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rootNodeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthorisation(
      profileId: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<string>,
      _isAuthorised: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIdent(
      tokenId: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetaData(
      tokenId: PromiseOrValue<BigNumberish>,
      keyStr: PromiseOrValue<string>,
      _dtype: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BytesLike>,
      editable: PromiseOrValue<boolean>,
      encrypted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setResolver(
      resolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
