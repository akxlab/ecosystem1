/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IxWrapperInterface extends utils.Interface {
  functions: {
    "wrap()": FunctionFragment;
    "wrapERC1155(address)": FunctionFragment;
    "wrapERC20(address)": FunctionFragment;
    "wrapERC721(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "wrap" | "wrapERC1155" | "wrapERC20" | "wrapERC721"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "wrap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrapERC1155",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapERC721",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapERC721", data: BytesLike): Result;

  events: {
    "NewTokenWrapped(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTokenWrapped"): EventFragment;
}

export interface NewTokenWrappedEventObject {
  _token: string;
}
export type NewTokenWrappedEvent = TypedEvent<
  [string],
  NewTokenWrappedEventObject
>;

export type NewTokenWrappedEventFilter = TypedEventFilter<NewTokenWrappedEvent>;

export interface IxWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IxWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    wrap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrapERC1155(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrapERC20(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrapERC721(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  wrap(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrapERC1155(
    _implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrapERC20(
    _implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrapERC721(
    _implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    wrap(overrides?: CallOverrides): Promise<string>;

    wrapERC1155(
      _implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    wrapERC20(
      _implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    wrapERC721(
      _implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewTokenWrapped(address)"(_token?: null): NewTokenWrappedEventFilter;
    NewTokenWrapped(_token?: null): NewTokenWrappedEventFilter;
  };

  estimateGas: {
    wrap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrapERC1155(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrapERC20(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrapERC721(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    wrap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrapERC1155(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrapERC20(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrapERC721(
      _implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
