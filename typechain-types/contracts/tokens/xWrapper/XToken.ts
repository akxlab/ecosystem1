/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface XTokenInterface extends utils.Interface {
  functions: {
    "burnable()": FunctionFragment;
    "lockToken(uint256)": FunctionFragment;
    "mintable()": FunctionFragment;
    "safeTransferToken(address,address,uint256)": FunctionFragment;
    "safeTransferToken(address,uint256)": FunctionFragment;
    "tokenType()": FunctionFragment;
    "unlockToken()": FunctionFragment;
    "xTokenName()": FunctionFragment;
    "xTokenPrice()": FunctionFragment;
    "xTokenSupply()": FunctionFragment;
    "xTokenSymbol()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnable"
      | "lockToken"
      | "mintable"
      | "safeTransferToken(address,address,uint256)"
      | "safeTransferToken(address,uint256)"
      | "tokenType"
      | "unlockToken"
      | "xTokenName"
      | "xTokenPrice"
      | "xTokenSupply"
      | "xTokenSymbol"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "burnable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "mintable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferToken(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferToken(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "tokenType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenSymbol",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "burnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferToken(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xTokenName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xTokenSymbol",
    data: BytesLike
  ): Result;

  events: {};
}

export interface XToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockToken(
      until: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferToken(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferToken(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    xTokenName(overrides?: CallOverrides): Promise<[string]>;

    xTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    xTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    xTokenSymbol(overrides?: CallOverrides): Promise<[string]>;
  };

  burnable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockToken(
    until: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferToken(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferToken(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenType(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  xTokenName(overrides?: CallOverrides): Promise<string>;

  xTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  xTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  xTokenSymbol(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    burnable(overrides?: CallOverrides): Promise<boolean>;

    lockToken(
      until: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintable(overrides?: CallOverrides): Promise<boolean>;

    "safeTransferToken(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferToken(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenType(overrides?: CallOverrides): Promise<string>;

    unlockToken(overrides?: CallOverrides): Promise<void>;

    xTokenName(overrides?: CallOverrides): Promise<string>;

    xTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    xTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    xTokenSymbol(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    burnable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockToken(
      until: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferToken(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferToken(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    xTokenName(overrides?: CallOverrides): Promise<BigNumber>;

    xTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    xTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    xTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    burnable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockToken(
      until: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferToken(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferToken(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    xTokenName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xTokenSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
