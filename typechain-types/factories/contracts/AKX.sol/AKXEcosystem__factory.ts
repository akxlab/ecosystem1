/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AKXEcosystem,
  AKXEcosystemInterface,
} from "../../../contracts/AKX.sol/AKXEcosystem";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "rootResolver",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "initOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dao",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "labz",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dex",
        type: "address",
      },
    ],
    name: "AKXEcosystemInitialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "cName",
        type: "bytes32",
      },
    ],
    name: "Controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "LabzToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "Pools",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "PriceOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "mName",
        type: "bytes32",
      },
    ],
    name: "getModule",
    outputs: [
      {
        internalType: "contract IModule",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IAKX.Registry",
        name: "",
        type: "uint8",
      },
    ],
    name: "getRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IAKX.Resolvers",
        name: "",
        type: "uint8",
      },
    ],
    name: "getResolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getUser",
    outputs: [
      {
        internalType: "contract IEIP721U",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806385acd6411161005b57806385acd64114610129578063ae07599314610159578063b0467deb14610177578063cae9c261146101a757610088565b80633406e10d1461008d578063554cb0f0146100ab57806377767d82146100c957806380d9452f146100f9575b600080fd5b6100956101d7565b6040516100a2919061024a565b60405180910390f35b6100b36101dc565b6040516100c0919061024a565b60405180910390f35b6100e360048036038101906100de91906102a0565b6101e1565b6040516100f0919061024a565b60405180910390f35b610113600480360381019061010e91906102f2565b6101e8565b604051610120919061024a565b60405180910390f35b610143600480360381019061013e91906102a0565b6101ef565b604051610150919061037e565b60405180910390f35b6101616101f6565b60405161016e9190610457565b60405180910390f35b610191600480360381019061018c91906104af565b6101fb565b60405161019e91906104fd565b60405180910390f35b6101c160048036038101906101bc919061053d565b610202565b6040516101ce919061024a565b60405180910390f35b600090565b600090565b6000919050565b6000919050565b6000919050565b606090565b6000919050565b6000919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023482610209565b9050919050565b61024481610229565b82525050565b600060208201905061025f600083018461023b565b92915050565b600080fd5b6000819050919050565b61027d8161026a565b811461028857600080fd5b50565b60008135905061029a81610274565b92915050565b6000602082840312156102b6576102b5610265565b5b60006102c48482850161028b565b91505092915050565b600481106102da57600080fd5b50565b6000813590506102ec816102cd565b92915050565b60006020828403121561030857610307610265565b5b6000610316848285016102dd565b91505092915050565b6000819050919050565b600061034461033f61033a84610209565b61031f565b610209565b9050919050565b600061035682610329565b9050919050565b60006103688261034b565b9050919050565b6103788161035d565b82525050565b6000602082019050610393600083018461036f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6103ce81610229565b82525050565b60006103e083836103c5565b60208301905092915050565b6000602082019050919050565b600061040482610399565b61040e81856103a4565b9350610419836103b5565b8060005b8381101561044a57815161043188826103d4565b975061043c836103ec565b92505060018101905061041d565b5085935050505092915050565b6000602082019050818103600083015261047181846103f9565b905092915050565b6000819050919050565b61048c81610479565b811461049757600080fd5b50565b6000813590506104a981610483565b92915050565b6000602082840312156104c5576104c4610265565b5b60006104d38482850161049a565b91505092915050565b60006104e78261034b565b9050919050565b6104f7816104dc565b82525050565b600060208201905061051260008301846104ee565b92915050565b6006811061052557600080fd5b50565b60008135905061053781610518565b92915050565b60006020828403121561055357610552610265565b5b600061056184828501610528565b9150509291505056fea264697066735822122083958788981c8e97208e757b4ef0de8a87864b004ddcb592983b774fd6dc2fc164736f6c63430008100033";

type AKXEcosystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AKXEcosystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AKXEcosystem__factory extends ContractFactory {
  constructor(...args: AKXEcosystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AKXEcosystem> {
    return super.deploy(overrides || {}) as Promise<AKXEcosystem>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AKXEcosystem {
    return super.attach(address) as AKXEcosystem;
  }
  override connect(signer: Signer): AKXEcosystem__factory {
    return super.connect(signer) as AKXEcosystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AKXEcosystemInterface {
    return new utils.Interface(_abi) as AKXEcosystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AKXEcosystem {
    return new Contract(address, _abi, signerOrProvider) as AKXEcosystem;
  }
}
