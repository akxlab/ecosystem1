/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LibMath,
  LibMathInterface,
} from "../../../contracts/LabzERC2055/LibMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "qty",
        type: "uint256",
      },
    ],
    name: "calculateFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maticsAmount",
        type: "uint256",
      },
    ],
    name: "calculateTokenQty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6102b7610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806399a5d74714610045578063a49a52b614610075575b600080fd5b61005f600480360381019061005a9190610141565b6100a5565b60405161006c919061017d565b60405180910390f35b61008f600480360381019061008a9190610141565b6100e4565b60405161009c919061017d565b60405180910390f35b6000806298968090506000620f42409050620f42408282866100c791906101c7565b6100d191906101c7565b6100db9190610250565b92505050919050565b600080670214e8348c4f0000905080836100fe9190610250565b915050919050565b600080fd5b6000819050919050565b61011e8161010b565b811461012957600080fd5b50565b60008135905061013b81610115565b92915050565b60006020828403121561015757610156610106565b5b60006101658482850161012c565b91505092915050565b6101778161010b565b82525050565b6000602082019050610192600083018461016e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101d28261010b565b91506101dd8361010b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561021657610215610198565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061025b8261010b565b91506102668361010b565b92508261027657610275610221565b5b82820490509291505056fea264697066735822122015511f3b079602a7a02184ffd355852e8a45100a83acd4c038dd9dc5e1f76ed764736f6c63430008100033";

type LibMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibMath__factory extends ContractFactory {
  constructor(...args: LibMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibMath> {
    return super.deploy(overrides || {}) as Promise<LibMath>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibMath {
    return super.attach(address) as LibMath;
  }
  override connect(signer: Signer): LibMath__factory {
    return super.connect(signer) as LibMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibMathInterface {
    return new utils.Interface(_abi) as LibMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibMath {
    return new Contract(address, _abi, signerOrProvider) as LibMath;
  }
}
