/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IAKX, IAKXInterface } from "../../../contracts/interfaces/IAKX";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "rootResolver",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "initOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dao",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "labz",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dex",
        type: "address",
      },
    ],
    name: "AKXEcosystemInitialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "cName",
        type: "bytes32",
      },
    ],
    name: "Controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "LabzToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "Pools",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "PriceOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "mName",
        type: "bytes32",
      },
    ],
    name: "getModule",
    outputs: [
      {
        internalType: "contract IModule",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IAKX.Registry",
        name: "",
        type: "uint8",
      },
    ],
    name: "getRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IAKX.Resolvers",
        name: "",
        type: "uint8",
      },
    ],
    name: "getResolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getUser",
    outputs: [
      {
        internalType: "contract IEIP721U",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IAKX__factory {
  static readonly abi = _abi;
  static createInterface(): IAKXInterface {
    return new utils.Interface(_abi) as IAKXInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IAKX {
    return new Contract(address, _abi, signerOrProvider) as IAKX;
  }
}
