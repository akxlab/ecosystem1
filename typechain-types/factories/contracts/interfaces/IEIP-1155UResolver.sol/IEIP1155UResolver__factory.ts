/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEIP1155UResolver,
  IEIP1155UResolverInterface,
} from "../../../../contracts/interfaces/IEIP-1155UResolver.sol/IEIP1155UResolver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "AddedToEIP1155UResolver",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "addToResolver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "isResolvable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
        ],
        internalType: "struct IEIP1155UResolver.ResolverRequest",
        name: "",
        type: "tuple",
      },
    ],
    name: "resolve",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "isError",
            type: "bool",
          },
          {
            internalType: "string",
            name: "errMsg",
            type: "string",
          },
        ],
        internalType: "struct IEIP1155UResolver.ResolverResponse",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IEIP1155UResolver__factory {
  static readonly abi = _abi;
  static createInterface(): IEIP1155UResolverInterface {
    return new utils.Interface(_abi) as IEIP1155UResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEIP1155UResolver {
    return new Contract(address, _abi, signerOrProvider) as IEIP1155UResolver;
  }
}
