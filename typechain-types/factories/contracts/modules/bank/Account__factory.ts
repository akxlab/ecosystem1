/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Account,
  AccountInterface,
} from "../../../../contracts/modules/bank/Account";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "reqId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "accountAddress",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
      },
    ],
    name: "SignAccountRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "reqId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "signatureId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
      },
    ],
    name: "SignatureVerificationRequest",
    type: "event",
  },
  {
    inputs: [],
    name: "_accountOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_accountType",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAccountAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_for",
        type: "address",
      },
      {
        internalType: "string",
        name: "_aType",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "keyParts",
        type: "bytes",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "reqId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "setAccountSignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "setKeyParts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_reqId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    name: "setSignatureVerificationResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "signatureId",
        type: "bytes32",
      },
    ],
    name: "verifyDilithiumSignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003960201b60201c565b61004160201b60201c565b60018081905550610106565b600033905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6117e4806101156000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063694be0e011610071578063694be0e01461013e578063715018a61461015a5780638da5cb5b14610164578063ac1cf0a214610182578063edaed5e41461019e578063f2fde38b146101bc576100a9565b80630e2562d9146100ae5780630eb624be146100cc5780632c9137e5146100e857806337c6b0411461010457806365ed997014610122575b600080fd5b6100b66101d8565b6040516100c39190610a70565b60405180910390f35b6100e660048036038101906100e19190610cc4565b610202565b005b61010260048036038101906100fd9190610d4f565b610335565b005b61010c61036f565b6040516101199190610e17565b60405180910390f35b61013c60048036038101906101379190610e6f565b6103fd565b005b61015860048036038101906101539190610eaf565b6104c8565b005b61016261056d565b005b61016c610581565b6040516101799190610f1a565b60405180910390f35b61019c60048036038101906101979190610f6b565b6105aa565b005b6101a6610639565b6040516101b39190610f1a565b60405180910390f35b6101d660048036038101906101d19190610f98565b61065f565b005b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001151560008054906101000a900460ff16151503610256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024d90611011565b60405180910390fd5b82600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600b90816102a6919061123d565b503073ffffffffffffffffffffffffffffffffffffffff16632c9137e5826040518263ffffffff1660e01b81526004016102e09190611364565b600060405180830381600087803b1580156102fa57600080fd5b505af115801561030e573d6000803e3d6000fd5b5050505061031a6106e2565b60006103246101d8565b905061032f816107b7565b50505050565b61033d610839565b8060405160200161034e9190611364565b604051602081830303815290604052600e908161036b91906113e1565b5050565b600b805461037c90611060565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890611060565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b610405610839565b6005600083815260200190815260200160002060009054906101000a900460ff16610465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045c906114ff565b60405180910390fd5b6005600083815260200190815260200160002060006101000a81549060ff02191690556001811461049757600061049a565b60015b6006600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6104d0610839565b6008600083815260200190815260200160002060009054906101000a900460ff16610530576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105279061156b565b60405180910390fd5b806040516020016105419190611364565b604051602081830303815290604052600c908161055e91906113e1565b5061056960036108b7565b5050565b610575610839565b61057f60006108cd565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105b2610839565b6001600560006105c26002610992565b815260200190815260200160002060006101000a81548160ff0219169083151502179055507f36f54ec3a7cf25c24a447a6faf9cf0412971901c73e70df286a52b97229733fd6106126002610992565b82600e6040516106249392919061162d565b60405180910390a161063660026108b7565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610667610839565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906116dd565b60405180910390fd5b6106df816108cd565b50565b610775600e80546106f290611060565b80601f016020809104026020016040519081016040528092919081815260200182805461071e90611060565b801561076b5780601f106107405761010080835404028352916020019161076b565b820191906000526020600020905b81548152906001019060200180831161074e57829003601f168201915b50505050506109a0565b600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006107c36003610992565b905060016008600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f1c2f922514852d5d33dcab0e5a1d6b462f69b5ed78fd3774f8fd269136f576c98161081c846109c3565b600e60405161082d939291906116fd565b60405180910390a15050565b610841610a27565b73ffffffffffffffffffffffffffffffffffffffff1661085f610581565b73ffffffffffffffffffffffffffffffffffffffff16146108b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ac9061178e565b60405180910390fd5b565b6001816000016000828254019250508190555050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b600060148251146109b057600080fd5b600c6101000a6020830151049050919050565b6060601467ffffffffffffffff8111156109e0576109df610af8565b5b6040519080825280601f01601f191660200182016040528015610a125781602001600182028036833780820191505090505b509050600c6101000a82026020820152919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5a82610a2f565b9050919050565b610a6a81610a4f565b82525050565b6000602082019050610a856000830184610a61565b92915050565b6000604051905090565b600080fd5b600080fd5b6000610aaa82610a2f565b9050919050565b610aba81610a9f565b8114610ac557600080fd5b50565b600081359050610ad781610ab1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b3082610ae7565b810181811067ffffffffffffffff82111715610b4f57610b4e610af8565b5b80604052505050565b6000610b62610a8b565b9050610b6e8282610b27565b919050565b600067ffffffffffffffff821115610b8e57610b8d610af8565b5b610b9782610ae7565b9050602081019050919050565b82818337600083830152505050565b6000610bc6610bc184610b73565b610b58565b905082815260208101848484011115610be257610be1610ae2565b5b610bed848285610ba4565b509392505050565b600082601f830112610c0a57610c09610add565b5b8135610c1a848260208601610bb3565b91505092915050565b600067ffffffffffffffff821115610c3e57610c3d610af8565b5b610c4782610ae7565b9050602081019050919050565b6000610c67610c6284610c23565b610b58565b905082815260208101848484011115610c8357610c82610ae2565b5b610c8e848285610ba4565b509392505050565b600082601f830112610cab57610caa610add565b5b8135610cbb848260208601610c54565b91505092915050565b600080600060608486031215610cdd57610cdc610a95565b5b6000610ceb86828701610ac8565b935050602084013567ffffffffffffffff811115610d0c57610d0b610a9a565b5b610d1886828701610bf5565b925050604084013567ffffffffffffffff811115610d3957610d38610a9a565b5b610d4586828701610c96565b9150509250925092565b600060208284031215610d6557610d64610a95565b5b600082013567ffffffffffffffff811115610d8357610d82610a9a565b5b610d8f84828501610c96565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dd2578082015181840152602081019050610db7565b60008484015250505050565b6000610de982610d98565b610df38185610da3565b9350610e03818560208601610db4565b610e0c81610ae7565b840191505092915050565b60006020820190508181036000830152610e318184610dde565b905092915050565b6000819050919050565b610e4c81610e39565b8114610e5757600080fd5b50565b600081359050610e6981610e43565b92915050565b60008060408385031215610e8657610e85610a95565b5b6000610e9485828601610e5a565b9250506020610ea585828601610e5a565b9150509250929050565b60008060408385031215610ec657610ec5610a95565b5b6000610ed485828601610e5a565b925050602083013567ffffffffffffffff811115610ef557610ef4610a9a565b5b610f0185828601610c96565b9150509250929050565b610f1481610a9f565b82525050565b6000602082019050610f2f6000830184610f0b565b92915050565b6000819050919050565b610f4881610f35565b8114610f5357600080fd5b50565b600081359050610f6581610f3f565b92915050565b600060208284031215610f8157610f80610a95565b5b6000610f8f84828501610f56565b91505092915050565b600060208284031215610fae57610fad610a95565b5b6000610fbc84828501610ac8565b91505092915050565b7f616c726561647920696e697469616c697a656400000000000000000000000000600082015250565b6000610ffb601383610da3565b915061100682610fc5565b602082019050919050565b6000602082019050818103600083015261102a81610fee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061107857607f821691505b60208210810361108b5761108a611031565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026110f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110b6565b6110fd86836110b6565b95508019841693508086168417925050509392505050565b6000819050919050565b600061113a61113561113084610e39565b611115565b610e39565b9050919050565b6000819050919050565b6111548361111f565b61116861116082611141565b8484546110c3565b825550505050565b600090565b61117d611170565b61118881848461114b565b505050565b5b818110156111ac576111a1600082611175565b60018101905061118e565b5050565b601f8211156111f1576111c281611091565b6111cb846110a6565b810160208510156111da578190505b6111ee6111e6856110a6565b83018261118d565b50505b505050565b600082821c905092915050565b6000611214600019846008026111f6565b1980831691505092915050565b600061122d8383611203565b9150826002028217905092915050565b61124682610d98565b67ffffffffffffffff81111561125f5761125e610af8565b5b6112698254611060565b6112748282856111b0565b600060209050601f8311600181146112a75760008415611295578287015190505b61129f8582611221565b865550611307565b601f1984166112b586611091565b60005b828110156112dd578489015182556001820191506020850194506020810190506112b8565b868310156112fa57848901516112f6601f891682611203565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b60006113368261130f565b611340818561131a565b9350611350818560208601610db4565b61135981610ae7565b840191505092915050565b6000602082019050818103600083015261137e818461132b565b905092915050565b60008190508160005260206000209050919050565b601f8211156113dc576113ad81611386565b6113b6846110a6565b810160208510156113c5578190505b6113d96113d1856110a6565b83018261118d565b50505b505050565b6113ea8261130f565b67ffffffffffffffff81111561140357611402610af8565b5b61140d8254611060565b61141882828561139b565b600060209050601f83116001811461144b5760008415611439578287015190505b6114438582611221565b8655506114ab565b601f19841661145986611386565b60005b828110156114815784890151825560018201915060208501945060208101905061145c565b8683101561149e578489015161149a601f891682611203565b8355505b6001600288020188555050505b505050505050565b7f696e76616c696420726571756573742069640000000000000000000000000000600082015250565b60006114e9601283610da3565b91506114f4826114b3565b602082019050919050565b60006020820190508181036000830152611518816114dc565b9050919050565b7f696e76616c696420726571756573740000000000000000000000000000000000600082015250565b6000611555600f83610da3565b91506115608261151f565b602082019050919050565b6000602082019050818103600083015261158481611548565b9050919050565b61159481610e39565b82525050565b6115a381610f35565b82525050565b600081546115b681611060565b6115c0818661131a565b945060018216600081146115db57600181146115f157611624565b60ff198316865281151560200286019350611624565b6115fa85611386565b60005b8381101561161c578154818901526001820191506020810190506115fd565b808801955050505b50505092915050565b6000606082019050611642600083018661158b565b61164f602083018561159a565b818103604083015261166181846115a9565b9050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116c7602683610da3565b91506116d28261166b565b604082019050919050565b600060208201905081810360008301526116f6816116ba565b9050919050565b6000606082019050611712600083018661158b565b8181036020830152611724818561132b565b9050818103604083015261173881846115a9565b9050949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611778602083610da3565b915061178382611742565b602082019050919050565b600060208201905081810360008301526117a78161176b565b905091905056fea26469706673582212204fb8e240c2002c8ba6a1e7eef208a23bf92be3564a107baee864909c68084ce864736f6c63430008100033";

type AccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Account__factory extends ContractFactory {
  constructor(...args: AccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Account> {
    return super.deploy(overrides || {}) as Promise<Account>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Account {
    return super.attach(address) as Account;
  }
  override connect(signer: Signer): Account__factory {
    return super.connect(signer) as Account__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountInterface {
    return new utils.Interface(_abi) as AccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Account {
    return new Contract(address, _abi, signerOrProvider) as Account;
  }
}
