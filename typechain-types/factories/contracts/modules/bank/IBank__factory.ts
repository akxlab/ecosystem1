/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBank,
  IBankInterface,
} from "../../../../contracts/modules/bank/IBank";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_feeValue",
        type: "uint256",
      },
    ],
    name: "LogFeeEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum IBank.OperationType",
        name: "oType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_identifier",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "LogOperationEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address[]",
        name: "founders",
        type: "address[]",
      },
      {
        indexed: true,
        internalType: "address",
        name: "bankAddress",
        type: "address",
      },
    ],
    name: "NewBank",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "founder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allocation",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedUntil",
        type: "uint256",
      },
    ],
    name: "NewFounder",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "opType",
        type: "string",
      },
    ],
    name: "OpType",
    outputs: [
      {
        internalType: "enum IBank.OperationType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "OpenBank",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "PauseBank",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "founder",
        type: "address",
      },
    ],
    name: "deRegisterFounder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getAccountInfo",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "founder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allocation",
        type: "uint256",
      },
    ],
    name: "registerFounder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "multi",
        type: "address",
      },
    ],
    name: "sendToMultisignatureVault",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "multi",
        type: "address",
      },
    ],
    name: "setMultisignatureWallet",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IBank__factory {
  static readonly abi = _abi;
  static createInterface(): IBankInterface {
    return new utils.Interface(_abi) as IBankInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IBank {
    return new Contract(address, _abi, signerOrProvider) as IBank;
  }
}
