/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  UserRegistry,
  UserRegistryInterface,
} from "../../../../contracts/modules/users/UserRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "UserCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "UserDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "UserSuspended",
    type: "event",
  },
  {
    inputs: [],
    name: "deRegisterUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "recoverUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "resolve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "suspendUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verifyUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506200003262000026620000b760201b60201c565b620000bf60201b60201c565b6040518060600160405280603981526020016200108660399139600190816200005c919062000609565b5062000074600d6200018360201b620002201760201c565b620000846200019960201b60201c565b600b600181600181540180825580915050039060005260206000205050620000b16200020d60201b60201c565b62000a81565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b60011515600060149054906101000a900460ff16151503620001f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e99062000751565b60405180910390fd5b620002056000436200028360201b60201c565b600c81905550565b60011515600060149054906101000a900460ff1615150362000266576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025d9062000751565b60405180910390fd5b6001600060146101000a81548160ff021916908315150217905550565b6000600260616040516020016200029b9190620007c3565b60405160208183030381529060405284604051602001620002bd919062000825565b60405160208183030381529060405284604051602001620002df919062000867565b60405160208183030381529060405260016040516020016200030291906200091e565b604051602081830303815290604052604051602001620003269493929190620009b0565b604051602081830303815290604052604051620003449190620009f6565b602060405180830381855afa15801562000362573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000387919062000a4f565b905092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200041157607f821691505b602082108103620004275762000426620003c9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000452565b6200049d868362000452565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004ea620004e4620004de84620004b5565b620004bf565b620004b5565b9050919050565b6000819050919050565b6200050683620004c9565b6200051e6200051582620004f1565b8484546200045f565b825550505050565b600090565b6200053562000526565b62000542818484620004fb565b505050565b5b818110156200056a576200055e6000826200052b565b60018101905062000548565b5050565b601f821115620005b95762000583816200042d565b6200058e8462000442565b810160208510156200059e578190505b620005b6620005ad8562000442565b83018262000547565b50505b505050565b600082821c905092915050565b6000620005de60001984600802620005be565b1980831691505092915050565b6000620005f98383620005cb565b9150826002028217905092915050565b62000614826200038f565b67ffffffffffffffff81111562000630576200062f6200039a565b5b6200063c8254620003f8565b620006498282856200056e565b600060209050601f8311600181146200068157600084156200066c578287015190505b620006788582620005eb565b865550620006e8565b601f19841662000691866200042d565b60005b82811015620006bb5784890151825560018201915060208501945060208101905062000694565b86831015620006db5784890151620006d7601f891682620005cb565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f616c726561647920696e697469616c697a656400000000000000000000000000600082015250565b600062000739601383620006f0565b9150620007468262000701565b602082019050919050565b600060208201905081810360008301526200076c816200072a565b9050919050565b6000819050919050565b600060ff82169050919050565b6000620007ab620007a56200079f8462000773565b620004bf565b6200077d565b9050919050565b620007bd816200078a565b82525050565b6000602082019050620007da6000830184620007b2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200080d82620007e0565b9050919050565b6200081f8162000800565b82525050565b60006020820190506200083c600083018462000814565b92915050565b6000819050919050565b620008616200085b82620004b5565b62000842565b82525050565b60006200087582846200084c565b60208201915081905092915050565b600081905092915050565b600081546200089e81620003f8565b620008aa818662000884565b94506001821660008114620008c85760018114620008de5762000915565b60ff198316865281151582028601935062000915565b620008e9856200042d565b60005b838110156200090d57815481890152600182019150602081019050620008ec565b838801955050505b50505092915050565b60006200092c82846200088f565b915081905092915050565b600081519050919050565b600081905092915050565b60005b838110156200096d57808201518184015260208101905062000950565b60008484015250505050565b6000620009868262000937565b62000992818562000942565b9350620009a48185602086016200094d565b80840191505092915050565b6000620009be828762000979565b9150620009cc828662000979565b9150620009da828562000979565b9150620009e8828462000979565b915081905095945050505050565b600062000a04828462000979565b915081905092915050565b600080fd5b6000819050919050565b62000a298162000a14565b811462000a3557600080fd5b50565b60008151905062000a498162000a1e565b92915050565b60006020828403121562000a685762000a6762000a0f565b5b600062000a788482850162000a38565b91505092915050565b6105f58062000a916000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100c057806395407482146100de578063e322494d146100e8578063f2fde38b146100f2578063f8cdcee31461010e57610093565b80632810e1d6146100985780634d3820eb146100a2578063715018a6146100ac5780637bbc288c146100b6575b600080fd5b6100a061012a565b005b6100aa61012c565b005b6100b4610136565b005b6100be61014a565b005b6100c8610154565b6040516100d591906103c1565b60405180910390f35b6100e661017d565b005b6100f0610187565b005b61010c6004803603810190610107919061040d565b610191565b005b61012860048036038101906101239190610470565b610214565b005b565b610134610236565b565b61013e610236565b61014860006102b4565b565b610152610236565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610185610236565b565b61018f610236565b565b610199610236565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff90610533565b60405180910390fd5b610211816102b4565b50565b61021c610236565b5050565b6001816000016000828254019250508190555050565b61023e610378565b73ffffffffffffffffffffffffffffffffffffffff1661025c610154565b73ffffffffffffffffffffffffffffffffffffffff16146102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a99061059f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ab82610380565b9050919050565b6103bb816103a0565b82525050565b60006020820190506103d660008301846103b2565b92915050565b600080fd5b6103ea816103a0565b81146103f557600080fd5b50565b600081359050610407816103e1565b92915050565b600060208284031215610423576104226103dc565b5b6000610431848285016103f8565b91505092915050565b6000819050919050565b61044d8161043a565b811461045857600080fd5b50565b60008135905061046a81610444565b92915050565b60008060408385031215610487576104866103dc565b5b6000610495858286016103f8565b92505060206104a68582860161045b565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061051d6026836104b0565b9150610528826104c1565b604082019050919050565b6000602082019050818103600083015261054c81610510565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006105896020836104b0565b915061059482610553565b602082019050919050565b600060208201905081810360008301526105b88161057c565b905091905056fea26469706673582212202b8d53ad88169b5a30279ee7f10c5ccbdaeb3566dad994230decdf5d9dd2189e64736f6c63430008100033506c75746f206973206120706c616e6574206461726520796f7520736179206e6f20616e6420696c6c2073656e6420796f752074686572652e";

type UserRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserRegistry__factory extends ContractFactory {
  constructor(...args: UserRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserRegistry> {
    return super.deploy(overrides || {}) as Promise<UserRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UserRegistry {
    return super.attach(address) as UserRegistry;
  }
  override connect(signer: Signer): UserRegistry__factory {
    return super.connect(signer) as UserRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserRegistryInterface {
    return new utils.Interface(_abi) as UserRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserRegistry {
    return new Contract(address, _abi, signerOrProvider) as UserRegistry;
  }
}
