/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  MetaDataResolver,
  MetaDataResolverInterface,
} from "../../../contracts/resolvers/MetaDataResolver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "metaid",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "keyid",
        type: "bytes32",
      },
    ],
    name: "MetaDataAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "keyStr",
        type: "string",
      },
    ],
    name: "metaValue",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
          {
            internalType: "enum MetaDataResolver.DataTypes",
            name: "dType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "dValue",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "editable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "encrypted",
            type: "bool",
          },
        ],
        internalType: "struct MetaDataResolver.KeyValMeta",
        name: "kv",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "metadata",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "keyStr",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_dtype",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "editable",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "encrypted",
        type: "bool",
      },
    ],
    name: "setMetaData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

export class MetaDataResolver__factory {
  static readonly abi = _abi;
  static createInterface(): MetaDataResolverInterface {
    return new utils.Interface(_abi) as MetaDataResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaDataResolver {
    return new Contract(address, _abi, signerOrProvider) as MetaDataResolver;
  }
}
