/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AKXEcosystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXEcosystem__factory>;
    getContractFactory(
      name: "BaseController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseController__factory>;
    getContractFactory(
      name: "UserController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserController__factory>;
    getContractFactory(
      name: "IAKX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAKX__factory>;
    getContractFactory(
      name: "IController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IController__factory>;
    getContractFactory(
      name: "IEIP1155U",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP1155U__factory>;
    getContractFactory(
      name: "IEIP1155UReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP1155UReceiver__factory>;
    getContractFactory(
      name: "IEIP1155UResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP1155UResolver__factory>;
    getContractFactory(
      name: "IEIP1155UMetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP1155UMetadataURI__factory>;
    getContractFactory(
      name: "IEIP721U",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP721U__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleRegistry__factory>;
    getContractFactory(
      name: "IRouteBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouteBridge__factory>;
    getContractFactory(
      name: "IBridgeTransaction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeTransaction__factory>;
    getContractFactory(
      name: "IRootBridgeObserver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRootBridgeObserver__factory>;
    getContractFactory(
      name: "IUser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUser__factory>;
    getContractFactory(
      name: "IUserRecord",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUserRecord__factory>;
    getContractFactory(
      name: "IUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUserRegistry__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "Account",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Account__factory>;
    getContractFactory(
      name: "Bank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bank__factory>;
    getContractFactory(
      name: "IBank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBank__factory>;
    getContractFactory(
      name: "BaseModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseModule__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidRegistry__factory>;
    getContractFactory(
      name: "DummyModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyModule__factory>;
    getContractFactory(
      name: "ModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleRegistry__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "PoolModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolModule__factory>;
    getContractFactory(
      name: "UDS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UDS__factory>;
    getContractFactory(
      name: "UserDataServiceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserDataServiceResolver__factory>;
    getContractFactory(
      name: "AKXGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXGateway__factory>;
    getContractFactory(
      name: "BaseUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUserRegistry__factory>;
    getContractFactory(
      name: "AllResolvers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllResolvers__factory>;
    getContractFactory(
      name: "BaseResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseResolver__factory>;
    getContractFactory(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidRegistry__factory>;
    getContractFactory(
      name: "IdentResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentResolver__factory>;
    getContractFactory(
      name: "MetaDataResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaDataResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "ProfileResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileResolver__factory>;
    getContractFactory(
      name: "EIP1155U",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP1155U__factory>;
    getContractFactory(
      name: "EIP1155UHolder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP1155UHolder__factory>;
    getContractFactory(
      name: "EIP1155UReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP1155UReceiver__factory>;
    getContractFactory(
      name: "EIP1155UStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP1155UStorage__factory>;
    getContractFactory(
      name: "ERC2055",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2055__factory>;
    getContractFactory(
      name: "ERC2055Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2055Storage__factory>;
    getContractFactory(
      name: "IERC2055",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2055__factory>;
    getContractFactory(
      name: "ERC2055Implementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2055Implementation__factory>;
    getContractFactory(
      name: "IxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IxToken__factory>;
    getContractFactory(
      name: "IxWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IxWrapper__factory>;
    getContractFactory(
      name: "XToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XToken__factory>;
    getContractFactory(
      name: "XTokenERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XTokenERC20__factory>;
    getContractFactory(
      name: "XWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XWrapper__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AKXEcosystem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXEcosystem>;
    getContractAt(
      name: "BaseController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseController>;
    getContractAt(
      name: "UserController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserController>;
    getContractAt(
      name: "IAKX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAKX>;
    getContractAt(
      name: "IController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IController>;
    getContractAt(
      name: "IEIP1155U",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP1155U>;
    getContractAt(
      name: "IEIP1155UReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP1155UReceiver>;
    getContractAt(
      name: "IEIP1155UResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP1155UResolver>;
    getContractAt(
      name: "IEIP1155UMetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP1155UMetadataURI>;
    getContractAt(
      name: "IEIP721U",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP721U>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IModuleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleRegistry>;
    getContractAt(
      name: "IRouteBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouteBridge>;
    getContractAt(
      name: "IBridgeTransaction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeTransaction>;
    getContractAt(
      name: "IRootBridgeObserver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRootBridgeObserver>;
    getContractAt(
      name: "IUser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUser>;
    getContractAt(
      name: "IUserRecord",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUserRecord>;
    getContractAt(
      name: "IUserRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUserRegistry>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "Account",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Account>;
    getContractAt(
      name: "Bank",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bank>;
    getContractAt(
      name: "IBank",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBank>;
    getContractAt(
      name: "BaseModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseModule>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "DidRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DidRegistry>;
    getContractAt(
      name: "DummyModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyModule>;
    getContractAt(
      name: "ModuleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleRegistry>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "PoolModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolModule>;
    getContractAt(
      name: "UDS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UDS>;
    getContractAt(
      name: "UserDataServiceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserDataServiceResolver>;
    getContractAt(
      name: "AKXGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXGateway>;
    getContractAt(
      name: "BaseUserRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUserRegistry>;
    getContractAt(
      name: "AllResolvers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllResolvers>;
    getContractAt(
      name: "BaseResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseResolver>;
    getContractAt(
      name: "DidRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DidRegistry>;
    getContractAt(
      name: "IdentResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentResolver>;
    getContractAt(
      name: "MetaDataResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaDataResolver>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "ProfileResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileResolver>;
    getContractAt(
      name: "EIP1155U",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP1155U>;
    getContractAt(
      name: "EIP1155UHolder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP1155UHolder>;
    getContractAt(
      name: "EIP1155UReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP1155UReceiver>;
    getContractAt(
      name: "EIP1155UStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP1155UStorage>;
    getContractAt(
      name: "ERC2055",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2055>;
    getContractAt(
      name: "ERC2055Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2055Storage>;
    getContractAt(
      name: "IERC2055",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2055>;
    getContractAt(
      name: "ERC2055Implementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2055Implementation>;
    getContractAt(
      name: "IxToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IxToken>;
    getContractAt(
      name: "IxWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IxWrapper>;
    getContractAt(
      name: "XToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XToken>;
    getContractAt(
      name: "XTokenERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XTokenERC20>;
    getContractAt(
      name: "XWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XWrapper>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
