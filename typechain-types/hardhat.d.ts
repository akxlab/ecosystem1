/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUnset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUnset__factory>;
    getContractFactory(
      name: "ERC725YCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC725YCore__factory>;
    getContractFactory(
      name: "IERC725Y",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC725Y__factory>;
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20WrapperUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WrapperUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "ERC721URIStorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorageUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot__factory>;
    getContractFactory(
      name: "ERC20Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "ConditionalEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalEscrow__factory>;
    getContractFactory(
      name: "Escrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Escrow__factory>;
    getContractFactory(
      name: "RefundEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundEscrow__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AKXSystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXSystem__factory>;
    getContractFactory(
      name: "BaseController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseController__factory>;
    getContractFactory(
      name: "PrivateSaleController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrivateSaleController__factory>;
    getContractFactory(
      name: "RootController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootController__factory>;
    getContractFactory(
      name: "IAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuth__factory>;
    getContractFactory(
      name: "IEIP721U",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP721U__factory>;
    getContractFactory(
      name: "ILogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILogic__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleRegistry__factory>;
    getContractFactory(
      name: "IUserRecord",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUserRecord__factory>;
    getContractFactory(
      name: "IUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUserRegistry__factory>;
    getContractFactory(
      name: "Rewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Rewards__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "FeeCollectionLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeCollectionLogic__factory>;
    getContractFactory(
      name: "LockLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockLogic__factory>;
    getContractFactory(
      name: "PrivateBuyingLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrivateBuyingLogic__factory>;
    getContractFactory(
      name: "PrivateSaleLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrivateSaleLogic__factory>;
    getContractFactory(
      name: "ReferralLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReferralLogic__factory>;
    getContractFactory(
      name: "ISignatureValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureValidator__factory>;
    getContractFactory(
      name: "SignMessageLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignMessageLogic__factory>;
    getContractFactory(
      name: "BaseModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseModule__factory>;
    getContractFactory(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidRegistry__factory>;
    getContractFactory(
      name: "ModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleRegistry__factory>;
    getContractFactory(
      name: "ModulesManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModulesManager__factory>;
    getContractFactory(
      name: "ModuleStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleStorage__factory>;
    getContractFactory(
      name: "UDS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UDS__factory>;
    getContractFactory(
      name: "UserDataServiceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserDataServiceResolver__factory>;
    getContractFactory(
      name: "AkxWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AkxWallet__factory>;
    getContractFactory(
      name: "AKXWalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXWalletFactory__factory>;
    getContractFactory(
      name: "FallbackManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FallbackManager__factory>;
    getContractFactory(
      name: "AkxWalletManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AkxWalletManager__factory>;
    getContractFactory(
      name: "NonCustodialWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonCustodialWallet__factory>;
    getContractFactory(
      name: "AKXProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXProxy__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "AKXProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXProxyFactory__factory>;
    getContractFactory(
      name: "IProxyCreationCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyCreationCallback__factory>;
    getContractFactory(
      name: "BaseUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUserRegistry__factory>;
    getContractFactory(
      name: "Identity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Identity__factory>;
    getContractFactory(
      name: "IdentitySigner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentitySigner__factory>;
    getContractFactory(
      name: "IIdentity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentity__factory>;
    getContractFactory(
      name: "IdentityRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentityRegistry__factory>;
    getContractFactory(
      name: "AllResolvers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllResolvers__factory>;
    getContractFactory(
      name: "BaseResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseResolver__factory>;
    getContractFactory(
      name: "IdentResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentResolver__factory>;
    getContractFactory(
      name: "MetaDataResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaDataResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "ProfileResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileResolver__factory>;
    getContractFactory(
      name: "RoutesResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoutesResolver__factory>;
    getContractFactory(
      name: "AKXRoles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXRoles__factory>;
    getContractFactory(
      name: "AKX3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKX3__factory>;
    getContractFactory(
      name: "AKXAccounts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXAccounts__factory>;
    getContractFactory(
      name: "ERC2055",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2055__factory>;
    getContractFactory(
      name: "ERC2055Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2055Wrapper__factory>;
    getContractFactory(
      name: "IERC2055Decentralized",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2055Decentralized__factory>;
    getContractFactory(
      name: "IERC2055Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2055Storage__factory>;
    getContractFactory(
      name: "IERC2055",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2055__factory>;
    getContractFactory(
      name: "BuyingLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BuyingLogic__factory>;
    getContractFactory(
      name: "ISignatureValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureValidator__factory>;
    getContractFactory(
      name: "ERC2055Transaction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2055Transaction__factory>;
    getContractFactory(
      name: "TransactionArchivesStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionArchivesStorage__factory>;
    getContractFactory(
      name: "LabzERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LabzERC20__factory>;
    getContractFactory(
      name: "Referrals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Referrals__factory>;
    getContractFactory(
      name: "RewardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardToken__factory>;
    getContractFactory(
      name: "AccountStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountStorage__factory>;
    getContractFactory(
      name: "AdminUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUtils__factory>;
    getContractFactory(
      name: "DAOProposalsUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAOProposalsUtils__factory>;
    getContractFactory(
      name: "DAOUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAOUtils__factory>;
    getContractFactory(
      name: "LibMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibMath__factory>;
    getContractFactory(
      name: "Pricing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pricing__factory>;

    getContractAt(
      name: "OwnableUnset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUnset>;
    getContractAt(
      name: "ERC725YCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC725YCore>;
    getContractAt(
      name: "IERC725Y",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC725Y>;
    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20WrapperUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WrapperUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BurnableUpgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "ERC721URIStorageUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorageUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Snapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Snapshot>;
    getContractAt(
      name: "ERC20Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "IERC777Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "ConditionalEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalEscrow>;
    getContractAt(
      name: "Escrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Escrow>;
    getContractAt(
      name: "RefundEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundEscrow>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AKXSystem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXSystem>;
    getContractAt(
      name: "BaseController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseController>;
    getContractAt(
      name: "PrivateSaleController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrivateSaleController>;
    getContractAt(
      name: "RootController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootController>;
    getContractAt(
      name: "IAuth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuth>;
    getContractAt(
      name: "IEIP721U",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP721U>;
    getContractAt(
      name: "ILogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILogic>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IModuleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleRegistry>;
    getContractAt(
      name: "IUserRecord",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUserRecord>;
    getContractAt(
      name: "IUserRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUserRegistry>;
    getContractAt(
      name: "Rewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Rewards>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "FeeCollectionLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeCollectionLogic>;
    getContractAt(
      name: "LockLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockLogic>;
    getContractAt(
      name: "PrivateBuyingLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrivateBuyingLogic>;
    getContractAt(
      name: "PrivateSaleLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrivateSaleLogic>;
    getContractAt(
      name: "ReferralLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReferralLogic>;
    getContractAt(
      name: "ISignatureValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureValidator>;
    getContractAt(
      name: "SignMessageLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignMessageLogic>;
    getContractAt(
      name: "BaseModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseModule>;
    getContractAt(
      name: "DidRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DidRegistry>;
    getContractAt(
      name: "ModuleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleRegistry>;
    getContractAt(
      name: "ModulesManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModulesManager>;
    getContractAt(
      name: "ModuleStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleStorage>;
    getContractAt(
      name: "UDS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UDS>;
    getContractAt(
      name: "UserDataServiceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserDataServiceResolver>;
    getContractAt(
      name: "AkxWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AkxWallet>;
    getContractAt(
      name: "AKXWalletFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXWalletFactory>;
    getContractAt(
      name: "FallbackManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FallbackManager>;
    getContractAt(
      name: "AkxWalletManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AkxWalletManager>;
    getContractAt(
      name: "NonCustodialWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonCustodialWallet>;
    getContractAt(
      name: "AKXProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXProxy>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "AKXProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXProxyFactory>;
    getContractAt(
      name: "IProxyCreationCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyCreationCallback>;
    getContractAt(
      name: "BaseUserRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUserRegistry>;
    getContractAt(
      name: "Identity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Identity>;
    getContractAt(
      name: "IdentitySigner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentitySigner>;
    getContractAt(
      name: "IIdentity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentity>;
    getContractAt(
      name: "IdentityRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentityRegistry>;
    getContractAt(
      name: "AllResolvers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllResolvers>;
    getContractAt(
      name: "BaseResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseResolver>;
    getContractAt(
      name: "IdentResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentResolver>;
    getContractAt(
      name: "MetaDataResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaDataResolver>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "ProfileResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileResolver>;
    getContractAt(
      name: "RoutesResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoutesResolver>;
    getContractAt(
      name: "AKXRoles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXRoles>;
    getContractAt(
      name: "AKX3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKX3>;
    getContractAt(
      name: "AKXAccounts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXAccounts>;
    getContractAt(
      name: "ERC2055",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2055>;
    getContractAt(
      name: "ERC2055Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2055Wrapper>;
    getContractAt(
      name: "IERC2055Decentralized",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2055Decentralized>;
    getContractAt(
      name: "IERC2055Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2055Storage>;
    getContractAt(
      name: "IERC2055",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2055>;
    getContractAt(
      name: "BuyingLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BuyingLogic>;
    getContractAt(
      name: "ISignatureValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureValidator>;
    getContractAt(
      name: "ERC2055Transaction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2055Transaction>;
    getContractAt(
      name: "TransactionArchivesStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionArchivesStorage>;
    getContractAt(
      name: "LabzERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LabzERC20>;
    getContractAt(
      name: "Referrals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Referrals>;
    getContractAt(
      name: "RewardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardToken>;
    getContractAt(
      name: "AccountStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountStorage>;
    getContractAt(
      name: "AdminUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUtils>;
    getContractAt(
      name: "DAOProposalsUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAOProposalsUtils>;
    getContractAt(
      name: "DAOUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DAOUtils>;
    getContractAt(
      name: "LibMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibMath>;
    getContractAt(
      name: "Pricing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pricing>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
