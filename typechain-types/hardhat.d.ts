/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AKXEcosystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXEcosystem__factory>;
    getContractFactory(
      name: "AKXStates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXStates__factory>;
    getContractFactory(
      name: "AKXMetas",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXMetas__factory>;
    getContractFactory(
      name: "Auth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Auth__factory>;
    getContractFactory(
      name: "IAKX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAKX__factory>;
    getContractFactory(
      name: "IAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuth__factory>;
    getContractFactory(
      name: "IEIP721U",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP721U__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleRegistry__factory>;
    getContractFactory(
      name: "IUserRecord",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUserRecord__factory>;
    getContractFactory(
      name: "IUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUserRegistry__factory>;
    getContractFactory(
      name: "LabzERC2055",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LabzERC2055__factory>;
    getContractFactory(
      name: "LibMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibMath__factory>;
    getContractFactory(
      name: "Pricing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pricing__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "BaseModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseModule__factory>;
    getContractFactory(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidRegistry__factory>;
    getContractFactory(
      name: "ModuleRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleRegistry__factory>;
    getContractFactory(
      name: "ModulesManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModulesManager__factory>;
    getContractFactory(
      name: "ModuleStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleStorage__factory>;
    getContractFactory(
      name: "UDS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UDS__factory>;
    getContractFactory(
      name: "UserDataServiceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserDataServiceResolver__factory>;
    getContractFactory(
      name: "BaseUserRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUserRegistry__factory>;
    getContractFactory(
      name: "AllResolvers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllResolvers__factory>;
    getContractFactory(
      name: "BaseResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseResolver__factory>;
    getContractFactory(
      name: "IdentResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentResolver__factory>;
    getContractFactory(
      name: "MetaDataResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MetaDataResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "ProfileResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileResolver__factory>;
    getContractFactory(
      name: "RoutesResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoutesResolver__factory>;
    getContractFactory(
      name: "AKXRoles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AKXRoles__factory>;
    getContractFactory(
      name: "ERC2055",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2055__factory>;
    getContractFactory(
      name: "IERC2055Decentralized",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2055Decentralized__factory>;
    getContractFactory(
      name: "IERC2055Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2055Storage__factory>;
    getContractFactory(
      name: "IERC2055",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2055__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AKXEcosystem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXEcosystem>;
    getContractAt(
      name: "AKXStates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXStates>;
    getContractAt(
      name: "AKXMetas",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXMetas>;
    getContractAt(
      name: "Auth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Auth>;
    getContractAt(
      name: "IAKX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAKX>;
    getContractAt(
      name: "IAuth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuth>;
    getContractAt(
      name: "IEIP721U",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP721U>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IModuleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleRegistry>;
    getContractAt(
      name: "IUserRecord",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUserRecord>;
    getContractAt(
      name: "IUserRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUserRegistry>;
    getContractAt(
      name: "LabzERC2055",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LabzERC2055>;
    getContractAt(
      name: "LibMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibMath>;
    getContractAt(
      name: "Pricing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pricing>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "BaseModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseModule>;
    getContractAt(
      name: "DidRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DidRegistry>;
    getContractAt(
      name: "ModuleRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleRegistry>;
    getContractAt(
      name: "ModulesManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModulesManager>;
    getContractAt(
      name: "ModuleStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleStorage>;
    getContractAt(
      name: "UDS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UDS>;
    getContractAt(
      name: "UserDataServiceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserDataServiceResolver>;
    getContractAt(
      name: "BaseUserRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUserRegistry>;
    getContractAt(
      name: "AllResolvers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllResolvers>;
    getContractAt(
      name: "BaseResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseResolver>;
    getContractAt(
      name: "IdentResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentResolver>;
    getContractAt(
      name: "MetaDataResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MetaDataResolver>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "ProfileResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileResolver>;
    getContractAt(
      name: "RoutesResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoutesResolver>;
    getContractAt(
      name: "AKXRoles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AKXRoles>;
    getContractAt(
      name: "ERC2055",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2055>;
    getContractAt(
      name: "IERC2055Decentralized",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2055Decentralized>;
    getContractAt(
      name: "IERC2055Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2055Storage>;
    getContractAt(
      name: "IERC2055",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2055>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
